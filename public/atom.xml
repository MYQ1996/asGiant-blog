<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>AsGiant-bolg</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-06-15T08:35:19.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Mason Mei</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2 axios在项目中的运用</title>
    <link href="http://yoursite.com/2019/06/11/axios/2%20axios%E5%9C%A8%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84%E8%BF%90%E7%94%A8/"/>
    <id>http://yoursite.com/2019/06/11/axios/2 axios在项目中的运用/</id>
    <published>2019-06-11T12:19:05.000Z</published>
    <updated>2019-06-15T08:35:19.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 全站http配置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * axios参数说明</span></span><br><span class="line"><span class="comment"> * isSerialize是否开启form表单提交</span></span><br><span class="line"><span class="comment"> * isToken是否需要token</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'@/store/'</span>;</span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'@/router/router'</span></span><br><span class="line"><span class="keyword">import</span> &#123; serialize &#125; <span class="keyword">from</span> <span class="string">'@/util/util'</span></span><br><span class="line"><span class="keyword">import</span> &#123;getToken,getRoleTitle&#125; <span class="keyword">from</span> <span class="string">'@/util/auth'</span> <span class="comment">// 获取相对应的权限</span></span><br><span class="line"><span class="keyword">import</span> &#123;Message&#125; <span class="keyword">from</span> <span class="string">'element-ui'</span> <span class="comment">// 调用弹窗组件</span></span><br><span class="line"><span class="keyword">import</span> website <span class="keyword">from</span> <span class="string">'@/config/website'</span>; <span class="comment">// statusWhiteList 通过此处，获取白名单，默认[400]</span></span><br><span class="line"><span class="keyword">import</span> NProgress <span class="keyword">from</span> <span class="string">'nprogress'</span> <span class="comment">// progress bar vue中的进度条</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'nprogress/nprogress.css'</span> <span class="comment">// progress bar style</span></span><br><span class="line"><span class="keyword">import</span> Cookies <span class="keyword">from</span> <span class="string">'js-cookie'</span></span><br><span class="line"></span><br><span class="line">axios.defaults.timeout = <span class="number">20000</span>; <span class="comment">// 设置超时时间</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回其他状态吗</span></span><br><span class="line"><span class="comment">// 定义对于给定的HTTP 响应状态码是 resolve 或 reject  promise 。</span></span><br><span class="line"><span class="comment">// 如果 `validateStatus` 返回 `true` (或者设置为 `null` 或 `undefined`)，</span></span><br><span class="line"><span class="comment">// promise 将被 resolve; 否则，promise 将被 rejecte</span></span><br><span class="line"></span><br><span class="line">axios.defaults.validateStatus = <span class="function"><span class="keyword">function</span> (<span class="params">status</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> status &gt;= <span class="number">200</span> &amp;&amp; status &lt;= <span class="number">500</span>; <span class="comment">// 默认的</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//跨域请求，允许保存cookie</span></span><br><span class="line">axios.defaults.withCredentials = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NProgress Configuration</span></span><br><span class="line"><span class="comment">// 通过设置为false关闭加载旋转器。(默认值是ture)</span></span><br><span class="line">NProgress.configure(&#123;</span><br><span class="line">    showSpinner: <span class="literal">false</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//HTTPrequest拦截-添加请求拦截器</span></span><br><span class="line">axios.interceptors.request.use(<span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    </span><br><span class="line">    NProgress.start() <span class="comment">// start progress bar  加载器开始加载</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> meta = (config.meta || &#123;&#125;); <span class="comment">// </span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> isToken = meta.isToken === <span class="literal">false</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (getToken() &amp;&amp; !isToken) &#123;</span><br><span class="line">        config.headers[<span class="string">'Admin.Authority.Token.cashloan'</span>] = getToken();</span><br><span class="line">        <span class="comment">// 'Bearer ' + getToken() // 让每个请求携带token--['Authorization']为自定义key 请根据实际情况自行修改</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//headers中配置serialize为true开启序列化    是否开启form表单提交</span></span><br><span class="line">    <span class="keyword">if</span> (config.methods === <span class="string">'post'</span> &amp;&amp; meta.isSerialize === <span class="literal">true</span>) &#123;</span><br><span class="line">        config.data =config.data =&gt; &#123;</span><br><span class="line">            <span class="keyword">let</span> list = [];</span><br><span class="line">            <span class="built_in">Object</span>.keys(data).forEach(<span class="function"><span class="params">ele</span> =&gt;</span> &#123;</span><br><span class="line">                list.push(<span class="string">`<span class="subst">$&#123;ele&#125;</span>=<span class="subst">$&#123;data[ele]&#125;</span>`</span>)</span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="keyword">return</span> list.join(<span class="string">'&amp;'</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">    </span><br><span class="line">&#125;, error =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//HTTPresponse拦截-添加响应拦截器</span></span><br><span class="line">axios.interceptors.response.use(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    NProgress.done(); <span class="comment">// 进度条关闭</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> status = <span class="built_in">Number</span>(res.status) || <span class="number">200</span>; <span class="comment">// 返回值必须是200</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> statusWhiteList = website.statusWhiteList || []; <span class="comment">// 白名单 400</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> message = res.data.message || <span class="string">'未知错误'</span>; <span class="comment">// 确定的返回值或者是'未知错误'</span></span><br><span class="line">   </span><br><span class="line">    <span class="keyword">const</span> code = res.data.code</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (code === <span class="number">11002</span>) &#123;</span><br><span class="line">        Message(&#123;</span><br><span class="line">            message,</span><br><span class="line">            type: <span class="string">"error"</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (code === <span class="number">10004</span>) &#123;</span><br><span class="line">        Message(&#123;</span><br><span class="line">            message: <span class="string">"有另一台设备登录"</span>,</span><br><span class="line">            type: <span class="string">'error'</span></span><br><span class="line">        &#125;)</span><br><span class="line">        store.dispatch(<span class="string">'FedLogOut'</span>).then(<span class="function"><span class="params">()</span> =&gt;</span> router.push(&#123;</span><br><span class="line">            path: <span class="string">'/login'</span></span><br><span class="line">        &#125;));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (code === <span class="number">10001</span>) &#123;</span><br><span class="line">        Message(&#123;</span><br><span class="line">            message: <span class="string">"请重新登录"</span>,</span><br><span class="line">            type: <span class="string">'error'</span></span><br><span class="line">        &#125;)</span><br><span class="line">        Cookies.set(<span class="string">'loading'</span>, <span class="literal">true</span>)</span><br><span class="line">        store.dispatch(<span class="string">'FedLogOut'</span>).then(<span class="function"><span class="params">()</span> =&gt;</span> router.push(&#123;</span><br><span class="line">            path: <span class="string">'/login'</span></span><br><span class="line">        &#125;));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (code === <span class="number">10002</span>) &#123;</span><br><span class="line">        Message(&#123;</span><br><span class="line">            dangerouslyUseHTMLString: <span class="literal">true</span>,</span><br><span class="line">            message: <span class="string">`接口为<span class="subst">$&#123;res.request.custom.url&#125;</span>&lt;/br&gt;&lt;/br&gt;<span class="subst">$&#123;getRoleTitle()&#125;</span>没有权限`</span>,</span><br><span class="line">            type: <span class="string">'error'</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (code === <span class="number">10003</span>) &#123;</span><br><span class="line">        Message(&#123;</span><br><span class="line">            dangerouslyUseHTMLString: <span class="literal">true</span>,</span><br><span class="line">            message,</span><br><span class="line">            type: <span class="string">'error'</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (code === <span class="number">404</span>) &#123;</span><br><span class="line">        Message(&#123;</span><br><span class="line">            dangerouslyUseHTMLString: <span class="literal">true</span>,</span><br><span class="line">            message: <span class="string">`接口为<span class="subst">$&#123;res.request.custom.url&#125;</span>&lt;/br&gt;&lt;/br&gt;<span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(res.data)&#125;</span>`</span>,</span><br><span class="line">            type: <span class="string">'error'</span></span><br><span class="line">        &#125;)</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (code === <span class="number">400</span>) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (res.data.message.includes(<span class="string">'/'</span>)) &#123;</span><br><span class="line">            Message(&#123;</span><br><span class="line">                dangerouslyUseHTMLString: <span class="literal">true</span>,</span><br><span class="line">                message: message.split(<span class="string">'/'</span>)[<span class="number">1</span>],</span><br><span class="line">                type: <span class="string">'error'</span></span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Message(&#123;</span><br><span class="line">            dangerouslyUseHTMLString: <span class="literal">true</span>,</span><br><span class="line">            message: <span class="string">`<span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(res.data)&#125;</span>`</span>,</span><br><span class="line">            type: <span class="string">'error'</span></span><br><span class="line">        &#125;)</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (code === <span class="number">500</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!res.data.message.includes(<span class="string">"TIMEOUT"</span>))&#123;</span><br><span class="line">            Message(&#123;</span><br><span class="line">                dangerouslyUseHTMLString: <span class="literal">true</span>,</span><br><span class="line">                message:<span class="string">`服务器故障，请稍后重试`</span>,</span><br><span class="line">                <span class="comment">// message: `接口为$&#123;res.request.custom.url&#125;&lt;/br&gt;&lt;/br&gt;$&#123;JSON.stringify(res.data)&#125;`,</span></span><br><span class="line">                type: <span class="string">'error'</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果在白名单里则自行catch逻辑处理</span></span><br><span class="line">    <span class="keyword">if</span> (statusWhiteList.includes(status)) <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(res);</span><br><span class="line">    <span class="comment">//如果是401则跳转到登录页面</span></span><br><span class="line">    <span class="keyword">if</span> (status === <span class="number">401</span>) store.dispatch(<span class="string">'FedLogOut'</span>).then(<span class="function"><span class="params">()</span> =&gt;</span> router.push(&#123; <span class="attr">path</span>: <span class="string">'/login'</span> &#125;));</span><br><span class="line">    <span class="comment">// 如果请求为非200否者默认统一处理</span></span><br><span class="line">    <span class="keyword">if</span> (status !== <span class="number">200</span>) &#123;</span><br><span class="line">        Message(&#123;</span><br><span class="line">            message: message,</span><br><span class="line">            type: <span class="string">'error'</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(<span class="keyword">new</span> <span class="built_in">Error</span>(message))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;, error =&gt; &#123;</span><br><span class="line">    NProgress.done();</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(<span class="keyword">new</span> <span class="built_in">Error</span>(error));</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> axios;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span 
      
    
    </summary>
    
      <category term="axios" scheme="http://yoursite.com/categories/axios/"/>
    
    
      <category term="axios" scheme="http://yoursite.com/tags/axios/"/>
    
  </entry>
  
  <entry>
    <title>1 axios中文文档</title>
    <link href="http://yoursite.com/2019/06/11/axios/1%20axios%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3/"/>
    <id>http://yoursite.com/2019/06/11/axios/1 axios中文文档/</id>
    <published>2019-06-11T11:19:05.000Z</published>
    <updated>2019-06-15T08:34:35.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是-axios？"><a href="#什么是-axios？" class="headerlink" title="什么是 axios？"></a><a href="http://www.axios-js.com/zh-cn/docs/#%E4%BB%80%E4%B9%88%E6%98%AF-axios%EF%BC%9F" target="_blank" rel="noopener"></a>什么是 axios？</h2><p>Axios 是一个基于 promise 的 HTTP 库，可以用在浏览器和 node.js 中。</p><a id="more"></a><h1 id="axios"><a href="#axios" class="headerlink" title="axios"></a><a href="http://www.axios-js.com/zh-cn/docs/#axios" target="_blank" rel="noopener"></a>axios</h1><p><a href="https://www.npmjs.org/package/axios" target="_blank" rel="noopener"><img src="https://img.shields.io/npm/v/axios.svg?style=flat-square#align=left&display=inline&height=20&originHeight=20&originWidth=88&status=done&width=88" alt></a><br><a href="https://travis-ci.org/axios/axios" target="_blank" rel="noopener"><img src="https://img.shields.io/travis/axios/axios.svg?style=flat-square#align=left&display=inline&height=20&originHeight=20&originWidth=88&status=done&width=88" alt></a><br><a href="https://coveralls.io/r/mzabriskie/axios" target="_blank" rel="noopener"><img src="https://img.shields.io/coveralls/mzabriskie/axios.svg?style=flat-square#align=left&display=inline&height=20&originHeight=20&originWidth=96&status=done&width=96" alt></a><br><a href="http://npm-stat.com/charts.html?package=axios" target="_blank" rel="noopener"><img src="https://img.shields.io/npm/dm/axios.svg?style=flat-square#align=left&display=inline&height=20&originHeight=20&originWidth=142&status=done&width=142" alt></a><br><a href="https://gitter.im/mzabriskie/axios" target="_blank" rel="noopener"><img src="https://img.shields.io/gitter/room/mzabriskie/axios.svg?style=flat-square#align=left&display=inline&height=20&originHeight=20&originWidth=90&status=done&width=90" alt></a><br><a href="https://www.codetriage.com/axios/axios" target="_blank" rel="noopener"><img src="https://cdn.nlark.com/yuque/0/2019/svg/271124/1560250004028-3c53945d-a580-4506-bd3a-a4f7b19494d5.svg#align=left&display=inline&height=20&originHeight=20&originWidth=109&size=0&status=done&width=109" alt></a><br>Axios 是一个基于 promise 的 HTTP 库，可以用在浏览器和 node.js 中。</p><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a><a href="http://www.axios-js.com/zh-cn/docs/#%E7%89%B9%E6%80%A7" target="_blank" rel="noopener"></a>特性</h2><ul><li>从浏览器中创建 <a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest" target="_blank" rel="noopener">XMLHttpRequests</a></li><li>从 node.js 创建 <a href="http://nodejs.org/api/http.html" target="_blank" rel="noopener">http</a> 请求</li><li>支持 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="noopener">Promise</a> API</li><li>拦截请求和响应</li><li>转换请求数据和响应数据</li><li>取消请求</li><li>自动转换 JSON 数据</li><li>客户端支持防御 <a href="http://en.wikipedia.org/wiki/Cross-site_request_forgery" target="_blank" rel="noopener">XSRF</a></li></ul><h2 id="浏览器支持"><a href="#浏览器支持" class="headerlink" title="浏览器支持"></a><a href="http://www.axios-js.com/zh-cn/docs/#%E6%B5%8F%E8%A7%88%E5%99%A8%E6%94%AF%E6%8C%81" target="_blank" rel="noopener"></a>浏览器支持</h2><table><thead><tr><th></th><th align="left"><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1560250004759-3575626d-d083-496e-b471-758f9ec664e7.png#align=left&display=inline&percent=0&size=0&status=done" alt></th><th align="left"><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1560250006923-c67547d7-a258-4726-ab88-7b129d3fdf57.png#align=left&display=inline&percent=0&size=0&status=done" alt></th><th align="left"><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1560250004234-440efe9c-c7b2-4546-a0ed-9664320de551.png#align=left&display=inline&percent=0&size=0&status=done" alt></th><th align="left"><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1560250005544-9d6b7dca-e7ec-45d9-8eb1-df8d51d17550.png#align=left&display=inline&percent=0&size=0&status=done" alt></th><th align="left"><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1560250004449-6fcd8996-f3d8-43d2-9576-6c4971a2a43d.png#align=left&display=inline&percent=0&size=0&status=done" alt></th><th align="left"><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1560250005797-3133a7ce-e124-45fa-a646-e96ebd14b619.png#align=left&display=inline&percent=0&size=0&status=done" alt></th></tr></thead><tbody><tr><td>Latest ✔</td><td align="left">Latest ✔</td><td align="left">Latest ✔</td><td align="left">Latest ✔</td><td align="left">Latest ✔</td><td align="left">8+ ✔</td><td align="left"></td></tr></tbody></table><p><a href="https://saucelabs.com/u/axios" target="_blank" rel="noopener"><img src="https://cdn.nlark.com/yuque/0/2019/svg/271124/1560250003320-5caf3430-01a7-4a77-8723-7e89d793b43d.svg#align=left&display=inline&height=140&originHeight=140&originWidth=560&size=0&status=done&width=560" alt></a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a><a href="http://www.axios-js.com/zh-cn/docs/#%E5%AE%89%E8%A3%85" target="_blank" rel="noopener"></a>安装</h2><p>使用 npm:<br>使用 bower:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install axios</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bower install axios</span><br></pre></td></tr></table></figure><p>使用 cdn:</p><table><thead><tr><th align="left"><script src="https://unpkg.com/axios/dist/axios.min.js"></script></th></tr></thead></table><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a><a href="http://www.axios-js.com/zh-cn/docs/#%E6%A1%88%E4%BE%8B" target="_blank" rel="noopener"></a>案例</h2><p>执行 <code>GET</code> 请求</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 为给定 ID 的 user 创建请求</span></span><br><span class="line">axios.get(<span class="string">'/user?ID=12345'</span>)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(response);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上面的请求也可以这样做</span></span><br><span class="line">axios.get(<span class="string">'/user'</span>, &#123;</span><br><span class="line">    params: &#123;</span><br><span class="line">      ID: <span class="number">12345</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(response);</span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error);  </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>执行 <code>POST</code> 请求</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">axios.post(<span class="string">'/user'</span>, &#123;</span><br><span class="line">    firstName: <span class="string">'Fred'</span>,</span><br><span class="line">    lastName: <span class="string">'Flintstone'</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(response);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>执行多个并发请求</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUserAccount</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> axios.get(<span class="string">'/user/12345'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUserPermissions</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> axios.get(<span class="string">'/user/12345/permissions'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">axios.all([getUserAccount(), getUserPermissions()])</span><br><span class="line">  .then(axios.spread(<span class="function"><span class="keyword">function</span> (<span class="params">acct, perms</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 两个请求现在都执行完成</span></span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><h2 id="axios-API"><a href="#axios-API" class="headerlink" title="axios API"></a>axios API</h2><p>可以通过向 <code>axios</code> 传递相关配置来创建请求</p><h5 id="axios-config"><a href="#axios-config" class="headerlink" title="axios(config)"></a><a href="http://www.axios-js.com/zh-cn/docs/#axios-config" target="_blank" rel="noopener"></a>axios(config)</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 发送 POST 请求</span></span><br><span class="line">axios(&#123;</span><br><span class="line">  method: <span class="string">'post'</span>,</span><br><span class="line">  url: <span class="string">'/user/12345'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    firstName: <span class="string">'Fred'</span>,</span><br><span class="line">    lastName: <span class="string">'Flintstone'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取远端图片</span></span><br><span class="line">axios(&#123;</span><br><span class="line">  method:<span class="string">'get'</span>,</span><br><span class="line">  url:<span class="string">'http://bit.ly/2mTM3nY'</span>,</span><br><span class="line">  responseType:<span class="string">'stream'</span></span><br><span class="line">&#125;)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">  response.data.pipe(fs.createWriteStream(<span class="string">'ada_lovelace.jpg'</span>))</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="axios-url-config"><a href="#axios-url-config" class="headerlink" title="axios(url[, config])"></a><a href="http://www.axios-js.com/zh-cn/docs/#axios-url-config" target="_blank" rel="noopener"></a>axios(url[, config])</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 发送 GET 请求（默认的方法）</span></span><br><span class="line">axios(<span class="string">'/user/12345'</span>);</span><br></pre></td></tr></table></figure><h3 id="请求方法的别名"><a href="#请求方法的别名" class="headerlink" title="请求方法的别名"></a><a href="http://www.axios-js.com/zh-cn/docs/#%E8%AF%B7%E6%B1%82%E6%96%B9%E6%B3%95%E7%9A%84%E5%88%AB%E5%90%8D" target="_blank" rel="noopener"></a>请求方法的别名</h3><p>为方便起见，为所有支持的请求方法提供了别名</p><h5 id="axios-request-config"><a href="#axios-request-config" class="headerlink" title="axios.request(config)"></a><a href="http://www.axios-js.com/zh-cn/docs/#axios-request-config" target="_blank" rel="noopener"></a>axios.request(config)</h5><h5 id="axios-get-url-config"><a href="#axios-get-url-config" class="headerlink" title="axios.get(url[, config])"></a><a href="http://www.axios-js.com/zh-cn/docs/#axios-get-url-config" target="_blank" rel="noopener"></a>axios.get(url[, config])</h5><h5 id="axios-delete-url-config"><a href="#axios-delete-url-config" class="headerlink" title="axios.delete(url[, config])"></a><a href="http://www.axios-js.com/zh-cn/docs/#axios-delete-url-config" target="_blank" rel="noopener"></a>axios.delete(url[, config])</h5><h5 id="axios-head-url-config"><a href="#axios-head-url-config" class="headerlink" title="axios.head(url[, config])"></a><a href="http://www.axios-js.com/zh-cn/docs/#axios-head-url-config" target="_blank" rel="noopener"></a>axios.head(url[, config])</h5><h5 id="axios-options-url-config"><a href="#axios-options-url-config" class="headerlink" title="axios.options(url[, config])"></a><a href="http://www.axios-js.com/zh-cn/docs/#axios-options-url-config" target="_blank" rel="noopener"></a>axios.options(url[, config])</h5><h5 id="axios-post-url-data-config"><a href="#axios-post-url-data-config" class="headerlink" title="axios.post(url[, data[, config]])"></a><a href="http://www.axios-js.com/zh-cn/docs/#axios-post-url-data-config" target="_blank" rel="noopener"></a>axios.post(url[, data[, config]])</h5><h5 id="axios-put-url-data-config"><a href="#axios-put-url-data-config" class="headerlink" title="axios.put(url[, data[, config]])"></a><a href="http://www.axios-js.com/zh-cn/docs/#axios-put-url-data-config" target="_blank" rel="noopener"></a>axios.put(url[, data[, config]])</h5><h5 id="axios-patch-url-data-config"><a href="#axios-patch-url-data-config" class="headerlink" title="axios.patch(url[, data[, config]])"></a><a href="http://www.axios-js.com/zh-cn/docs/#axios-patch-url-data-config" target="_blank" rel="noopener"></a>axios.patch(url[, data[, config]])</h5><h6 id="注意"><a href="#注意" class="headerlink" title="注意"></a><a href="http://www.axios-js.com/zh-cn/docs/#%E6%B3%A8%E6%84%8F" target="_blank" rel="noopener"></a>注意</h6><p>在使用别名方法时， <code>url</code>、<code>method</code>、<code>data</code> 这些属性都不必在配置中指定。</p><h3 id="并发"><a href="#并发" class="headerlink" title="并发"></a><a href="http://www.axios-js.com/zh-cn/docs/#%E5%B9%B6%E5%8F%91" target="_blank" rel="noopener"></a>并发</h3><p>处理并发请求的助手函数</p><h5 id="axios-all-iterable"><a href="#axios-all-iterable" class="headerlink" title="axios.all(iterable)"></a><a href="http://www.axios-js.com/zh-cn/docs/#axios-all-iterable" target="_blank" rel="noopener"></a>axios.all(iterable)</h5><h5 id="axios-spread-callback"><a href="#axios-spread-callback" class="headerlink" title="axios.spread(callback)"></a><a href="http://www.axios-js.com/zh-cn/docs/#axios-spread-callback" target="_blank" rel="noopener"></a>axios.spread(callback)</h5><h3 id="创建实例"><a href="#创建实例" class="headerlink" title="创建实例"></a><a href="http://www.axios-js.com/zh-cn/docs/#%E5%88%9B%E5%BB%BA%E5%AE%9E%E4%BE%8B" target="_blank" rel="noopener"></a>创建实例</h3><p>可以使用自定义配置新建一个 axios 实例</p><h5 id="axios-create-config"><a href="#axios-create-config" class="headerlink" title="axios.create([config])"></a><a href="http://www.axios-js.com/zh-cn/docs/#axios-create-config" target="_blank" rel="noopener"></a>axios.create([config])</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> instance = axios.create(&#123;</span><br><span class="line">  baseURL: <span class="string">'https://some-domain.com/api/'</span>,</span><br><span class="line">  timeout: <span class="number">1000</span>,</span><br><span class="line">  headers: &#123;<span class="string">'X-Custom-Header'</span>: <span class="string">'foobar'</span>&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="实例方法"><a href="#实例方法" class="headerlink" title="实例方法"></a><a href="http://www.axios-js.com/zh-cn/docs/#%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95" target="_blank" rel="noopener"></a>实例方法</h3><p>以下是可用的实例方法。指定的配置将与实例的配置合并。</p><h5 id="axios-request-config-1"><a href="#axios-request-config-1" class="headerlink" title="axios#request(config)"></a><a href="http://www.axios-js.com/zh-cn/docs/#axios-request-config-1" target="_blank" rel="noopener"></a>axios#request(config)</h5><h5 id="axios-get-url-config-1"><a href="#axios-get-url-config-1" class="headerlink" title="axios#get(url[, config])"></a><a href="http://www.axios-js.com/zh-cn/docs/#axios-get-url-config-1" target="_blank" rel="noopener"></a>axios#get(url[, config])</h5><h5 id="axios-delete-url-config-1"><a href="#axios-delete-url-config-1" class="headerlink" title="axios#delete(url[, config])"></a><a href="http://www.axios-js.com/zh-cn/docs/#axios-delete-url-config-1" target="_blank" rel="noopener"></a>axios#delete(url[, config])</h5><h5 id="axios-head-url-config-1"><a href="#axios-head-url-config-1" class="headerlink" title="axios#head(url[, config])"></a><a href="http://www.axios-js.com/zh-cn/docs/#axios-head-url-config-1" target="_blank" rel="noopener"></a>axios#head(url[, config])</h5><h5 id="axios-options-url-config-1"><a href="#axios-options-url-config-1" class="headerlink" title="axios#options(url[, config])"></a><a href="http://www.axios-js.com/zh-cn/docs/#axios-options-url-config-1" target="_blank" rel="noopener"></a>axios#options(url[, config])</h5><h5 id="axios-post-url-data-config-1"><a href="#axios-post-url-data-config-1" class="headerlink" title="axios#post(url[, data[, config]])"></a><a href="http://www.axios-js.com/zh-cn/docs/#axios-post-url-data-config-1" target="_blank" rel="noopener"></a>axios#post(url[, data[, config]])</h5><h5 id="axios-put-url-data-config-1"><a href="#axios-put-url-data-config-1" class="headerlink" title="axios#put(url[, data[, config]])"></a><a href="http://www.axios-js.com/zh-cn/docs/#axios-put-url-data-config-1" target="_blank" rel="noopener"></a>axios#put(url[, data[, config]])</h5><h5 id="axios-patch-url-data-config-1"><a href="#axios-patch-url-data-config-1" class="headerlink" title="axios#patch(url[, data[, config]])"></a><a href="http://www.axios-js.com/zh-cn/docs/#axios-patch-url-data-config-1" target="_blank" rel="noopener"></a>axios#patch(url[, data[, config]])</h5><h2 id="请求配置"><a href="#请求配置" class="headerlink" title="请求配置"></a><a href="http://www.axios-js.com/zh-cn/docs/#%E8%AF%B7%E6%B1%82%E9%85%8D%E7%BD%AE" target="_blank" rel="noopener"></a>请求配置</h2><p>这些是创建请求时可以用的配置选项。只有 <code>url</code> 是必需的。如果没有指定 <code>method</code>，请求将默认使用 <code>get</code>方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="comment">// `url` 是用于请求的服务器 URL</span></span><br><span class="line">  url: <span class="string">'/user'</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `method` 是创建请求时使用的方法</span></span><br><span class="line">  method: <span class="string">'get'</span>, <span class="comment">// default</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// `baseURL` 将自动加在 `url` 前面，除非 `url` 是一个绝对 URL。</span></span><br><span class="line">  <span class="comment">//  它可以通过设置一个 `baseURL` 便于为 axios 实例的方法传递相对 URL</span></span><br><span class="line">  baseURL: <span class="string">'https://some-domain.com/api/'</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `transformRequest` 允许在向服务器发送前，修改请求数据</span></span><br><span class="line">  <span class="comment">// 只能用在 'PUT', 'POST' 和 'PATCH' 这几个请求方法</span></span><br><span class="line">  <span class="comment">// 后面数组中的函数必须返回一个字符串，或 ArrayBuffer，或 Stream</span></span><br><span class="line">  transformRequest: [<span class="function"><span class="keyword">function</span> (<span class="params">data, headers</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 对 data 进行任意转换处理</span></span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">  &#125;],</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `transformResponse` 在传递给 then/catch 前，允许修改响应数据</span></span><br><span class="line">  transformResponse: [<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 对 data 进行任意转换处理</span></span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">  &#125;],</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `headers` 是即将被发送的自定义请求头</span></span><br><span class="line">  headers: &#123;<span class="string">'X-Requested-With'</span>: <span class="string">'XMLHttpRequest'</span>&#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `params` 是即将与请求一起发送的 URL 参数</span></span><br><span class="line">  <span class="comment">// 必须是一个无格式对象(plain object)或 URLSearchParams 对象</span></span><br><span class="line">  params: &#123;</span><br><span class="line">    ID: <span class="number">12345</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">   <span class="comment">// `paramsSerializer` 是一个负责 `params` 序列化的函数</span></span><br><span class="line">  <span class="comment">// (e.g. https://www.npmjs.com/package/qs, http://api.jquery.com/jquery.param/)</span></span><br><span class="line">  paramsSerializer: <span class="function"><span class="keyword">function</span>(<span class="params">params</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Qs.stringify(params, &#123;<span class="attr">arrayFormat</span>: <span class="string">'brackets'</span>&#125;)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `data` 是作为请求主体被发送的数据</span></span><br><span class="line">  <span class="comment">// 只适用于这些请求方法 'PUT', 'POST', 和 'PATCH'</span></span><br><span class="line">  <span class="comment">// 在没有设置 `transformRequest` 时，必须是以下类型之一：</span></span><br><span class="line">  <span class="comment">// - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams</span></span><br><span class="line">  <span class="comment">// - 浏览器专属：FormData, File, Blob</span></span><br><span class="line">  <span class="comment">// - Node 专属： Stream</span></span><br><span class="line">  data: &#123;</span><br><span class="line">    firstName: <span class="string">'Fred'</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `timeout` 指定请求超时的毫秒数(0 表示无超时时间)</span></span><br><span class="line">  <span class="comment">// 如果请求话费了超过 `timeout` 的时间，请求将被中断</span></span><br><span class="line">  timeout: <span class="number">1000</span>,</span><br><span class="line"></span><br><span class="line">   <span class="comment">// `withCredentials` 表示跨域请求时是否需要使用凭证</span></span><br><span class="line">  withCredentials: <span class="literal">false</span>, <span class="comment">// default</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// `adapter` 允许自定义处理请求，以使测试更轻松</span></span><br><span class="line">  <span class="comment">// 返回一个 promise 并应用一个有效的响应 (查阅 [response docs](#response-api)).</span></span><br><span class="line">  adapter: <span class="function"><span class="keyword">function</span> (<span class="params">config</span>) </span>&#123;</span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line"> <span class="comment">// `auth` 表示应该使用 HTTP 基础验证，并提供凭据</span></span><br><span class="line">  <span class="comment">// 这将设置一个 `Authorization` 头，覆写掉现有的任意使用 `headers` 设置的自定义 `Authorization`头</span></span><br><span class="line">  auth: &#123;</span><br><span class="line">    username: <span class="string">'janedoe'</span>,</span><br><span class="line">    password: <span class="string">'s00pers3cret'</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">   <span class="comment">// `responseType` 表示服务器响应的数据类型，可以是 'arraybuffer', 'blob', 'document', 'json', 'text', 'stream'</span></span><br><span class="line">  responseType: <span class="string">'json'</span>, <span class="comment">// default</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// `responseEncoding` indicates encoding to use for decoding responses</span></span><br><span class="line">  <span class="comment">// Note: Ignored for `responseType` of 'stream' or client-side requests</span></span><br><span class="line">  responseEncoding: <span class="string">'utf8'</span>, <span class="comment">// default</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// `xsrfCookieName` 是用作 xsrf token 的值的cookie的名称</span></span><br><span class="line">  xsrfCookieName: <span class="string">'XSRF-TOKEN'</span>, <span class="comment">// default</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// `xsrfHeaderName` is the name of the http header that carries the xsrf token value</span></span><br><span class="line">  xsrfHeaderName: <span class="string">'X-XSRF-TOKEN'</span>, <span class="comment">// default</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// `onUploadProgress` 允许为上传处理进度事件</span></span><br><span class="line">  onUploadProgress: <span class="function"><span class="keyword">function</span> (<span class="params">progressEvent</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Do whatever you want with the native progress event</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `onDownloadProgress` 允许为下载处理进度事件</span></span><br><span class="line">  onDownloadProgress: <span class="function"><span class="keyword">function</span> (<span class="params">progressEvent</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 对原生进度事件的处理</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">   <span class="comment">// `maxContentLength` 定义允许的响应内容的最大尺寸</span></span><br><span class="line">  maxContentLength: <span class="number">2000</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `validateStatus` 定义对于给定的HTTP 响应状态码是 resolve 或 reject  promise 。如果 `validateStatus` 返回 `true` (或者设置为 `null` 或 `undefined`)，promise 将被 resolve; 否则，promise 将被 rejecte</span></span><br><span class="line">  validateStatus: <span class="function"><span class="keyword">function</span> (<span class="params">status</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> status &gt;= <span class="number">200</span> &amp;&amp; status &lt; <span class="number">300</span>; <span class="comment">// default</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `maxRedirects` 定义在 node.js 中 follow 的最大重定向数目</span></span><br><span class="line">  <span class="comment">// 如果设置为0，将不会 follow 任何重定向</span></span><br><span class="line">  maxRedirects: <span class="number">5</span>, <span class="comment">// default</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// `socketPath` defines a UNIX Socket to be used in node.js.</span></span><br><span class="line">  <span class="comment">// e.g. '/var/run/docker.sock' to send requests to the docker daemon.</span></span><br><span class="line">  <span class="comment">// Only either `socketPath` or `proxy` can be specified.</span></span><br><span class="line">  <span class="comment">// If both are specified, `socketPath` is used.</span></span><br><span class="line">  socketPath: <span class="literal">null</span>, <span class="comment">// default</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// `httpAgent` 和 `httpsAgent` 分别在 node.js 中用于定义在执行 http 和 https 时使用的自定义代理。允许像这样配置选项：</span></span><br><span class="line">  <span class="comment">// `keepAlive` 默认没有启用</span></span><br><span class="line">  httpAgent: <span class="keyword">new</span> http.Agent(&#123; <span class="attr">keepAlive</span>: <span class="literal">true</span> &#125;),</span><br><span class="line">  httpsAgent: <span class="keyword">new</span> https.Agent(&#123; <span class="attr">keepAlive</span>: <span class="literal">true</span> &#125;),</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 'proxy' 定义代理服务器的主机名称和端口</span></span><br><span class="line">  <span class="comment">// `auth` 表示 HTTP 基础验证应当用于连接代理，并提供凭据</span></span><br><span class="line">  <span class="comment">// 这将会设置一个 `Proxy-Authorization` 头，覆写掉已有的通过使用 `header` 设置的自定义 `Proxy-Authorization` 头。</span></span><br><span class="line">  proxy: &#123;</span><br><span class="line">    host: <span class="string">'127.0.0.1'</span>,</span><br><span class="line">    port: <span class="number">9000</span>,</span><br><span class="line">    auth: &#123;</span><br><span class="line">      username: <span class="string">'mikeymike'</span>,</span><br><span class="line">      password: <span class="string">'rapunz3l'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `cancelToken` 指定用于取消请求的 cancel token</span></span><br><span class="line">  <span class="comment">// （查看后面的 Cancellation 这节了解更多）</span></span><br><span class="line">    </span><br><span class="line">  cancelToken: <span class="keyword">new</span> CancelToken(<span class="function"><span class="keyword">function</span> (<span class="params">cancel</span>) </span>&#123;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="响应结构"><a href="#响应结构" class="headerlink" title="响应结构"></a><a href="http://www.axios-js.com/zh-cn/docs/#%E5%93%8D%E5%BA%94%E7%BB%93%E6%9E%84" target="_blank" rel="noopener"></a>响应结构</h2><p>某个请求的响应包含以下信息</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// `data` 由服务器提供的响应</span></span><br><span class="line">  data: &#123;&#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `status` 来自服务器响应的 HTTP 状态码</span></span><br><span class="line">  status: <span class="number">200</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `statusText` 来自服务器响应的 HTTP 状态信息</span></span><br><span class="line">  statusText: <span class="string">'OK'</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `headers` 服务器响应的头</span></span><br><span class="line">  headers: &#123;&#125;,</span><br><span class="line"></span><br><span class="line">   <span class="comment">// `config` 是为请求提供的配置信息</span></span><br><span class="line">  config: &#123;&#125;,</span><br><span class="line"> <span class="comment">// 'request'</span></span><br><span class="line">  <span class="comment">// `request` is the request that generated this response</span></span><br><span class="line"><span class="comment">// It is the last ClientRequest instance in node.js (in redirects)</span></span><br><span class="line">  <span class="comment">// and an XMLHttpRequest instance the browser</span></span><br><span class="line">  request: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 <code>then</code> 时，你将接收下面这样的响应 :</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">axios.get(<span class="string">'/user/12345'</span>)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(response.data);</span><br><span class="line">    <span class="built_in">console</span>.log(response.status);</span><br><span class="line">    <span class="built_in">console</span>.log(response.statusText);</span><br><span class="line">    <span class="built_in">console</span>.log(response.headers);</span><br><span class="line">    <span class="built_in">console</span>.log(response.config);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在使用 <code>catch</code> 时，或传递 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then" target="_blank" rel="noopener">rejection callback</a> 作为 <code>then</code> 的第二个参数时，响应可以通过 <code>error</code> 对象可被使用，正如在<a href="https://www.kancloud.cn/yunye/axios/234845#handling-errors" target="_blank" rel="noopener">错误处理</a>这一节所讲。</p><h2 id="配置默认值"><a href="#配置默认值" class="headerlink" title="配置默认值"></a><a href="http://www.axios-js.com/zh-cn/docs/#%E9%85%8D%E7%BD%AE%E9%BB%98%E8%AE%A4%E5%80%BC" target="_blank" rel="noopener"></a>配置默认值</h2><p>你可以指定将被用在各个请求的配置默认值</p><h3 id="全局的-axios-默认值"><a href="#全局的-axios-默认值" class="headerlink" title="全局的 axios 默认值"></a><a href="http://www.axios-js.com/zh-cn/docs/#%E5%85%A8%E5%B1%80%E7%9A%84-axios-%E9%BB%98%E8%AE%A4%E5%80%BC" target="_blank" rel="noopener"></a>全局的 axios 默认值</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">axios.defaults.baseURL = <span class="string">'https://api.example.com'</span>;</span><br><span class="line">axios.defaults.headers.common[<span class="string">'Authorization'</span>] = AUTH_TOKEN;</span><br><span class="line">axios.defaults.headers.post[<span class="string">'Content-Type'</span>] = <span class="string">'application/x-www-form-urlencoded'</span>;</span><br></pre></td></tr></table></figure><h3 id="自定义实例默认值"><a href="#自定义实例默认值" class="headerlink" title="自定义实例默认值"></a>自定义实例默认值</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Set config defaults when creating the instance</span></span><br><span class="line"><span class="keyword">const</span> instance = axios.create(&#123;</span><br><span class="line">  baseURL: <span class="string">'https://api.example.com'</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Alter defaults after instance has been created</span></span><br><span class="line">instance.defaults.headers.common[<span class="string">'Authorization'</span>] = AUTH_TOKEN;</span><br></pre></td></tr></table></figure><h3 id="配置的优先顺序"><a href="#配置的优先顺序" class="headerlink" title="配置的优先顺序"></a><a href="http://www.axios-js.com/zh-cn/docs/#%E9%85%8D%E7%BD%AE%E7%9A%84%E4%BC%98%E5%85%88%E9%A1%BA%E5%BA%8F" target="_blank" rel="noopener"></a>配置的优先顺序</h3><p>配置会以一个优先顺序进行合并。这个顺序是：在 <code>lib/defaults.js</code> 找到的库的默认值，然后是实例的 <code>defaults</code> 属性，最后是请求的 <code>config</code> 参数。后者将优先于前者。这里是一个例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用由库提供的配置的默认值来创建实例</span></span><br><span class="line"><span class="comment">// 此时超时配置的默认值是 `0`</span></span><br><span class="line"><span class="keyword">var</span> instance = axios.create();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 覆写库的超时默认值</span></span><br><span class="line"><span class="comment">// 现在，在超时前，所有请求都会等待 2.5 秒</span></span><br><span class="line">instance.defaults.timeout = <span class="number">2500</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为已知需要花费很长时间的请求覆写超时设置</span></span><br><span class="line">instance.get(<span class="string">'/longRequest'</span>, &#123;</span><br><span class="line">  timeout: <span class="number">5000</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h2><p>在请求或响应被 <code>then</code> 或 <code>catch</code> 处理前拦截它们。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加请求拦截器</span></span><br><span class="line">axios.interceptors.request.use(<span class="function"><span class="keyword">function</span> (<span class="params">config</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 在发送请求之前做些什么</span></span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 对请求错误做些什么</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加响应拦截器</span></span><br><span class="line">axios.interceptors.response.use(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 对响应数据做点什么</span></span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">  &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 对响应错误做点什么</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>如果你想在稍后移除拦截器，可以这样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myInterceptor = axios.interceptors.request.use(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;<span class="comment">/*...*/</span>&#125;);</span><br><span class="line">axios.interceptors.request.eject(myInterceptor);</span><br></pre></td></tr></table></figure><p>可以为自定义 axios 实例添加拦截器</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> instance = axios.create();</span><br><span class="line">instance.interceptors.request.use(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;<span class="comment">/*...*/</span>&#125;);</span><br></pre></td></tr></table></figure><h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">axios.get(<span class="string">'/user/12345'</span>)</span><br><span class="line">  .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (error.response) &#123;</span><br><span class="line">      <span class="comment">// The request was made and the server responded with a status code</span></span><br><span class="line">      <span class="comment">// that falls out of the range of 2xx</span></span><br><span class="line">      <span class="built_in">console</span>.log(error.response.data);</span><br><span class="line">      <span class="built_in">console</span>.log(error.response.status);</span><br><span class="line">      <span class="built_in">console</span>.log(error.response.headers);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (error.request) &#123;</span><br><span class="line">      <span class="comment">// The request was made but no response was received</span></span><br><span class="line">      <span class="comment">// `error.request` is an instance of XMLHttpRequest in the browser and an instance of</span></span><br><span class="line">      <span class="comment">// http.ClientRequest in node.js</span></span><br><span class="line">      <span class="built_in">console</span>.log(error.request);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// Something happened in setting up the request that triggered an Error</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'Error'</span>, error.message);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(error.config);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>Y可以使用 <code>validateStatus</code> 配置选项定义一个自定义 HTTP 状态码的错误范围。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">axios.get(<span class="string">'/user/12345'</span>, &#123;</span><br><span class="line">  validateStatus: <span class="function"><span class="keyword">function</span> (<span class="params">status</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> status &lt; <span class="number">500</span>; <span class="comment">// Reject only if the status code is greater than or equal to 500</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="取消"><a href="#取消" class="headerlink" title="取消"></a>取消</h2><p>使用 <em>cancel token</em> 取消请求</p><blockquote><p>Axios 的 cancel token API 基于<a href="https://github.com/tc39/proposal-cancelable-promises" target="_blank" rel="noopener">cancelable promises proposal</a>，它还处于第一阶段。</p></blockquote><p>可以使用 <code>CancelToken.source</code> 工厂方法创建 cancel token，像这样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> CancelToken = axios.CancelToken;</span><br><span class="line"><span class="keyword">const</span> source = CancelToken.source();</span><br><span class="line"></span><br><span class="line">axios.get(<span class="string">'/user/12345'</span>, &#123;</span><br><span class="line">  cancelToken: source.token</span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">thrown</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (axios.isCancel(thrown)) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Request canceled'</span>, thrown.message);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">     <span class="comment">// 处理错误</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">axios.post(<span class="string">'/user/12345'</span>, &#123;</span><br><span class="line">  name: <span class="string">'new name'</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">  cancelToken: source.token</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取消请求（message 参数是可选的）</span></span><br><span class="line">source.cancel(<span class="string">'Operation canceled by the user.'</span>);</span><br></pre></td></tr></table></figure><p>还可以通过传递一个 executor 函数到 <code>CancelToken</code> 的构造函数来创建 cancel token：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> CancelToken = axios.CancelToken;</span><br><span class="line"><span class="keyword">let</span> cancel;</span><br><span class="line"></span><br><span class="line">axios.get(<span class="string">'/user/12345'</span>, &#123;</span><br><span class="line">  cancelToken: <span class="keyword">new</span> CancelToken(<span class="function"><span class="keyword">function</span> <span class="title">executor</span>(<span class="params">c</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// executor 函数接收一个 cancel 函数作为参数</span></span><br><span class="line">    cancel = c;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// cancel the request</span></span><br><span class="line">cancel();</span><br></pre></td></tr></table></figure><blockquote><p>注意: 可以使用同一个 cancel token 取消多个请求</p></blockquote><h2 id="使用-application-x-www-form-urlencoded-format"><a href="#使用-application-x-www-form-urlencoded-format" class="headerlink" title="使用 application/x-www-form-urlencoded format"></a><a href="http://www.axios-js.com/zh-cn/docs/#%E4%BD%BF%E7%94%A8-application-x-www-form-urlencoded-format" target="_blank" rel="noopener"></a>使用 application/x-www-form-urlencoded format</h2><p>默认情况下，axios将JavaScript对象序列化为JSON。 要以application / x-www-form-urlencoded格式发送数据，您可以使用以下选项之一。</p><h3 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a><a href="http://www.axios-js.com/zh-cn/docs/#%E6%B5%8F%E8%A7%88%E5%99%A8" target="_blank" rel="noopener"></a>浏览器</h3><p>在浏览器中，您可以使用URLSearchParams API，如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> params = <span class="keyword">new</span> URLSearchParams();</span><br><span class="line">params.append(<span class="string">'param1'</span>, <span class="string">'value1'</span>);</span><br><span class="line">params.append(<span class="string">'param2'</span>, <span class="string">'value2'</span>);</span><br><span class="line">axios.post(<span class="string">'/foo'</span>, params);</span><br></pre></td></tr></table></figure><blockquote><p>请注意，所有浏览器都不支持URLSearchParams（请参阅caniuse.com），但可以使用polyfill（确保填充全局环境）。</p></blockquote><p>或者，您可以使用qs库编码数据：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> qs = <span class="built_in">require</span>(<span class="string">'qs'</span>);</span><br><span class="line">axios.post(<span class="string">'/foo'</span>, qs.stringify(&#123; <span class="string">'bar'</span>: <span class="number">123</span> &#125;));</span><br></pre></td></tr></table></figure><p>或者以另一种方式（ES6），</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> qs <span class="keyword">from</span> <span class="string">'qs'</span>;</span><br><span class="line"><span class="keyword">const</span> data = &#123; <span class="string">'bar'</span>: <span class="number">123</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> options = &#123;</span><br><span class="line">  method: <span class="string">'POST'</span>,</span><br><span class="line">  headers: &#123; <span class="string">'content-type'</span>: <span class="string">'application/x-www-form-urlencoded'</span> &#125;,</span><br><span class="line">  data: qs.stringify(data),</span><br><span class="line">  url,</span><br><span class="line">&#125;;</span><br><span class="line">axios(options);</span><br></pre></td></tr></table></figure><h3 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h3><p>在node.js中，您可以使用querystring模块，如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> querystring = <span class="built_in">require</span>(<span class="string">'querystring'</span>);</span><br><span class="line">axios.post(<span class="string">'http://something.com/'</span>, querystring.stringify(&#123; <span class="attr">foo</span>: <span class="string">'bar'</span> &#125;));</span><br></pre></td></tr></table></figure><p>您也可以使用qs库。</p><h2 id="Semver"><a href="#Semver" class="headerlink" title="Semver"></a><a href="http://www.axios-js.com/zh-cn/docs/#Semver" target="_blank" rel="noopener"></a>Semver</h2><p>在axios达到1.0版本之前，破坏性更改将以新的次要版本发布。 例如0.5.1和0.5.4将具有相同的API，但0.6.0将具有重大变化。</p><h2 id="Promises"><a href="#Promises" class="headerlink" title="Promises"></a><a href="http://www.axios-js.com/zh-cn/docs/#Promises" target="_blank" rel="noopener"></a>Promises</h2><p>axios 依赖原生的 ES6 Promise 实现而<a href="http://caniuse.com/promises" target="_blank" rel="noopener">被支持</a>. 如果你的环境不支持 ES6 Promise，你可以使用 <a href="https://github.com/jakearchibald/es6-promise" target="_blank" rel="noopener">polyfill</a>.</p><h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a><a href="http://www.axios-js.com/zh-cn/docs/#TypeScript" target="_blank" rel="noopener"></a>TypeScript</h2><p>axios包括TypeScript定义。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span>;</span><br><span class="line">axios.get(<span class="string">'/user?ID=12345'</span>);</span><br></pre></td></tr></table></figure><h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><ul><li><a href="https://github.com/axios/axios/blob/master/CHANGELOG.md" target="_blank" rel="noopener">Changelog</a></li><li><a href="https://github.com/axios/axios/blob/master/UPGRADE_GUIDE.md" target="_blank" rel="noopener">Upgrade Guide</a></li><li><a href="https://github.com/axios/axios/blob/master/ECOSYSTEM.md" target="_blank" rel="noopener">Ecosystem</a></li><li><a href="https://github.com/axios/axios/blob/master/CONTRIBUTING.md" target="_blank" rel="noopener">Contributing Guide</a></li><li><a href="https://github.com/axios/axios/blob/master/CODE_OF_CONDUCT.md" target="_blank" rel="noopener">Code of Conduct</a></li></ul><h2 id="Credits"><a href="#Credits" class="headerlink" title="Credits"></a><a href="http://www.axios-js.com/zh-cn/docs/#Credits" target="_blank" rel="noopener"></a>Credits</h2><p>axios深受Angular提供的、$http服务的启发。 最终，axios是为了在Angular之外使用而提供独立的类似$http服的务。</p><h2 id="协议"><a href="#协议" class="headerlink" title="协议"></a><a href="http://www.axios-js.com/zh-cn/docs/#%E5%8D%8F%E8%AE%AE" target="_blank" rel="noopener"></a>协议</h2><p>MIT</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是-axios？&quot;&gt;&lt;a href=&quot;#什么是-axios？&quot; class=&quot;headerlink&quot; title=&quot;什么是 axios？&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://www.axios-js.com/zh-cn/docs/#%E4%BB%80%E4%B9%88%E6%98%AF-axios%EF%BC%9F&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;/a&gt;什么是 axios？&lt;/h2&gt;&lt;p&gt;Axios 是一个基于 promise 的 HTTP 库，可以用在浏览器和 node.js 中。&lt;/p&gt;
    
    </summary>
    
      <category term="axios" scheme="http://yoursite.com/categories/axios/"/>
    
    
      <category term="axios" scheme="http://yoursite.com/tags/axios/"/>
    
  </entry>
  
  <entry>
    <title>个人简历</title>
    <link href="http://yoursite.com/2019/06/05/resume/"/>
    <id>http://yoursite.com/2019/06/05/resume/</id>
    <published>2019-06-05T03:19:04.000Z</published>
    <updated>2019-06-15T08:36:30.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>梅衍青</strong>    <br>男  ︳   23岁  ︳大专 ︳ 2年工作经验  ︳ 上海   <br>17621515830 ︳<a href>954663633@qq.com</a>  <br>上海工商职业技术学院   移动互联网方向</p><a id="more"></a><blockquote><p><strong>技能</strong></p></blockquote><p>前端：HTML、CSS、JavaScript<br>前端框架: vue、webpack、cordova、react-native，微信小程序<br>后端：php、node<br>后端框架: thinkphp、express、koa2、egg<br>数据库:mysql、mongodb、redis</p><p>版本控制：git、svn</p><blockquote><p><strong>工作经历</strong>   </p></blockquote><p>上海子杰软件有限公司  2017.01-2018-06  <br>快睿登信息科技(上海)有限公司  2018.06-至今</p><blockquote><p>  <strong>项目经验</strong>  </p></blockquote><p>一、风驰后台v0.2&amp;小通分期v0.2  2019.2-至今<br>项目内容:风驰后台、小通分期(汇宝通)作为第二期项目的迭代。小通分期，增加分期功能。<br>技术栈:avuex、vue全家桶、cordva、webpack、less<br>项目类型:网页、app<br>项目经验:技术点调用cordva插件，获取手机通讯录、GPS、联系人、电量、极光推送等原生功能。同时迭代风驰后台的页面系统，用户量也大量增加后发现并且处理一些关于手机适配的问题(主要是因为cordva是调用手机中的内核浏览器，出现了css3不兼容的问题)<br><br><br>二、重构风驰后台v0.1  2018年12 – 2019-2<br>项目内容:计划迭代汇宝通后台中，我提出了以下问题。1.前后端有绑定关系，发布后，前后端的这种依赖。2.ui的局限，后台都是使用敏捷开发，那么意味着很多组件是根据技术选型的时候就确定了的。我们现有的框架无法做到ui升级。选择迁回老风驰工程量也会很大(这里的重写包括语法结构都需要重写),选择强行在先有ui框架上修改，工程量无法估计。3.需求其实不是很明确的，只能参照老风驰的样子做，新老风驰经手的人都比较多，都是有什么需求直接加什么需求，但是具体权限和细节根据时间的推移，没有任何文档可以参照，所以建议重构。<br>技术栈:avuex、vue全家桶<br>项目类型:网页<br>项目经验：当时遇到了一个问题，就是这套后台必须兼容手机端的问题，element-ui的缺点也提现出来的，那就是对于手机端的适配，很多插件都会有问题，第二个问题就是前端人手紧缺，原来使用的架构，人手上无法维护。加上时间比较紧张，经过调研，采用了avuex的框架方案，该方案的优势在于json驱动ui的思想理念。以最快的速度，重构了风驰后台。<br> <br>三、黑卡  2018.11-2018-12<br>项目内容:根据个人资质情况，可以进行不同次数的征信洗白，享有最高100，000的额度利率低至银行利率，介绍老铁洗白征信，长期有效，连续签到一年，1000元大奖，三星级会员五星级酒店。<br>技术栈: vue、cordva、webpack、less<br>项目类型：app、网页<br>项目经验：针对于先有公司项目的沉淀，公司决定开启黑卡项目业务，对于vue技术的了解和逐步深入后，公司也对于原生和动态交互提出了更高的要求，针对于目前项目的组件规划和开发。<br> <br>四、汇宝通-后台   2018.08-2018-10<br>项目内容: vue后台贷款系统，引流，贷款模块，用户模块，商品模块，进件模块，风控模块<br>技术栈:vue、webpack、element-ui<br>项目类型：网页<br>项目经验:正对于现在走向组件化的趋势，配合公司领导，进行了后台组件的开发。将原先的贷款系统，引流，贷款模块，用户模块，商品模块，进件模块，风控模块拆分为各个模块，方便与后台页面随时的重构组装，服务与公司将部分模块卖给第三方公司的构想。<br> <br>五、汇宝通-app    2018.07-2018-09<br>项目内容: p2p的线上贷款系统，引流，贷款模块，用户模块，商品模块，进件模块，风控模块为一体的app项目。<br>技术栈:vue、cordva、webpack、less<br>项目类型：app、网页<br>项目经验：离开上一家公司后，我开始了新的征程，这第一次对于node技术进行了了解。前端做到工程和模块的话处理，将人力减少到最小数的敏捷开发。对于项目负责人的架构进行了学习和梳理。了解了关于cordva的插件。对于三个端(网页，安卓，ios)的兼容性，达到最快的试错。对于webpack的改造项目工程目录，达到了，一份代码能兼容三个端，并且还能够调用原生的底层权限。<br> <br>六、梯子网小程序   2018.01-2018-06<br>项目内容: 梯子网为教育局和大型社会培训机构提供一站式多机构管理，其中主要涉及两个难点，一是多机构的管理，不同机构可以定制自己模块下的内容，只有本机构下的人可以看到。二是定制化产生页面，不同的机构可以定制自己的页面栏目，根据自己的需要展示对应的内容，这还涉及到了不同机构、角色的权限问题。<br>项目类型: 微信小程序<br>技术栈: wxml、wxss、js<br>项目经验：冬去春来，公司决定实现一个小程序的工作规划，对于项目探索工作交给了我。对于视频的学习，可能因为有着react-native项目经验，对于新起的mvvm这样的设计思路有着充分的了解。所以上手写小程序，反而觉得比较简单。对于微信组件和api进行了了解和使用。对于wx.request进行了封装，和关于一些常用函数的封装，针对一些常用组件的封装。例如wx.getStorage、清空缓存、分享、弹窗等等。方便对于其他协作的伙伴调用和使用。<br> <br>七、上海天马Portal系统    2017.11-2017.12<br>项目内容: 上海天马Portal管理系统是为了在公司内部整合所有业务系统，规范统一入口，消息通知，业务处理，是业务统一入口，用户无需牢记各个应用系统的地址，降低用户使用时的困难，避免用户来回切换业务系统，提升用户工作效率。<br><br>项目类型: 网页<br>技术栈:layui、jquery、html<br>项目经验:第一次带2个实习生一起工作，心里美滋滋啊(不排除项目比较简单)，关于前端我才用了layui框架，使用过bootstrap后，总觉得layui的页面的美观程度还是比bootstrap框架要优雅很多的。也让我开始了解代码的书写规范，按照美工的设计与后台的配合，完成了项目的进度。<br> <br>八、英语学习-EnglishOnlie   2017.08-2017.10<br>项目内容: 软件分学生端和教师端，学生端主要实现学习功能，学习进度通过闯关和教师操作控制，教师端主要实现管理功能，管理学生帐户，学习资源管理，学习进度管理。<br>项目类型:app、网页、微信网页<br>技术栈：react-native、html、jquery<br>项目经验:这个公司遗留下的一个比较老的项目，不少组件使用的是react-android，不兼容ios的组件，这个工作的主要任务，就是将ios的兼容问题彻底的解决、并且兼容网页与微信网页。这个项目最大的特色应该就是学生读英语的功能，可以经过讯飞系统的语言识别，来判断学生的读音，从而给予评分。第一次了解了网页的录音和微信网页的录音调用是不同的，微信的调用，是不同的，微信有着自己独有的api。<br> <br>九、玖龙移动销售    2017.05-2017.07<br>项目内容: 在前端、管理查看集团的产品、订单、销售统计信息。<br>项目类型:app<br>技术栈:react-native<br>项目经验:经过之前三个月的学习，加入了新的项目组，对于这个项目而言，并没有参加项目的原始的开发计划。当时公司其他的项目比较紧张，与项目组长两个人直接飞往东莞珑石集团技术部门，进行了bug的修复，刚刚参加项目的时候，主要是对于ios的适配问题进行了修复工作(因为我是mac),了解了关于ios的info.list。第一次对于ios白名单有所认识，了解了关于前端调用原生的，最大的问题，是关于一些原生的权限问题。<br> <br>十、中国国际珠宝交易平台  2017.01-2017.04  <br>项目内容: “中国国际珠宝交易平台” APP 具有产品搜索/浏览、商品购买、评价、退换货等功能<br>项目类型:app<br>技术栈:react-native<br>项目经验:这个项目是加入前端组织行列的第一个项目，你知道在2017年，这个react-native在大环境下，其实我认为还不算很成熟，当时项目组没有什么这方面的技术，就自发的组织学习这项技术。几个通宵后的学习，学了基本上的flex布局，对于react-natve的特殊的css处理方法进行了了解，了解了fetch的网络请求方案，让工作的环境中还算能够使用这项技术，因为那时候刚刚入行，代码的稚嫩，如今看来还是有很大的问题。</p><blockquote><p><strong>开源项目</strong></p></blockquote><p><br><a href="https://github.com/MYQ1996/asGiant-admin.git" target="_blank" rel="noopener">https://github.com/MYQ1996/asGiant-admin.git</a><br>项目内容:</p><ul><li>基于egg架构的自动生成接口的框架</li><li>你可以这么理解这个框架，就是在你配置完数据后，就生成了增删改查接口，也同时生成了相关的栏目。</li><li>这样即使你是一个不懂后端的同学，你也可以直接调用接口给前端使用</li></ul><p>_<br>在这个项目中，我希望能解决，前端对于后端的不熟悉和了解，但是对于调用接口比较熟悉的业务现状。<br>完成了以下模块。<br>对于表的增删改查操作、增删改字段的信息、短信管理(只需配置短信的key)、邮箱管理(需配置邮箱的key)、人员注册(手机号、用户名、邮箱)、针对于字段添加了人员权限。之后的规划想做个cms，针对于seo的网站排名调优。对于增加之后，直接生成相对应的前端页面，使用node写了一个微信机器人，符合时代需求，达到人工智能，和机器人聊天的过程中，直接操作平台，完成接口的操作。希望之后，技术提升之后，能够够写出一套兼容性比较高的组件，直接配合平台的使用，有考虑过taro，但是感觉对于原生的调用不足，还在思考这部分的工作。最后达到敏捷开发的效果。(因为加班的缘故，所以一直没有做完)。</p><blockquote><p>掘金博客</p></blockquote><p><a href="https://juejin.im/user/5b4e88986fb9a04fba6e752b" target="_blank" rel="noopener">https://juejin.im/user/5b4e88986fb9a04fba6e752b</a></p><blockquote><p><strong>自我描述</strong></p></blockquote><pre><code>对于技术出生，还是个大专。还是受到不少的压力的，现在毕竟都觉得本科生比较好培养嘛。我是15年进的大专。第一年被选中参加了，学校的比赛班，主要就是负责学校对外的比赛参加。大二开始不参加日常课程直接进入培训，大三进入校企合作上班。对于技术不断追求，热衷学习研究新技术，实践在项目中。对于前后端有着一定的理解，希望能达到技术一个新的高度。</code></pre><p>ps: 希望能和贵公司有着合作的机会，也希望能成为你的同事。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;梅衍青&lt;/strong&gt;    &lt;br&gt;男  ︳   23岁  ︳大专 ︳ 2年工作经验  ︳ 上海   &lt;br&gt;17621515830 ︳&lt;a href&gt;954663633@qq.com&lt;/a&gt;  &lt;br&gt;上海工商职业技术学院   移动互联网方向&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>14 连接redis</title>
    <link href="http://yoursite.com/2019/06/02/egg-%E4%BC%81%E4%B8%9A%E7%BA%A7%E6%A1%86%E6%9E%B6%E5%92%8C%E5%BA%94%E7%94%A8%E5%85%A5%E9%97%A8/14%20%E8%BF%9E%E6%8E%A5redis/"/>
    <id>http://yoursite.com/2019/06/02/egg-企业级框架和应用入门/14 连接redis/</id>
    <published>2019-06-02T08:47:43.000Z</published>
    <updated>2019-06-15T08:37:08.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Redis client(support redis portocal) based on ioredis for egg framework</p></blockquote><h3 id="14-1-安装"><a href="#14-1-安装" class="headerlink" title="14.1 安装"></a>14.1 安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i egg-redis --save</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="14-2-配置"><a href="#14-2-配置" class="headerlink" title="14.2 配置"></a>14.2 配置</h3><p>Change <code>${app_root}/config/plugin.js</code> to enable redis plugin:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">exports.redis = &#123;</span><br><span class="line"></span><br><span class="line">  enable: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">  package: <span class="string">'egg-redis'</span>,</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Configure redis information in <code>${app_root}/config/config.default.js</code>:<br><strong>Single Client</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">config.redis = &#123;</span><br><span class="line">  client: &#123;</span><br><span class="line">    port: <span class="number">6379</span>,          <span class="comment">// Redis port</span></span><br><span class="line">    host: <span class="string">'127.0.0.1'</span>,   <span class="comment">// Redis host</span></span><br><span class="line">    password: <span class="string">'auth'</span>,</span><br><span class="line">    db: <span class="number">0</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="14-3-使用方法"><a href="#14-3-使用方法" class="headerlink" title="14.3 使用方法"></a>14.3 使用方法</h3><h4 id="14-3-1-service"><a href="#14-3-1-service" class="headerlink" title="14.3.1 service"></a><a href></a>14.3.1 service</h4><p>app/service/redis.js<br><code>if(this.app.redis)</code>判断是否有启用redis</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Service = <span class="built_in">require</span>(<span class="string">'egg'</span>).Service;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RedisService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line">  <span class="keyword">async</span> <span class="keyword">set</span>(key, value, seconds) &#123;</span><br><span class="line">    value = <span class="built_in">JSON</span>.stringify(value);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.app.redis) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!seconds) &#123;</span><br><span class="line">        <span class="keyword">await</span> <span class="keyword">this</span>.app.redis.set(key, value);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">await</span> <span class="keyword">this</span>.app.redis.set(key, value, <span class="string">'EX'</span>, seconds);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> <span class="keyword">get</span>(key) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.app.redis) &#123;</span><br><span class="line">      <span class="keyword">const</span> data = <span class="keyword">await</span> <span class="keyword">this</span>.app.redis.get(key);</span><br><span class="line">      <span class="keyword">if</span> (!data) <span class="keyword">return</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">JSON</span>.parse(data);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = RedisService;</span><br></pre></td></tr></table></figure><h4 id="14-3-2-controller"><a href="#14-3-2-controller" class="headerlink" title="14.3.2 controller"></a><a href></a>14.3.2 controller</h4><p>app/controller/default/index.js如果没有设置redis缓存，就去请求数据,再设置缓存</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> topNav = <span class="keyword">await</span> <span class="keyword">this</span>.ctx.service.cache.get(<span class="string">'index_topNav'</span>);</span><br><span class="line"><span class="keyword">if</span> (!topNav) &#123;</span><br><span class="line">  topNav = <span class="keyword">await</span> <span class="keyword">this</span>.ctx.model.Nav.find(&#123;</span><br><span class="line">    <span class="string">"position"</span>: <span class="number">1</span></span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">await</span> <span class="keyword">this</span>.ctx.service.cache.set(<span class="string">'index_topNav'</span>, topNav, <span class="number">60</span> * <span class="number">60</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Redis client(support redis portocal) based on ioredis for egg framework&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;14-1-安装&quot;&gt;&lt;a href=&quot;#14-1-安装&quot; class=&quot;headerlink&quot; title=&quot;14.1 安装&quot;&gt;&lt;/a&gt;14.1 安装&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm i egg-redis --save&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="egg-企业级框架和应用入门" scheme="http://yoursite.com/categories/egg-%E4%BC%81%E4%B8%9A%E7%BA%A7%E6%A1%86%E6%9E%B6%E5%92%8C%E5%BA%94%E7%94%A8%E5%85%A5%E9%97%A8/"/>
    
    
      <category term="egg-企业级框架和应用入门" scheme="http://yoursite.com/tags/egg-%E4%BC%81%E4%B8%9A%E7%BA%A7%E6%A1%86%E6%9E%B6%E5%92%8C%E5%BA%94%E7%94%A8%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>13 表单校验机制</title>
    <link href="http://yoursite.com/2019/06/02/egg-%E4%BC%81%E4%B8%9A%E7%BA%A7%E6%A1%86%E6%9E%B6%E5%92%8C%E5%BA%94%E7%94%A8%E5%85%A5%E9%97%A8/13%20%E8%A1%A8%E5%8D%95%E6%A0%A1%E9%AA%8C%E6%9C%BA%E5%88%B6/"/>
    <id>http://yoursite.com/2019/06/02/egg-企业级框架和应用入门/13 表单校验机制/</id>
    <published>2019-06-02T07:47:43.000Z</published>
    <updated>2019-06-15T08:37:39.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>npm egg-validate-plus –save</p></blockquote><h3 id="13-1-开启插件"><a href="#13-1-开启插件" class="headerlink" title="13.1 开启插件"></a><a href="https://github.com/temool/egg-validate-plus#%E5%BC%80%E5%90%AF%E6%8F%92%E4%BB%B6" target="_blank" rel="noopener"></a>13.1 开启插件</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// config/plugin.&#123;env&#125;.js</span><br><span class="line">exports.validatePlus = &#123;</span><br><span class="line">  enable: true,</span><br><span class="line">  package: 'egg-validate-plus',</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="13-2-配置插件"><a href="#13-2-配置插件" class="headerlink" title="13.2 配置插件"></a><a href="https://github.com/temool/egg-validate-plus#%E9%85%8D%E7%BD%AE%E6%8F%92%E4%BB%B6" target="_blank" rel="noopener"></a>13.2 配置插件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// config/config.&#123;env&#125;.js</span></span><br><span class="line"></span><br><span class="line">config.validatePlus = &#123;</span><br><span class="line"></span><br><span class="line">  resolveError(ctx, errors) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (errors.length) &#123;</span><br><span class="line"></span><br><span class="line">      ctx.type = <span class="string">'json'</span>;</span><br><span class="line"></span><br><span class="line">      ctx.status = <span class="number">400</span>;</span><br><span class="line"></span><br><span class="line">      ctx.body = &#123;</span><br><span class="line">        code: <span class="number">400</span>,</span><br><span class="line">        error: errors,</span><br><span class="line">        message: <span class="string">'参数错误'</span>,</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><a name="T95zz"></a></p><h3 id="13-3-使用插件"><a href="#13-3-使用插件" class="headerlink" title="13.3 使用插件"></a><a href="https://github.com/temool/egg-validate-plus#%E4%BD%BF%E7%94%A8%E6%8F%92%E4%BB%B6" target="_blank" rel="noopener"></a>13.3 使用插件</h3><p><a name="9VIBt"></a></p><h4 id="13-3-1-传入字符串"><a href="#13-3-1-传入字符串" class="headerlink" title="13.3.1 传入字符串"></a><a href="https://github.com/temool/egg-validate-plus#1%E4%BC%A0%E5%85%A5%E5%AD%97%E7%AC%A6%E4%B8%B2" target="_blank" rel="noopener"></a>13.3.1 传入字符串</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app/controller/xx.js</span></span><br><span class="line"><span class="keyword">const</span> &#123; query &#125; = <span class="keyword">this</span>.ctx.request;</span><br></pre></td></tr></table></figure><blockquote><p>拿到验证结果</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> validateResult = <span class="keyword">await</span> <span class="keyword">this</span>.ctx.validate(<span class="string">'user.login'</span>, query)</span><br></pre></td></tr></table></figure><blockquote><p>验证不通过时，阻止后面的代码执行</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!validateResult) <span class="keyword">return</span></span><br></pre></td></tr></table></figure><br>> 注意：不要带上 rules<p><a name="4gg0X"></a></p><h4 id="13-3-2-直接传入验证规则对象"><a href="#13-3-2-直接传入验证规则对象" class="headerlink" title="13.3.2 直接传入验证规则对象"></a><a href="https://github.com/temool/egg-validate-plus#2%E7%9B%B4%E6%8E%A5%E4%BC%A0%E5%85%A5%E9%AA%8C%E8%AF%81%E8%A7%84%E5%88%99%E5%AF%B9%E8%B1%A1" target="_blank" rel="noopener"></a>13.3.2 直接传入验证规则对象</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app/controller/xx.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接引入 rules 文件下的验证规则，也可以是自己写的验证规则对象</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rule = <span class="keyword">this</span>.app.rules.user.login</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数据格式</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// const rule = &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//   id: [</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//     &#123; required: true &#125;,</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//     &#123; type: 'number', message: 'id 必须为数字 &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//   ],</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//   password: [</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//     &#123; required: true &#125;,</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//     &#123; type: 'string', message: 'password 必须为字符串 &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//   ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 从客户端传入的参数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; query &#125; = <span class="keyword">this</span>.ctx.request;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数据格式：</span></span><br><span class="line"><span class="comment">// query = &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//   username: 123456,</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//   password: 'abcdefg'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 拿到验证结果</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> validateResult = <span class="keyword">await</span> <span class="keyword">this</span>.ctx.validate(rule, query)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 验证不通过时，阻止后面的代码执行</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!validateResult) <span class="keyword">return</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;npm egg-validate-plus –save&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;13-1-开启插件&quot;&gt;&lt;a href=&quot;#13-1-开启插件&quot; class=&quot;headerlink&quot; title=&quot;13.1 开启插件&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/temool/egg-validate-plus#%E5%BC%80%E5%90%AF%E6%8F%92%E4%BB%B6&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;/a&gt;13.1 开启插件&lt;/h3&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// config/plugin.&amp;#123;env&amp;#125;.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;exports.validatePlus = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  enable: true,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  package: &#39;egg-validate-plus&#39;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="egg-企业级框架和应用入门" scheme="http://yoursite.com/categories/egg-%E4%BC%81%E4%B8%9A%E7%BA%A7%E6%A1%86%E6%9E%B6%E5%92%8C%E5%BA%94%E7%94%A8%E5%85%A5%E9%97%A8/"/>
    
    
      <category term="egg-企业级框架和应用入门" scheme="http://yoursite.com/tags/egg-%E4%BC%81%E4%B8%9A%E7%BA%A7%E6%A1%86%E6%9E%B6%E5%92%8C%E5%BA%94%E7%94%A8%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>12 egg-swagger2</title>
    <link href="http://yoursite.com/2019/06/02/egg-%E4%BC%81%E4%B8%9A%E7%BA%A7%E6%A1%86%E6%9E%B6%E5%92%8C%E5%BA%94%E7%94%A8%E5%85%A5%E9%97%A8/12%20egg-swagger2/"/>
    <id>http://yoursite.com/2019/06/02/egg-企业级框架和应用入门/12 egg-swagger2/</id>
    <published>2019-06-02T06:47:43.000Z</published>
    <updated>2019-06-15T08:38:27.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="12-1-运营场景"><a href="#12-1-运营场景" class="headerlink" title="12.1 运营场景"></a>12.1 运营场景</h3><p>作为后台,例如有人需要后台提供文档….人家java都有swagger,egg在 egg-swagger2 支持下，我们也可以使用。</p><h3 id="12-2-安装"><a href="#12-2-安装" class="headerlink" title="12.2 安装"></a>12.2 安装</h3><blockquote><p>npm i egg-swagger2 -S</p></blockquote><h3 id="12-3-开启插件"><a href="#12-3-开启插件" class="headerlink" title="12.3 开启插件"></a>12.3 开启插件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// config/plugin.js</span></span><br><span class="line">exports.swagger2 = &#123;</span><br><span class="line">  enable: <span class="literal">true</span>,</span><br><span class="line">  package: <span class="string">'egg-swagger2'</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="12-4-插件配置"><a href="#12-4-插件配置" class="headerlink" title="12.4 插件配置"></a>12.4 插件配置</h3><p>config.default.js 中配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">config.swagger2 = &#123;</span><br><span class="line">   enable: <span class="literal">true</span>, <span class="comment">// 禁用swagger , 默认为true</span></span><br><span class="line">   base: &#123;</span><br><span class="line">     <span class="comment">/* default config,support cover</span></span><br><span class="line"><span class="comment">     schemes: [</span></span><br><span class="line"><span class="comment">         'http',</span></span><br><span class="line"><span class="comment">     ],</span></span><br><span class="line"><span class="comment">     host: '127.0.0.1:7001',</span></span><br><span class="line"><span class="comment">     basePath: '/',</span></span><br><span class="line"><span class="comment">     consumes: [</span></span><br><span class="line"><span class="comment">     'application/json',</span></span><br><span class="line"><span class="comment">     ],</span></span><br><span class="line"><span class="comment">     produces: [</span></span><br><span class="line"><span class="comment">     'application/json',</span></span><br><span class="line"><span class="comment">     ],</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">     info: &#123;</span><br><span class="line">       description: <span class="string">'文档介绍,</span></span><br><span class="line"><span class="string">       version: '</span><span class="number">1.0</span><span class="number">.0</span><span class="string">',</span></span><br><span class="line"><span class="string">       title: '</span>文档名称<span class="string">',</span></span><br><span class="line"><span class="string">       contact: &#123;</span></span><br><span class="line"><span class="string">         email: '</span>caandoll@aliyun.com<span class="string">',</span></span><br><span class="line"><span class="string">       &#125;,</span></span><br><span class="line"><span class="string">       license: &#123;</span></span><br><span class="line"><span class="string">         name: '</span>Apache <span class="number">2.0</span><span class="string">',</span></span><br><span class="line"><span class="string">         url: '</span>http:<span class="comment">//www.apache.org/licenses/LICENSE-2.0.html',</span></span><br><span class="line">       &#125;,</span><br><span class="line">     &#125;,</span><br><span class="line">     tags: [&#123;</span><br><span class="line">         name: <span class="string">'admin'</span>,</span><br><span class="line">         description: <span class="string">'Admin desc'</span>,</span><br><span class="line">       &#125;,</span><br><span class="line">       &#123;</span><br><span class="line">         name: <span class="string">'role'</span>,</span><br><span class="line">         description: <span class="string">'Role desc'</span>,</span><br><span class="line">       &#125;,</span><br><span class="line">     ],</span><br><span class="line">     definitions: &#123;</span><br><span class="line">       <span class="comment">// model definitions</span></span><br><span class="line">     &#125;,</span><br><span class="line">     securityDefinitions: &#123;</span><br><span class="line">       <span class="comment">// security definitions</span></span><br><span class="line">     &#125;</span><br><span class="line">   &#125;,</span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure><p><a name="KfZ8e"></a></p><h3 id="12-4-例子"><a href="#12-4-例子" class="headerlink" title="12.4 例子"></a>12.4 例子</h3><p>在  /app/router.js文件中<br><a name="uZ8eN"></a></p><h4 id="12-4-1-post请求"><a href="#12-4-1-post请求" class="headerlink" title="12.4.1 post请求"></a>12.4.1 post请求</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">app</span> =&gt;</span> &#123;</span><br><span class="line">   <span class="keyword">const</span> &#123; router, controller, swagger &#125; = app;</span><br><span class="line">   router.post(<span class="string">'/login'</span>, controller.test.postLogin);</span><br><span class="line">   swagger.post(<span class="string">'/login'</span>, &#123;</span><br><span class="line">       tags: [</span><br><span class="line">         <span class="string">'admin'</span>,</span><br><span class="line">       ],</span><br><span class="line">       summary: <span class="string">'Login a admin'</span>,</span><br><span class="line">       description: <span class="string">''</span>,</span><br><span class="line">       parameters: [</span><br><span class="line">         &#123;</span><br><span class="line">           <span class="keyword">in</span>: <span class="string">'body'</span>,</span><br><span class="line">           name: <span class="string">'body'</span>,</span><br><span class="line">           description: <span class="string">'admin\'s username &amp; password'</span>,</span><br><span class="line">           required: <span class="literal">true</span>,</span><br><span class="line">           schema: &#123;</span><br><span class="line">             type: <span class="string">'object'</span>,</span><br><span class="line">             required: [ <span class="string">'username'</span>, <span class="string">'password'</span> ],</span><br><span class="line">             properties: &#123;</span><br><span class="line">               username: &#123;</span><br><span class="line">                 type: <span class="string">'string'</span>,</span><br><span class="line">                 description: <span class="string">'admin\'s username'</span>,</span><br><span class="line">               &#125;,</span><br><span class="line">               password: &#123;</span><br><span class="line">                 type: <span class="string">'string'</span>,</span><br><span class="line">                 description: <span class="string">'admin\'s password'</span>,</span><br><span class="line">               &#125;,</span><br><span class="line">             &#125;,</span><br><span class="line">           &#125;,</span><br><span class="line">         &#125;,</span><br><span class="line">       ],</span><br><span class="line">       responses: &#123;</span><br><span class="line">         <span class="number">200</span>: &#123;</span><br><span class="line">           description: <span class="string">'SUCCEED'</span>,</span><br><span class="line">           schema: &#123;</span><br><span class="line">             type: <span class="string">'object'</span>,</span><br><span class="line">             properties: &#123;</span><br><span class="line">               status: &#123;</span><br><span class="line">                 type: <span class="string">'string'</span>,</span><br><span class="line">                 description: <span class="string">'status'</span>,</span><br><span class="line">               &#125;,</span><br><span class="line">               data: &#123;</span><br><span class="line">                 type: <span class="string">'object'</span>,</span><br><span class="line">                 description: <span class="string">'data'</span>,</span><br><span class="line">                 properties: &#123;</span><br><span class="line">                   token: &#123;</span><br><span class="line">                     type: <span class="string">'string'</span>,</span><br><span class="line">                     description: <span class="string">'token'</span>,</span><br><span class="line">                   &#125;,</span><br><span class="line">                 &#125;,</span><br><span class="line">               &#125;,</span><br><span class="line">             &#125;,</span><br><span class="line">           &#125;,</span><br><span class="line">         &#125;,</span><br><span class="line">       &#125;,</span><br><span class="line">     &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="7CN29"></a></p><h4 id="12-4-2-get请求"><a href="#12-4-2-get请求" class="headerlink" title="12.4.2 get请求"></a>12.4.2 get请求</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">app</span> =&gt;</span> &#123;</span><br><span class="line">   <span class="keyword">const</span> &#123; router, controller, swagger &#125; = app;</span><br><span class="line">   router.get(<span class="string">'/roles'</span>, controller.test.getRoles);</span><br><span class="line">   swagger.get(<span class="string">'/roles'</span>, &#123;</span><br><span class="line">     tags: [<span class="string">'role'</span>,],</span><br><span class="line">     summary: <span class="string">'search role by page'</span>,</span><br><span class="line">     description: <span class="string">''</span>,</span><br><span class="line">     parameters: [&#123;</span><br><span class="line">       <span class="keyword">in</span>: <span class="string">'query'</span>,</span><br><span class="line">       name: <span class="string">'name'</span>,</span><br><span class="line">       description: <span class="string">'role\'s name'</span>,</span><br><span class="line">     &#125;,</span><br><span class="line">                  &#123;</span><br><span class="line">                    <span class="keyword">in</span>: <span class="string">'query'</span>,</span><br><span class="line">                    name: <span class="string">'pageIndex'</span>,</span><br><span class="line">                    description: <span class="string">'pageIndex'</span>,</span><br><span class="line">                  &#125;,</span><br><span class="line">                  &#123;</span><br><span class="line">                    <span class="keyword">in</span>: <span class="string">'query'</span>,</span><br><span class="line">                    name: <span class="string">'pageSize'</span>,</span><br><span class="line">                    description: <span class="string">'pageSize'</span>,</span><br><span class="line">                  &#125;,</span><br><span class="line">                 ],</span><br><span class="line">     responses: &#123;</span><br><span class="line">       <span class="number">200</span>: &#123;</span><br><span class="line">         description: <span class="string">'SUCCEED'</span>,</span><br><span class="line">         schema: &#123;</span><br><span class="line">           type: <span class="string">'object'</span>,</span><br><span class="line">           properties: &#123;</span><br><span class="line">             status: &#123;</span><br><span class="line">               type: <span class="string">'string'</span>,</span><br><span class="line">               description: <span class="string">'status'</span>,</span><br><span class="line">             &#125;,</span><br><span class="line">             datas: &#123;</span><br><span class="line">               type: <span class="string">'array'</span>,</span><br><span class="line">               description: <span class="string">'result datas'</span>,</span><br><span class="line">               properties: &#123;</span><br><span class="line">                 token: &#123;</span><br><span class="line">                   type: <span class="string">'string'</span>,</span><br><span class="line">                   description: <span class="string">'token'</span>,</span><br><span class="line">                 &#125;,</span><br><span class="line">               &#125;,</span><br><span class="line">             &#125;,</span><br><span class="line">             pageIndex: &#123;</span><br><span class="line">               type: <span class="string">'number'</span>,</span><br><span class="line">               description: <span class="string">'pageIndex'</span>,</span><br><span class="line">             &#125;,</span><br><span class="line">             pageSize: &#123;</span><br><span class="line">               type: <span class="string">'number'</span>,</span><br><span class="line">               description: <span class="string">'pageSize'</span>,</span><br><span class="line">             &#125;,</span><br><span class="line">             totalCount: &#123;</span><br><span class="line">               type: <span class="string">'number'</span>,</span><br><span class="line">               description: <span class="string">'totalCount'</span>,</span><br><span class="line">             &#125;,</span><br><span class="line">           &#125;,</span><br><span class="line">         &#125;,</span><br><span class="line">       &#125;,</span><br><span class="line">     &#125;,</span><br><span class="line">   &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="kLlul"></a></p><h4 id="12-4-3-swagger的使用"><a href="#12-4-3-swagger的使用" class="headerlink" title="12.4.3 swagger的使用"></a>12.4.3 swagger的使用</h4><blockquote><p>npm run dev   跑起来</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1556177097079-8b5f1bd3-0a96-4f8b-9501-4e8e26bff0a3.png#align=left&display=inline&height=57&name=image.png&originHeight=116&originWidth=1506&size=97669&status=done&width=746" alt="image.png"></p><blockquote><p>获取swgger地址 输入浏览器</p></blockquote><blockquote><p>你看到就是文档了</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1556177075826-0099e04f-9791-4449-ac74-1e4a035fde27.png#align=left&display=inline&height=337&name=image.png&originHeight=1300&originWidth=2878&size=161008&status=done&width=746" alt="image.png"></p><blockquote><p>点击try it out</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1556177147187-e83c3408-38ae-4507-945b-92ccfc8ac031.png#align=left&display=inline&height=253&name=image.png&originHeight=942&originWidth=2776&size=119431&status=done&width=746" alt="image.png"></p><blockquote><p>输入你传的值,然后点击Execute</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1556177241221-56d453ed-13e0-434d-a0ef-c547ddaf3a25.png#align=left&display=inline&height=251&name=image.png&originHeight=930&originWidth=2764&size=99436&status=done&width=746" alt="image.png"></p><blockquote><p>结果</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1556177347444-b29b2f31-3dc2-4a1d-9ec1-6e55cafd6544.png#align=left&display=inline&height=260&name=image.png&originHeight=1000&originWidth=2864&size=176157&status=done&width=746" alt="image.png"></p><blockquote><p>你就可以获取到接口传递过来的值,效果类似postman,但是清晰程度比postman好</p></blockquote><p><a name="p0Bhc"></a></p><h3 id="12-5-常见问题"><a href="#12-5-常见问题" class="headerlink" title="12.5 常见问题"></a>12.5 常见问题</h3><p>一般情况下都不会有问题，但是如果你这时候巧妙的用了egg-static,那么你就会报错了<br>经过排查，你就会发现</p><blockquote><p>/node_modules/egg-swagger2/app.js</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1559286239507-15f599a8-e5fc-4252-8deb-77d4fa83ee90.png#align=left&display=inline&height=234&name=image.png&originHeight=468&originWidth=1190&size=124954&status=done&width=595" alt="image.png"></p><p>它会是一个数组，然后报错必须是个字符串,然后你懂得..你给他做成一个字符串即可</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;12-1-运营场景&quot;&gt;&lt;a href=&quot;#12-1-运营场景&quot; class=&quot;headerlink&quot; title=&quot;12.1 运营场景&quot;&gt;&lt;/a&gt;12.1 运营场景&lt;/h3&gt;&lt;p&gt;作为后台,例如有人需要后台提供文档….人家java都有swagger,egg在 egg-swagger2 支持下，我们也可以使用。&lt;/p&gt;
&lt;h3 id=&quot;12-2-安装&quot;&gt;&lt;a href=&quot;#12-2-安装&quot; class=&quot;headerlink&quot; title=&quot;12.2 安装&quot;&gt;&lt;/a&gt;12.2 安装&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;npm i egg-swagger2 -S&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;12-3-开启插件&quot;&gt;&lt;a href=&quot;#12-3-开启插件&quot; class=&quot;headerlink&quot; title=&quot;12.3 开启插件&quot;&gt;&lt;/a&gt;12.3 开启插件&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// config/plugin.js&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;exports.swagger2 = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  enable: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  package: &lt;span class=&quot;string&quot;&gt;&#39;egg-swagger2&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="egg-企业级框架和应用入门" scheme="http://yoursite.com/categories/egg-%E4%BC%81%E4%B8%9A%E7%BA%A7%E6%A1%86%E6%9E%B6%E5%92%8C%E5%BA%94%E7%94%A8%E5%85%A5%E9%97%A8/"/>
    
    
      <category term="egg-企业级框架和应用入门" scheme="http://yoursite.com/tags/egg-%E4%BC%81%E4%B8%9A%E7%BA%A7%E6%A1%86%E6%9E%B6%E5%92%8C%E5%BA%94%E7%94%A8%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>11 引入静态文件</title>
    <link href="http://yoursite.com/2019/06/02/egg-%E4%BC%81%E4%B8%9A%E7%BA%A7%E6%A1%86%E6%9E%B6%E5%92%8C%E5%BA%94%E7%94%A8%E5%85%A5%E9%97%A8/11%20%E5%BC%95%E5%85%A5%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6/"/>
    <id>http://yoursite.com/2019/06/02/egg-企业级框架和应用入门/11 引入静态文件/</id>
    <published>2019-06-02T05:47:43.000Z</published>
    <updated>2019-06-15T08:39:06.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="11-1-经过测试插件设置"><a href="#11-1-经过测试插件设置" class="headerlink" title="11.1 经过测试插件设置"></a>11.1 经过测试插件设置</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">exports.ejs = &#123;</span><br><span class="line">  enable: <span class="literal">true</span>,</span><br><span class="line">  package: <span class="string">'egg-view-ejs'</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="11-2-配置设置"><a href="#11-2-配置设置" class="headerlink" title="11.2 配置设置"></a>11.2 配置设置</h3><blockquote><p>a：静态文件</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">config.static = &#123;</span><br><span class="line"></span><br><span class="line">      prefix: <span class="string">'/'</span>,</span><br><span class="line"></span><br><span class="line">      dir: path.join(appInfo.baseDir, <span class="string">'app/public/'</span>)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><a id="more"></a><blockquote><p>当然此时你会遇到一个问题，你想要多个文件该如何事好</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">config.static = &#123;</span><br><span class="line">   prefix: <span class="string">'/'</span>,</span><br><span class="line">   dir: [ path.join(appInfo.baseDir, <span class="string">'app/view/'</span>),</span><br><span class="line">     path.join(appInfo.baseDir, <span class="string">'app/public/uploads/'</span>),</span><br><span class="line">     path.join(appInfo.baseDir, <span class="string">'app/public/swagger/'</span>) ],</span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure><p> b：模板设置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">config.view = &#123;</span><br><span class="line">  defaultExt: <span class="string">'.html'</span>,</span><br><span class="line">  mapping: &#123;</span><br><span class="line">    <span class="string">'.ejs'</span>: <span class="string">'ejs'</span>,</span><br><span class="line">    <span class="string">'.html'</span>: <span class="string">'ejs'</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="NW3xl"></a></p><h3 id="11-3-路由控制器设置"><a href="#11-3-路由控制器设置" class="headerlink" title="11.3 路由控制器设置"></a>11.3 路由控制器设置</h3><p>//将 index.html 放在app/view里，静态文件放在public里</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; ctx &#125; = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// render user.html</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">yield</span> ctx.render(<span class="string">'index'</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;11-1-经过测试插件设置&quot;&gt;&lt;a href=&quot;#11-1-经过测试插件设置&quot; class=&quot;headerlink&quot; title=&quot;11.1 经过测试插件设置&quot;&gt;&lt;/a&gt;11.1 经过测试插件设置&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;exports.ejs = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  enable: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  package: &lt;span class=&quot;string&quot;&gt;&#39;egg-view-ejs&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;11-2-配置设置&quot;&gt;&lt;a href=&quot;#11-2-配置设置&quot; class=&quot;headerlink&quot; title=&quot;11.2 配置设置&quot;&gt;&lt;/a&gt;11.2 配置设置&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;a：静态文件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;config.static = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      prefix: &lt;span class=&quot;string&quot;&gt;&#39;/&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      dir: path.join(appInfo.baseDir, &lt;span class=&quot;string&quot;&gt;&#39;app/public/&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="egg-企业级框架和应用入门" scheme="http://yoursite.com/categories/egg-%E4%BC%81%E4%B8%9A%E7%BA%A7%E6%A1%86%E6%9E%B6%E5%92%8C%E5%BA%94%E7%94%A8%E5%85%A5%E9%97%A8/"/>
    
    
      <category term="egg-企业级框架和应用入门" scheme="http://yoursite.com/tags/egg-%E4%BC%81%E4%B8%9A%E7%BA%A7%E6%A1%86%E6%9E%B6%E5%92%8C%E5%BA%94%E7%94%A8%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>10 阿里监控</title>
    <link href="http://yoursite.com/2019/06/02/egg-%E4%BC%81%E4%B8%9A%E7%BA%A7%E6%A1%86%E6%9E%B6%E5%92%8C%E5%BA%94%E7%94%A8%E5%85%A5%E9%97%A8/10%20%E9%98%BF%E9%87%8C%E7%9B%91%E6%8E%A7/"/>
    <id>http://yoursite.com/2019/06/02/egg-企业级框架和应用入门/10 阿里监控/</id>
    <published>2019-06-02T03:47:43.000Z</published>
    <updated>2019-06-15T08:39:24.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Node.js 性能平台（alinode）</p></blockquote><p>是面向所有 Node.js 应用提供 <code>性能监控、安全提醒、故障排查、性能优化</code> 等服务的整体性解决方案，提供完善的工具链和服务，协助开发者快速发现和定位线上问题。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i nodeinstall -g</span><br></pre></td></tr></table></figure><p>提供了egg-alinode  来快速接入，无需安装 <code>agenthub</code> 等额外的常驻服务。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i egg-alinode --save</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /config/plugin.js</span></span><br><span class="line"></span><br><span class="line">exports.alinode = &#123;</span><br><span class="line">    enable:<span class="literal">true</span>,</span><br><span class="line">    package:<span class="string">'egg-alinode'</span>,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><a id="more"></a><p>申请一下服务</p><h5 id="访问控制台"><a href="#访问控制台" class="headerlink" title="访问控制台"></a>访问控制台</h5><blockquote><p>控制台地址：<a href="https://node.console.aliyun.com/" target="_blank" rel="noopener">https://node.console.aliyun.com</a></p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1553698871810-715d4bae-e635-4e69-a0f6-110a6571e8fe.png#align=left&display=inline&height=514&name=image.png&originHeight=1028&originWidth=2102&size=99621&status=done&width=1051" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1553698894627-178f1f9c-ae3c-4ada-98a0-0ddb129b16e2.png#align=left&display=inline&height=512&name=image.png&originHeight=1024&originWidth=2092&size=111859&status=done&width=1046" alt="image.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// config/config.default.js</span></span><br><span class="line">exports.alinode = &#123;</span><br><span class="line">  enable: <span class="literal">true</span>,</span><br><span class="line">  appid: <span class="string">'***'</span>,  <span class="comment">// Node.js 性能平台给您的项目生成的 appid</span></span><br><span class="line">  secret: <span class="string">'***'</span>,  <span class="comment">// Node.js 性能平台给您的项目生成的 secret</span></span><br><span class="line">  logdir: <span class="string">'***'</span>,  <span class="comment">//可选，Node.js 性能平台日志输出地址绝对路径，与 NODE_LOG_DIR 保持一致。如：/tmp/，也可以不写</span></span><br><span class="line">  error_log: [</span><br><span class="line">    <span class="comment">// '您的应用在业务层面产生的异常日志的路径，数组，可选，可配置多个',</span></span><br><span class="line">    <span class="comment">// '例如：/root/.logs/error.#YYYY#-#MM#-#DD#.log',</span></span><br><span class="line">    <span class="comment">// '不更改 Egg 默认日志输出路径可不配置本项目',</span></span><br><span class="line">  ],<span class="comment">// 可选</span></span><br><span class="line">  agentidMode:<span class="string">'IP'</span>,  <span class="comment">// 可选，如果设置，则在实例ID中添加部分IP信息，用于多个实例 hostname 相同的场景（以容器为主）</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>然后你就能愉快针对你的egg，进行监控了</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1553697448697-8c6f1393-68d3-4629-b2f3-63ebe66d11ce.png#align=left&display=inline&height=227&name=image.png&originHeight=454&originWidth=2192&size=89567&status=done&width=1096" alt="image.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Node.js 性能平台（alinode）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;是面向所有 Node.js 应用提供 &lt;code&gt;性能监控、安全提醒、故障排查、性能优化&lt;/code&gt; 等服务的整体性解决方案，提供完善的工具链和服务，协助开发者快速发现和定位线上问题。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm i nodeinstall -g&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;提供了egg-alinode  来快速接入，无需安装 &lt;code&gt;agenthub&lt;/code&gt; 等额外的常驻服务。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm i egg-alinode --save&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// /config/plugin.js&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;exports.alinode = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    enable:&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    package:&lt;span class=&quot;string&quot;&gt;&#39;egg-alinode&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="egg-企业级框架和应用入门" scheme="http://yoursite.com/categories/egg-%E4%BC%81%E4%B8%9A%E7%BA%A7%E6%A1%86%E6%9E%B6%E5%92%8C%E5%BA%94%E7%94%A8%E5%85%A5%E9%97%A8/"/>
    
    
      <category term="egg-企业级框架和应用入门" scheme="http://yoursite.com/tags/egg-%E4%BC%81%E4%B8%9A%E7%BA%A7%E6%A1%86%E6%9E%B6%E5%92%8C%E5%BA%94%E7%94%A8%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>9 部署</title>
    <link href="http://yoursite.com/2019/06/02/egg-%E4%BC%81%E4%B8%9A%E7%BA%A7%E6%A1%86%E6%9E%B6%E5%92%8C%E5%BA%94%E7%94%A8%E5%85%A5%E9%97%A8/9%20%E9%83%A8%E7%BD%B2/"/>
    <id>http://yoursite.com/2019/06/02/egg-企业级框架和应用入门/9 部署/</id>
    <published>2019-06-02T02:47:43.000Z</published>
    <updated>2019-06-15T08:39:40.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="9-1-部署服务器"><a href="#9-1-部署服务器" class="headerlink" title="9.1 部署服务器"></a>9.1 部署服务器</h3><blockquote><p>首先当然是在你的服务器上部署好node服务,然后安装好。</p></blockquote><p>服务器需要预装 Node.js，框架支持的 Node 版本为 &gt;= 8.0.0。<br>框架内置了 egg-cluster 来启动 Master 进程，Master 有足够的稳定性，不再需要使用 pm2 等进程守护模块。<br>同时，框架也提供了 egg-scripts 来支持线上环境的运行和停止。</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">egg-scripts start --port=7001 --daemon --title=egg-server-showcase</span><br></pre></td></tr></table></figure><ul><li><code>--port=7001</code> 端口号，默认会读取环境变量 <code>process.env.PORT</code>，如未传递将使用框架内置端口 <code>7001</code>。</li><li><code>--daemon</code> 是否允许在后台模式，无需 <code>nohup</code>。若使用 Docker 建议直接前台运行。</li><li><code>--env=prod</code> 框架运行环境，默认会读取环境变量 <code>process.env.EGG_SERVER_ENV</code>， 如未传递将使用框架内置环境 <code>prod</code>。</li><li><code>--workers=2</code> 框架 worker 线程数，默认会创建和 CPU 核数相当的 app worker 数，可以充分的利用 CPU 资源。</li><li><code>--title=egg-server-showcase</code> 用于方便 ps 进程时 grep 用，默认为 <code>egg-server-${appname}</code>。</li><li><code>--framework=yadan</code> 如果应用使用了可以配置 <code>package.json</code> 的 <code>egg.framework</code> 或指定该参数。</li><li><code>--ignore-stderr</code> 忽略启动期的报错。</li></ul><h4 id="9-1-1-启动配置项"><a href="#9-1-1-启动配置项" class="headerlink" title="9.1.1 启动配置项"></a>9.1.1 启动配置项</h4><p>你也可以在 <code>config.{env}.js</code> 中配置指定启动配置。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// config/config.default.js</span></span><br><span class="line"></span><br><span class="line">exports.cluster = &#123;</span><br><span class="line">  listen: &#123;</span><br><span class="line">    port: <span class="number">7001</span>,</span><br><span class="line">    hostname: <span class="string">'127.0.0.1'</span>,</span><br><span class="line">    <span class="comment">// path: '/var/run/egg.sock',</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>path</code>，<code>port</code>，<code>hostname</code> 均为 server.listen 的参数，<code>egg-scripts</code> 和 <code>egg.startCluster</code> 方法传入的 port 优先级高于此配置。<br>s<a name="bfda3fed"></a></p><h4 id="9-1-2-停止命令"><a href="#9-1-2-停止命令" class="headerlink" title="9.1.2 停止命令"></a><a href="https://eggjs.org/zh-cn/core/deployment.html#%E5%81%9C%E6%AD%A2%E5%91%BD%E4%BB%A4" target="_blank" rel="noopener"></a>9.1.2 停止命令</h4><p>该命令将杀死 master 进程，并通知 worker 和 agent 优雅退出。<br>支持以下参数：</p><ul><li><code>--title=egg-server</code> 用于杀死指定的 egg 应用，未传递则会终止所有的 Egg 应用。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;start&quot;: &quot;egg-scripts start --daemon --title=$&#123;进程名称&#125;&quot;,</span><br><span class="line">&quot;stop&quot;: &quot;egg-scripts stop --title=$&#123;进程名称&#125;&quot;</span><br></pre></td></tr></table></figure><ul><li>你也可以直接通过 </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -eo &quot;pid,command&quot; | grep -- &quot;--title=egg-server&quot;</span><br></pre></td></tr></table></figure><p> 来找到 master 进程，并 <code>kill</code> 掉，无需 <code>kill -9</code>。</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1553697448697-8c6f1393-68d3-4629-b2f3-63ebe66d11ce.png#align=left&display=inline&height=227&name=image.png&originHeight=454&originWidth=2192&size=89567&status=done&width=1096" alt="image.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;9-1-部署服务器&quot;&gt;&lt;a href=&quot;#9-1-部署服务器&quot; class=&quot;headerlink&quot; title=&quot;9.1 部署服务器&quot;&gt;&lt;/a&gt;9.1 部署服务器&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;首先当然是在你的服务器上部署好node服务,然后安装好。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;服务器需要预装 Node.js，框架支持的 Node 版本为 &amp;gt;= 8.0.0。&lt;br&gt;框架内置了 egg-cluster 来启动 Master 进程，Master 有足够的稳定性，不再需要使用 pm2 等进程守护模块。&lt;br&gt;同时，框架也提供了 egg-scripts 来支持线上环境的运行和停止。&lt;/p&gt;
    
    </summary>
    
      <category term="egg-企业级框架和应用入门" scheme="http://yoursite.com/categories/egg-%E4%BC%81%E4%B8%9A%E7%BA%A7%E6%A1%86%E6%9E%B6%E5%92%8C%E5%BA%94%E7%94%A8%E5%85%A5%E9%97%A8/"/>
    
    
      <category term="egg-企业级框架和应用入门" scheme="http://yoursite.com/tags/egg-%E4%BC%81%E4%B8%9A%E7%BA%A7%E6%A1%86%E6%9E%B6%E5%92%8C%E5%BA%94%E7%94%A8%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>8 定时任务&amp;amp;定点任务</title>
    <link href="http://yoursite.com/2019/06/01/egg-%E4%BC%81%E4%B8%9A%E7%BA%A7%E6%A1%86%E6%9E%B6%E5%92%8C%E5%BA%94%E7%94%A8%E5%85%A5%E9%97%A8/8%20%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1&amp;%E5%AE%9A%E7%82%B9%E4%BB%BB%E5%8A%A1/"/>
    <id>http://yoursite.com/2019/06/01/egg-企业级框架和应用入门/8 定时任务&amp;定点任务/</id>
    <published>2019-06-01T10:47:43.000Z</published>
    <updated>2019-06-15T08:40:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>egg提供了强大的定时任务系统。通过定时任务，可以系统修改服务的缓存数据，以便处理需要定时更新的数据。</p><blockquote><p>在app/schedule目录下新建一个js文件，每一个js文件就是一个定时任务</p></blockquote><a id="more"></a><h3 id="8-1-定时任务"><a href="#8-1-定时任务" class="headerlink" title="8.1 定时任务"></a>8.1 定时任务</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app/schedule</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  schedule: &#123;</span><br><span class="line">    interval: <span class="string">'1m'</span>, <span class="comment">// 1 分钟间隔</span></span><br><span class="line">    type: <span class="string">'all'</span>, <span class="comment">// 指定所有的 worker 都需要执行</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">async</span> task(ctx) &#123;</span><br><span class="line">    i++</span><br><span class="line">    <span class="built_in">console</span>.log(i)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 注释:</span></span><br><span class="line"><span class="comment">1ms -&gt; 1毫秒</span></span><br><span class="line"><span class="comment">1s -&gt; 1秒</span></span><br><span class="line"><span class="comment">1m -&gt; 1分钟</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="8-2-定点任务"><a href="#8-2-定点任务" class="headerlink" title="8.2 定点任务"></a>8.2 定点任务</h3><blockquote><p>定点任务（以每周一的5点30分0秒更新排行榜为例）</p></blockquote><p><br>1、使用cron参数设定时间，cron参数分为6个部分，*表示所有都满足</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">*    *    *    *    *    *</span><br><span class="line">┬    ┬    ┬    ┬    ┬    ┬</span><br><span class="line">│    │    │    │    │    |</span><br><span class="line">│    │    │    │    │    └ 星期 (0 - 7) (0或7都是星期日)</span><br><span class="line">│    │    │    │    └───── 月份 (1 - 12)</span><br><span class="line">│    │    │    └────────── 日期 (1 - 31)</span><br><span class="line">│    │    └─────────────── 小时 (0 - 23)</span><br><span class="line">│    └──────────────────── 分钟 (0 - 59)</span><br><span class="line">└───────────────────────── 秒 (0 - 59, optional)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app/schedule</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  schedule: &#123;</span><br><span class="line">    cron: <span class="string">'0 30 5 * * 1'</span>, <span class="comment">//每周一的5点30分0秒更新</span></span><br><span class="line">    type: <span class="string">'all'</span>, <span class="comment">// 指定所有的 worker 都需要执行</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">async</span> task(ctx) &#123;</span><br><span class="line">    i++</span><br><span class="line">    <span class="built_in">console</span>.log(i)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="8-3-只执行一次定时任务"><a href="#8-3-只执行一次定时任务" class="headerlink" title="8.3 只执行一次定时任务"></a>8.3 只执行一次定时任务</h3><blockquote><p>设置immediate参数为true时，该定时任务会在项目启动时，立即执行一次定时任务</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  schedule: &#123;</span><br><span class="line">    interval: <span class="string">'1m'</span>, <span class="comment">// 1 分钟间隔</span></span><br><span class="line">    type: <span class="string">'all'</span>, <span class="comment">// 指定所有的 worker 都需要执行</span></span><br><span class="line">    immediate: <span class="literal">true</span>, <span class="comment">//项目启动就执行一次定时任务</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">async</span> task(ctx) &#123;</span><br><span class="line">    i++</span><br><span class="line">    <span class="built_in">console</span>.log(i)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><a name="881aa06e"></a></p><h3 id="8-4-关闭任务"><a href="#8-4-关闭任务" class="headerlink" title="8.4 关闭任务"></a>8.4 关闭任务</h3><blockquote><p>配置disable参数为true时，该定时任务即关闭</p></blockquote><p><a name="f2eb6a31"></a></p><h3 id="8-5-指定定时任务执行环境env"><a href="#8-5-指定定时任务执行环境env" class="headerlink" title="8.5 指定定时任务执行环境env"></a>8.5 指定定时任务执行环境env</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">env: [<span class="string">"dev"</span>, <span class="string">"debug"</span>] <span class="comment">//该定时任务在开发环境和debug模式下才执行</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;egg提供了强大的定时任务系统。通过定时任务，可以系统修改服务的缓存数据，以便处理需要定时更新的数据。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在app/schedule目录下新建一个js文件，每一个js文件就是一个定时任务&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="egg-企业级框架和应用入门" scheme="http://yoursite.com/categories/egg-%E4%BC%81%E4%B8%9A%E7%BA%A7%E6%A1%86%E6%9E%B6%E5%92%8C%E5%BA%94%E7%94%A8%E5%85%A5%E9%97%A8/"/>
    
    
      <category term="egg-企业级框架和应用入门" scheme="http://yoursite.com/tags/egg-%E4%BC%81%E4%B8%9A%E7%BA%A7%E6%A1%86%E6%9E%B6%E5%92%8C%E5%BA%94%E7%94%A8%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>7 Session的使用</title>
    <link href="http://yoursite.com/2019/06/01/egg-%E4%BC%81%E4%B8%9A%E7%BA%A7%E6%A1%86%E6%9E%B6%E5%92%8C%E5%BA%94%E7%94%A8%E5%85%A5%E9%97%A8/7%20Session%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2019/06/01/egg-企业级框架和应用入门/7 Session的使用/</id>
    <published>2019-06-01T08:47:43.000Z</published>
    <updated>2019-06-15T06:26:51.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="7-1-Session-简单介绍"><a href="#7-1-Session-简单介绍" class="headerlink" title="7.1 Session 简单介绍"></a>7.1 Session 简单介绍</h3><p>session 是另一种记录客户状态的机制，不同的是 Cookie 保存在客户端浏览器中，而session 保存在服务器上。<br></p><p><a name="c48ea833"></a></p><h3 id="7-2-Session-的工作流程"><a href="#7-2-Session-的工作流程" class="headerlink" title="7.2 Session 的工作流程"></a>7.2 Session 的工作流程</h3><p>当浏览器访问服务器并发送第一次请求时，服务器端会创建一个 session 对象，生成一个类似于 key,value 的键值对， 然后将 key(cookie)返回到浏览器(客户)端，浏览器下次再访问时，携带 key(cookie)，找到对应的 session(value)。</p><p><a name="f6c72f68"></a></p><h3 id="7-3-Egg-js-中-session-的使用"><a href="#7-3-Egg-js-中-session-的使用" class="headerlink" title="7.3 Egg.js 中 session 的使用"></a>7.3 Egg.js 中 session 的使用</h3><p>egg.js 中 session 基于 egg-session 内置了对 session 的操作<br></p><p><a name="19d42806"></a></p><h4 id="7-3-1-设置"><a href="#7-3-1-设置" class="headerlink" title="7.3.1 设置"></a>7.3.1 设置</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.ctx.session.userinfo=&#123;</span><br><span class="line">name:<span class="string">'张三'</span>, </span><br><span class="line">  age:<span class="string">'20'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="04e49ebc"></a></p><h4 id="7-3-2-获取"><a href="#7-3-2-获取" class="headerlink" title="7.3.2 获取"></a>7.3.2 获取</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> userinfo=<span class="keyword">this</span>.ctx.session</span><br></pre></td></tr></table></figure><p><a name="23e6b3cc"></a></p><h4 id="7-3-3-Session-的默认设置"><a href="#7-3-3-Session-的默认设置" class="headerlink" title="7.3.3 Session 的默认设置"></a>7.3.3 Session 的默认设置</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">exports.session = &#123;</span><br><span class="line">  key: <span class="string">'EGG_SESS'</span>,</span><br><span class="line">  maxAge: <span class="number">24</span> * <span class="number">3600</span> * <span class="number">1000</span>, <span class="comment">// 1 day httpOnly: true,</span></span><br><span class="line">  encrypt: <span class="literal">true</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><a name="1bc23133"></a></p><h3 id="7-4-Session-在-config-default-js-中的配置"><a href="#7-4-Session-在-config-default-js-中的配置" class="headerlink" title="7.4 Session 在 config.default.js 中的配置"></a>7.4 Session 在 config.default.js 中的配置</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">config.session=&#123;</span><br><span class="line">  key:<span class="string">'SESSION_ID'</span>,</span><br><span class="line">  maxAge:<span class="number">864000</span>,</span><br><span class="line">  renew: <span class="literal">true</span> <span class="comment">//延长会话有效期</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="b5b6978f"></a></p><h3 id="7-5-cookie-和session-区别"><a href="#7-5-cookie-和session-区别" class="headerlink" title="7.5 cookie 和session 区别"></a>7.5 cookie 和session 区别</h3><ul><li>cookie 数据存放在客户的浏览器上，session 数据放在服务器上。</li><li>cookie 相比 session 没有 session 安全，别人可以分析存放在本地的 COOKIE 并进行 COOKIE欺骗。</li><li>session 会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能考虑到减轻服务器性能方面，应当使用 COOKIE。</li><li>单个 cookie 保存的数据不能超过 4K，很多浏览器都限制一个站点最多保存 20 个 cookie。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;7-1-Session-简单介绍&quot;&gt;&lt;a href=&quot;#7-1-Session-简单介绍&quot; class=&quot;headerlink&quot; title=&quot;7.1 Session 简单介绍&quot;&gt;&lt;/a&gt;7.1 Session 简单介绍&lt;/h3&gt;&lt;p&gt;session 是另一种记录
      
    
    </summary>
    
      <category term="egg-企业级框架和应用入门" scheme="http://yoursite.com/categories/egg-%E4%BC%81%E4%B8%9A%E7%BA%A7%E6%A1%86%E6%9E%B6%E5%92%8C%E5%BA%94%E7%94%A8%E5%85%A5%E9%97%A8/"/>
    
    
      <category term="egg-企业级框架和应用入门" scheme="http://yoursite.com/tags/egg-%E4%BC%81%E4%B8%9A%E7%BA%A7%E6%A1%86%E6%9E%B6%E5%92%8C%E5%BA%94%E7%94%A8%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>6 Cookie 的使用</title>
    <link href="http://yoursite.com/2019/06/01/egg-%E4%BC%81%E4%B8%9A%E7%BA%A7%E6%A1%86%E6%9E%B6%E5%92%8C%E5%BA%94%E7%94%A8%E5%85%A5%E9%97%A8/6%20Cookie%20%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2019/06/01/egg-企业级框架和应用入门/6 Cookie 的使用/</id>
    <published>2019-06-01T07:47:43.000Z</published>
    <updated>2019-06-15T06:26:51.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="6-Cookie-的使用"><a href="#6-Cookie-的使用" class="headerlink" title="6 Cookie 的使用"></a>6 Cookie 的使用</h1><p><a name="8e2bda97"></a></p><h3 id="6-1-Cookie-简介"><a href="#6-1-Cookie-简介" class="headerlink" title="6.1 Cookie 简介"></a>6.1 Cookie 简介</h3><ul><li>cookie 是存储于访问者的计算机中的变量。可以让我们用同一个浏览器访问同一个域名的时候共享数据。</li><li>HTTP 是无状态协议。简单地说，当你浏览了一个页面，然后转到同一个网站的另一个页面，服务器无法认识到这是同一个浏览器在访问同一个网站。每一次的访问，都是没有任何关系的。</li></ul><p><a name="e8c79d52"></a></p><h3 id="6-2-Cookie-的设置和获取"><a href="#6-2-Cookie-的设置和获取" class="headerlink" title="6.2 Cookie 的设置和获取"></a>6.2 Cookie 的设置和获取</h3><p><a name="3a998b31"></a></p><h4 id="6-2-1-Cookie-设置语法"><a href="#6-2-1-Cookie-设置语法" class="headerlink" title="6.2.1 Cookie 设置语法"></a>6.2.1 Cookie 设置语法</h4><blockquote><p>ctx.cookies.set(key, value, options)</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.ctx.cookies.set(<span class="string">'name'</span>,<span class="string">'zhangsan'</span>);</span><br></pre></td></tr></table></figure><p><a name="4fe3e7c9"></a></p><h4 id="6-2-2-Cookie-获取语法"><a href="#6-2-2-Cookie-获取语法" class="headerlink" title="6.2.2 Cookie 获取语法"></a>6.2.2 Cookie 获取语法</h4><blockquote><p>ctx.cookies.get(key, options)</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.ctx.cookies.get(<span class="string">'name'</span>)</span><br></pre></td></tr></table></figure><p><a name="fc196a74"></a></p><h4 id="6-2-3-清除-Cookie"><a href="#6-2-3-清除-Cookie" class="headerlink" title="6.2.3 清除 Cookie"></a>6.2.3 清除 Cookie</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.ctx.cookies.set(<span class="string">'name'</span>,<span class="literal">null</span>);</span><br></pre></td></tr></table></figure><p>或者设置 maxAge 过期时间为 0</p><p><a name="1f376170"></a></p><h3 id="6-3-Cookie-参数-options"><a href="#6-3-Cookie-参数-options" class="headerlink" title="6.3 Cookie 参数 options"></a>6.3 Cookie 参数 options</h3><blockquote><p> <a href="https://eggjs.org/en/core/cookie-and-session.html#container" target="_blank" rel="noopener">https://eggjs.org/en/core/cookie-and-session.html#container</a></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ctx.cookies.set(key, value, &#123;</span><br><span class="line">  maxAge:<span class="number">24</span> * <span class="number">3600</span> * <span class="number">1000</span>,</span><br><span class="line">  httpOnly: <span class="literal">true</span>, <span class="comment">// 默认情况下是正确的</span></span><br><span class="line">  encrypt: <span class="literal">true</span>, <span class="comment">// cookie在网络传输期间加密</span></span><br><span class="line">  ctx.cookies.get(<span class="string">'frontend-cookie'</span>, &#123;</span><br><span class="line">  encrypt: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><a name="d41d8cd9"></a></p><p>###<br><a name="95f56a9e"></a></p><h3 id="6-4-设置中文-Cookie"><a href="#6-4-设置中文-Cookie" class="headerlink" title="6.4 设置中文 Cookie"></a>6.4 设置中文 Cookie</h3><p><a name="04aae555"></a></p><h4 id="6-4-1-第一种解决方案"><a href="#6-4-1-第一种解决方案" class="headerlink" title="6.4.1 第一种解决方案"></a>6.4.1 第一种解决方案</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> Buffer(<span class="string">'hello, world!'</span>).toString(<span class="string">'base64'</span>));</span><br><span class="line"><span class="comment">// 转换成 base64字符串：aGVsbG8sIHdvcmxkIQ==</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> Buffer(<span class="string">'aGVsbG8sIHdvcmxkIQ=='</span>, <span class="string">'base64'</span>).toString()); <span class="comment">// 还原 base64字符串：hello, world!</span></span><br></pre></td></tr></table></figure><p><a name="06fdf631"></a></p><h4 id="6-4-2-第二种解决方案"><a href="#6-4-2-第二种解决方案" class="headerlink" title="6.4.2 第二种解决方案"></a>6.4.2 第二种解决方案</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ctx.cookies.set(key, value, &#123;</span><br><span class="line">maxAge:<span class="number">24</span> * <span class="number">3600</span> * <span class="number">1000</span>,</span><br><span class="line">httpOnly: <span class="literal">true</span>, <span class="comment">// 默认情况下是正确的</span></span><br><span class="line">encrypt: <span class="literal">true</span>, <span class="comment">// cookie在网络传输期间进行加密</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;6-Cookie-的使用&quot;&gt;&lt;a href=&quot;#6-Cookie-的使用&quot; class=&quot;headerlink&quot; title=&quot;6 Cookie 的使用&quot;&gt;&lt;/a&gt;6 Cookie 的使用&lt;/h1&gt;&lt;p&gt;&lt;a name=&quot;8e2bda97&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h
      
    
    </summary>
    
      <category term="egg-企业级框架和应用入门" scheme="http://yoursite.com/categories/egg-%E4%BC%81%E4%B8%9A%E7%BA%A7%E6%A1%86%E6%9E%B6%E5%92%8C%E5%BA%94%E7%94%A8%E5%85%A5%E9%97%A8/"/>
    
    
      <category term="egg-企业级框架和应用入门" scheme="http://yoursite.com/tags/egg-%E4%BC%81%E4%B8%9A%E7%BA%A7%E6%A1%86%E6%9E%B6%E5%92%8C%E5%BA%94%E7%94%A8%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>5 mysql数据库</title>
    <link href="http://yoursite.com/2019/06/01/egg-%E4%BC%81%E4%B8%9A%E7%BA%A7%E6%A1%86%E6%9E%B6%E5%92%8C%E5%BA%94%E7%94%A8%E5%85%A5%E9%97%A8/5%20mysql%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>http://yoursite.com/2019/06/01/egg-企业级框架和应用入门/5 mysql数据库/</id>
    <published>2019-06-01T06:47:43.000Z</published>
    <updated>2019-06-15T06:26:51.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="5-mysql数据库"><a href="#5-mysql数据库" class="headerlink" title="5 mysql数据库"></a>5 mysql数据库</h1><p>框架提供了 egg-mysql 插件来访问 MySQL 数据库。这个插件既可以访问普通的 MySQL 数据库，也可以访问基于 MySQL 协议的在线数据库服务。<br></p><p><a name="41f4681f"></a></p><h3 id="5-1-安装与配置"><a href="#5-1-安装与配置" class="headerlink" title="5.1 安装与配置"></a><a href="https://eggjs.org/zh-cn/tutorials/mysql.html#%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE" target="_blank" rel="noopener"></a>5.1 安装与配置</h3><p>安装对应的插件 egg-mysql :</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i --save egg-mysql</span><br></pre></td></tr></table></figure><p>开启插件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// config/plugin.js</span></span><br><span class="line">exports.mysql = &#123;</span><br><span class="line">  enable: <span class="literal">true</span>,</span><br><span class="line">  package: <span class="string">'egg-mysql'</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在 <code>config/config.${env}.js</code> 配置各个环境的数据库连接信息。</p><p><a name="b76e9b5d"></a></p><h4 id="5-1-1-单数据源"><a href="#5-1-1-单数据源" class="headerlink" title="5.1.1 单数据源"></a><a href="https://eggjs.org/zh-cn/tutorials/mysql.html#%E5%8D%95%E6%95%B0%E6%8D%AE%E6%BA%90" target="_blank" rel="noopener"></a>5.1.1 单数据源</h4><p>如果我们的应用只需要访问一个 MySQL 数据库实例，可以如下配置：<br>使用方式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// config/config.$&#123;env&#125;.js</span></span><br><span class="line">exports.mysql = &#123;</span><br><span class="line">  <span class="comment">// 单数据库信息配置</span></span><br><span class="line">  client: &#123;</span><br><span class="line">    <span class="comment">// host</span></span><br><span class="line">    host: <span class="string">'mysql.com'</span>,</span><br><span class="line">    <span class="comment">// 端口号</span></span><br><span class="line">    port: <span class="string">'3306'</span>,</span><br><span class="line">    <span class="comment">// 用户名</span></span><br><span class="line">    user: <span class="string">'test_user'</span>,</span><br><span class="line">    <span class="comment">// 密码</span></span><br><span class="line">    password: <span class="string">'test_password'</span>,</span><br><span class="line">    <span class="comment">// 数据库名</span></span><br><span class="line">    database: <span class="string">'test'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 是否加载到 app 上，默认开启</span></span><br><span class="line">  app: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// 是否加载到 agent 上，默认关闭</span></span><br><span class="line">  agent: <span class="literal">false</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">await</span> app.mysql.query(sql, values); <span class="comment">// 单实例可以直接通过 app.mysql 访问</span></span><br></pre></td></tr></table></figure><p><a name="f0cdea86"></a></p><h4 id="5-1-2-多数据源"><a href="#5-1-2-多数据源" class="headerlink" title="5.1.2 多数据源"></a><a href="https://eggjs.org/zh-cn/tutorials/mysql.html#%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90" target="_blank" rel="noopener"></a>5.1.2 多数据源</h4><p>如果我们的应用需要访问多个 MySQL 数据源，可以按照如下配置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">exports.mysql = &#123;</span><br><span class="line">  clients: &#123;</span><br><span class="line">    <span class="comment">// clientId, 获取client实例，需要通过 app.mysql.get('clientId') 获取</span></span><br><span class="line">    db1: &#123;</span><br><span class="line">      <span class="comment">// host</span></span><br><span class="line">      host: <span class="string">'mysql.com'</span>,</span><br><span class="line">      <span class="comment">// 端口号</span></span><br><span class="line">      port: <span class="string">'3306'</span>,</span><br><span class="line">      <span class="comment">// 用户名</span></span><br><span class="line">      user: <span class="string">'test_user'</span>,</span><br><span class="line">      <span class="comment">// 密码</span></span><br><span class="line">      password: <span class="string">'test_password'</span>,</span><br><span class="line">      <span class="comment">// 数据库名</span></span><br><span class="line">      database: <span class="string">'test'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    db2: &#123;</span><br><span class="line">      <span class="comment">// host</span></span><br><span class="line">      host: <span class="string">'mysql2.com'</span>,</span><br><span class="line">      <span class="comment">// 端口号</span></span><br><span class="line">      port: <span class="string">'3307'</span>,</span><br><span class="line">      <span class="comment">// 用户名</span></span><br><span class="line">      user: <span class="string">'test_user'</span>,</span><br><span class="line">      <span class="comment">// 密码</span></span><br><span class="line">      password: <span class="string">'test_password'</span>,</span><br><span class="line">      <span class="comment">// 数据库名</span></span><br><span class="line">      database: <span class="string">'test'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 所有数据库配置的默认值</span></span><br><span class="line">  <span class="keyword">default</span>: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 是否加载到 app 上，默认开启</span></span><br><span class="line">  app: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// 是否加载到 agent 上，默认关闭</span></span><br><span class="line">  agent: <span class="literal">false</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><a name="0c420b74"></a></p><h3 id="5-2-封装增删改查"><a href="#5-2-封装增删改查" class="headerlink" title="5.2 封装增删改查"></a>5.2 封装增删改查</h3><p><a name="a70fb78d"></a></p><h4 id="5-2-1、插入，向users表内插入一条数据"><a href="#5-2-1、插入，向users表内插入一条数据" class="headerlink" title="5.2.1、插入，向users表内插入一条数据"></a>5.2.1、插入，向users表内插入一条数据</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> result = <span class="keyword">await</span> <span class="keyword">this</span>.app.mysql.insert(<span class="string">'users'</span>, &#123;</span><br><span class="line">    name: <span class="string">'wjw'</span>,</span><br><span class="line">    age: <span class="number">18</span></span><br><span class="line">  &#125;)</span><br><span class="line"><span class="comment">// 判断：result.affectedRows === 1</span></span><br></pre></td></tr></table></figure><p><a name="8aec9d6f"></a></p><h4 id="5-2-2、查询，查询users表name-Jack的数据"><a href="#5-2-2、查询，查询users表name-Jack的数据" class="headerlink" title="5.2.2、查询，查询users表name=Jack的数据"></a>5.2.2、查询，查询users表name=Jack的数据</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> result = <span class="keyword">await</span> <span class="keyword">this</span>.app.mysql.select(<span class="string">'users'</span>, &#123;</span><br><span class="line">    columns: [<span class="string">'id'</span>, <span class="string">'name'</span>], <span class="comment">//查询字段，全部查询则不写，相当于查询*</span></span><br><span class="line">    where: &#123;</span><br><span class="line">        name: <span class="string">'wjw'</span></span><br><span class="line">    &#125;, <span class="comment">//查询条件</span></span><br><span class="line">    orders: [</span><br><span class="line">        [<span class="string">'id'</span>, <span class="string">'desc'</span>] <span class="comment">//降序desc，升序asc</span></span><br><span class="line">    ],</span><br><span class="line">    limit: <span class="number">10</span>, <span class="comment">//查询条数</span></span><br><span class="line">    offset: <span class="number">0</span> <span class="comment">//数据偏移量（分页查询使用）</span></span><br><span class="line">  &#125;)</span><br><span class="line"><span class="comment">//判断：result.length &gt; 0</span></span><br></pre></td></tr></table></figure><p><a name="b83f1814"></a></p><h4 id="5-2-3、修改，修改users表id-1的数据age为20"><a href="#5-2-3、修改，修改users表id-1的数据age为20" class="headerlink" title="5.2.3、修改，修改users表id=1的数据age为20"></a>5.2.3、修改，修改users表id=1的数据age为20</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> result = <span class="keyword">await</span> <span class="keyword">this</span>.app.mysql.update(<span class="string">'users'</span>, &#123;</span><br><span class="line">      age: <span class="number">20</span> <span class="comment">//需要修改的数据</span></span><br><span class="line">  &#125;, &#123;</span><br><span class="line">      where: &#123;</span><br><span class="line">        id: <span class="number">1</span></span><br><span class="line">      &#125; <span class="comment">//修改查询条件</span></span><br><span class="line">  &#125;);</span><br><span class="line"><span class="comment">//判断：result.affectedRows === 1</span></span><br></pre></td></tr></table></figure><p><a name="9a47efed"></a></p><h4 id="5-2-4、删除，删除users表name-wjw的数据"><a href="#5-2-4、删除，删除users表name-wjw的数据" class="headerlink" title="5.2.4、删除，删除users表name=wjw的数据"></a>5.2.4、删除，删除users表name=wjw的数据</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> result = <span class="keyword">await</span> <span class="keyword">this</span>.app.mysql.delete(<span class="string">'users'</span>, &#123;</span><br><span class="line">    name: <span class="string">'wjw'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;5-mysql数据库&quot;&gt;&lt;a href=&quot;#5-mysql数据库&quot; class=&quot;headerlink&quot; title=&quot;5 mysql数据库&quot;&gt;&lt;/a&gt;5 mysql数据库&lt;/h1&gt;&lt;p&gt;框架提供了 egg-mysql 插件来访问 MySQL 数据库。这个插件既可
      
    
    </summary>
    
      <category term="egg-企业级框架和应用入门" scheme="http://yoursite.com/categories/egg-%E4%BC%81%E4%B8%9A%E7%BA%A7%E6%A1%86%E6%9E%B6%E5%92%8C%E5%BA%94%E7%94%A8%E5%85%A5%E9%97%A8/"/>
    
    
      <category term="egg-企业级框架和应用入门" scheme="http://yoursite.com/tags/egg-%E4%BC%81%E4%B8%9A%E7%BA%A7%E6%A1%86%E6%9E%B6%E5%92%8C%E5%BA%94%E7%94%A8%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>4 get、post请求</title>
    <link href="http://yoursite.com/2019/06/01/egg-%E4%BC%81%E4%B8%9A%E7%BA%A7%E6%A1%86%E6%9E%B6%E5%92%8C%E5%BA%94%E7%94%A8%E5%85%A5%E9%97%A8/4%20get%E3%80%81post%E8%AF%B7%E6%B1%82/"/>
    <id>http://yoursite.com/2019/06/01/egg-企业级框架和应用入门/4 get、post请求/</id>
    <published>2019-06-01T05:47:43.000Z</published>
    <updated>2019-06-15T06:26:51.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="4-1-get-请求"><a href="#4-1-get-请求" class="headerlink" title="4.1 get 请求"></a>4.1 get 请求</h3><h4 id="4-1-1-query"><a href="#4-1-1-query" class="headerlink" title="4.1.1 query"></a>4.1.1 query</h4><p>在 URL 中 <code>?</code>后面的部分是一个 Query String，这一部分经常用于 GET 类型的请求中传递参数。例如 <code>GET /search?name=egg&amp;age=26</code>中 <code>name=egg&amp;age=26</code> 就是用户传递过来的参数。我们可以通过 <code>context.query</code>(为一个对象)拿到解析过后的这个参数体</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">app</span> =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomeController</span> <span class="keyword">extends</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line">  <span class="keyword">async</span> getQuery() &#123;</span><br><span class="line">      <span class="keyword">const</span> queryObj = <span class="keyword">this</span>.ctx.query;</span><br><span class="line">      <span class="built_in">console</span>.log(queryObj.age);</span><br><span class="line">      <span class="built_in">console</span>.log(queryObj);</span><br><span class="line">      <span class="comment">//打印结果：&#123; name: 'egg', age: '26' &#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> SearchController;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><br>当 Query String 中的 key 重复时，<code>context.query</code>只取 key 第一次出现时的值，后面再出现的都会被忽略。<code>GET /posts?category=egg&amp;category=koa</code> 通过 <code>context.query</code>拿到的值是 <code>{ category: &#39;egg&#39; }</code>。<a name="c1fd7d6c"></a></p><h4 id="4-1-2-queries"><a href="#4-1-2-queries" class="headerlink" title="4.1.2   queries"></a>4.1.2   queries</h4><p>有时候我们的系统会设计成让用户传递相同的 key，例如 <code>GET /posts?category=egg&amp;id=1&amp;id=2&amp;id=3</code>。针对此类情况，框架提供了 <code>context.queries</code> 对象，这个对象也解析了 Query String，但是它不会丢弃任何一个重复的数据，而是将他们都放到一个<code>数组</code>中：<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// GET /posts?category=egg&amp;id=1&amp;id=2&amp;id=3</span></span><br><span class="line"><span class="keyword">const</span> Controller = <span class="built_in">require</span>(<span class="string">'egg'</span>).Controller;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomeController</span> <span class="keyword">extends</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line">  <span class="keyword">async</span> getQueries() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.ctx.queries);</span><br><span class="line">    <span class="comment">//result:</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//   category: [ 'egg' ],</span></span><br><span class="line">    <span class="comment">//   id: [ '1', '2', '3' ],</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>context.queries</code>上所有的 key 如果有值，也一定会是<code>数组</code>类型。</p><p><a name="0031db38"></a></p><h3 id="4-2-post-请求"><a href="#4-2-post-请求" class="headerlink" title="4.2 post 请求"></a>4.2 post 请求</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取参数方法 post 请求</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">app</span> =&gt;</span> &#123;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomeController</span> <span class="keyword">extends</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line">  <span class="keyword">async</span> postObj() &#123;</span><br><span class="line">      <span class="keyword">const</span> queryObj = ctx.request.body;</span><br><span class="line">      ctx.body = queryObj;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> SearchController;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><blockquote><p>但是我们请求有时是get,有时是post,有时本来应该是post的请求,但是为了测试方便,还是做成get和post请求都支持的请求,于是一个能同时获取get和post请求参数的中间件就很有必要了.</p></blockquote><p><a name="8c221a17"></a></p><h3 id="4-3-编写中间层解决get、post请求"><a href="#4-3-编写中间层解决get、post请求" class="headerlink" title="4.3 编写中间层解决get、post请求"></a>4.3 编写中间层解决get、post请求</h3><p><a name="2b154e51"></a></p><h4 id="4-3-1-在app目录下新建middleware文件夹"><a href="#4-3-1-在app目录下新建middleware文件夹" class="headerlink" title="4.3.1 在app目录下新建middleware文件夹"></a>4.3.1 在app目录下新建middleware文件夹</h4><p><a name="71a0e970"></a></p><h4 id="4-3-2-在middleware里面新建params-js-内容如下"><a href="#4-3-2-在middleware里面新建params-js-内容如下" class="headerlink" title="4.3.2 在middleware里面新建params.js,内容如下"></a>4.3.2 在middleware里面新建params.js,内容如下</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取请求参数中间件</span></span><br><span class="line"><span class="comment"> * 可以使用ctx.params获取get或post请求参数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">options</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">params</span>(<span class="params">ctx, next</span>) </span>&#123;</span><br><span class="line">    ctx.params = &#123;</span><br><span class="line">      ...ctx.query,</span><br><span class="line">      ...ctx.request.body</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">await</span> next();</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>本质上就是把get请求的参数和post请求的参数都放到params这个对象里,所以,不管是get还是post都能获取到请求参数</p><p><a name="c127c48b"></a></p><h4 id="4-3-3-在-config-config-default-js里注入中间件"><a href="#4-3-3-在-config-config-default-js里注入中间件" class="headerlink" title="4.3.3 在/config/config.default.js里注入中间件"></a>4.3.3 在/config/config.default.js里注入中间件</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">appInfo</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> config = exports = &#123;&#125;;</span><br><span class="line"><span class="comment">// 注入中间件</span></span><br><span class="line">  config.middleware = [</span><br><span class="line">    <span class="string">'params'</span>,</span><br><span class="line">  ];</span><br><span class="line">  <span class="keyword">return</span> config;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><a name="cf8dc011"></a></p><h4 id="4-3-4-使用文章获取"><a href="#4-3-4-使用文章获取" class="headerlink" title="4.3.4 使用文章获取"></a>4.3.4 使用文章获取</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加文章接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="keyword">const</span> Service = <span class="built_in">require</span>(<span class="string">'egg'</span>).Service;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArticleService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line">  <span class="keyword">async</span> add() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; ctx &#125; = <span class="keyword">this</span>;</span><br><span class="line">    <span class="comment">// 获取请求参数</span></span><br><span class="line">    <span class="keyword">const</span> &#123;</span><br><span class="line">      userId,</span><br><span class="line">      title,</span><br><span class="line">      content,</span><br><span class="line">    &#125; = ctx.params;</span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">await</span> ctx.model.Article.create(&#123;</span><br><span class="line">      userId,</span><br><span class="line">      title,</span><br><span class="line">      content,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = ArticleService;</span><br></pre></td></tr></table></figure><p><a name="1a577bcd"></a></p><h3 id="4-3-允许post请求跨域"><a href="#4-3-允许post请求跨域" class="headerlink" title="4.3 允许post请求跨域"></a>4.3 允许post请求跨域</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// config/plugin.js</span></span><br><span class="line">exports.cors = &#123;</span><br><span class="line">  enable: <span class="literal">true</span>,</span><br><span class="line">  package: <span class="string">'egg-cors'</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// config/config.default.js</span></span><br><span class="line">config.security = &#123;</span><br><span class="line">  csrf: &#123;</span><br><span class="line">    enable: <span class="literal">false</span>,</span><br><span class="line">    ignoreJSON: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  domainWhiteList: [ <span class="string">'http://www.baidu.com'</span> ], <span class="comment">// 配置白名单</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">config.cors = &#123;</span><br><span class="line">  <span class="comment">// origin: '*',//允许所有跨域访问，注释掉则允许上面 白名单 访问</span></span><br><span class="line">  allowMethods: <span class="string">'GET,HEAD,PUT,POST,DELETE,PATCH'</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>*一般性最好使用白名单，不要使用全部允许跨域，不安全</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;4-1-get-请求&quot;&gt;&lt;a href=&quot;#4-1-get-请求&quot; class=&quot;headerlink&quot; title=&quot;4.1 get 请求&quot;&gt;&lt;/a&gt;4.1 get 请求&lt;/h3&gt;&lt;h4 id=&quot;4-1-1-query&quot;&gt;&lt;a href=&quot;#4-1-1-quer
      
    
    </summary>
    
      <category term="egg-企业级框架和应用入门" scheme="http://yoursite.com/categories/egg-%E4%BC%81%E4%B8%9A%E7%BA%A7%E6%A1%86%E6%9E%B6%E5%92%8C%E5%BA%94%E7%94%A8%E5%85%A5%E9%97%A8/"/>
    
    
      <category term="egg-企业级框架和应用入门" scheme="http://yoursite.com/tags/egg-%E4%BC%81%E4%B8%9A%E7%BA%A7%E6%A1%86%E6%9E%B6%E5%92%8C%E5%BA%94%E7%94%A8%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>3 访问路由</title>
    <link href="http://yoursite.com/2019/06/01/egg-%E4%BC%81%E4%B8%9A%E7%BA%A7%E6%A1%86%E6%9E%B6%E5%92%8C%E5%BA%94%E7%94%A8%E5%85%A5%E9%97%A8/3%20%E8%AE%BF%E9%97%AE%E8%B7%AF%E7%94%B1/"/>
    <id>http://yoursite.com/2019/06/01/egg-企业级框架和应用入门/3 访问路由/</id>
    <published>2019-06-01T03:47:43.000Z</published>
    <updated>2019-06-15T06:26:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>egg在设计完全符合比较好的mvc的设计模式。<br></p><p><a name="aca7ebb1"></a></p><h3 id="3-1-那么什么是mvc呢"><a href="#3-1-那么什么是mvc呢" class="headerlink" title="3.1 那么什么是mvc呢?"></a>3.1 那么什么是mvc呢?</h3><blockquote><p>全名是Model View Controller，是模型(model)－视图(view)－控制器(controller)的缩写，一种软件设计典范。<br>在egg中视图 (view)、控制器（controller） 和数据模型 Model（Service） 和配置文件（config）</p></blockquote><p><a name="d41d8cd9"></a></p><p>###<br><a name="6c891e5f"></a></p><h3 id="3-2-控制器（controller）"><a href="#3-2-控制器（controller）" class="headerlink" title="3.2 控制器（controller）"></a>3.2 控制器（controller）<br></h3><ul><li><code>app/controller</code> 目录下面实现 Controller</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app/controller/home.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Controller = <span class="built_in">require</span>(<span class="string">'egg'</span>).Controller;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomeController</span> <span class="keyword">extends</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line">  <span class="keyword">async</span> index() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; ctx &#125; = <span class="keyword">this</span>;</span><br><span class="line">    ctx.body = <span class="string">'hi, world'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = HomeController;</span><br></pre></td></tr></table></figure><blockquote><p>输入 npm run dev<br>查看 <a href="http://127.0.0.1:7001/" target="_blank" rel="noopener">http://127.0.0.1:7001</a><br>输出  hi, world</p></blockquote><blockquote><p>我认为控制器就是一个接口，他管理输入和输出</p></blockquote><p>*同样你可以在app/controller 目录下 写很多个这样个js的，来代表接口</p><p><a name="19358b5c"></a></p><h3 id="3-3-路由（Router）"><a href="#3-3-路由（Router）" class="headerlink" title="3.3 路由（Router）"></a>3.3 路由（Router）</h3><p>主要用来描述请求 URL 和具体承担执行动作的 Controller 的对应关系， 框架约定了 <code>app/router.js</code> 文件用于统一所有路由规则。</p><blockquote><p>现在很多单页面，都是存在相对于的路由，你写个js，同样就要写一个路由</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app/controller/user.js</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserController</span> <span class="keyword">extends</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line">  <span class="keyword">async</span> info() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; ctx &#125; = <span class="keyword">this</span>;</span><br><span class="line">    ctx.body = &#123;</span><br><span class="line">      name: <span class="string">`hello <span class="subst">$&#123;ctx.params.id&#125;</span>`</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app/router.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">app</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; router, controller &#125; = app;</span><br><span class="line">  router.get(<span class="string">'/user/:id'</span>, controller.user.info);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><a name="5c5c68e9"></a></p><h3 id="3-4-数据模型-Model（Service）"><a href="#3-4-数据模型-Model（Service）" class="headerlink" title="3.4 数据模型 Model（Service）"></a>3.4 数据模型 Model（Service）</h3><p>简单来说，Service 就是在复杂业务场景下用于做业务逻辑封装的一个抽象层，提供这个抽象有以下几个好处：</p><ul><li>保持 Controller 中的逻辑更加简洁。</li><li>保持业务逻辑的独立性，抽象出来的 Service 可以被多个 Controller 重复调用。</li><li>将逻辑和展现分离，更容易编写测试用例。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app/service/user.js</span></span><br><span class="line"><span class="keyword">const</span> Service = <span class="built_in">require</span>(<span class="string">'egg'</span>).Service;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line">  <span class="keyword">async</span> addName(name) &#123;</span><br><span class="line">    <span class="keyword">const</span> user = <span class="string">`你好,<span class="subst">$&#123;name&#125;</span>`</span>;</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = UserService;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app/controller/user.js</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserController</span> <span class="keyword">extends</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line">  <span class="keyword">async</span> info() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; ctx &#125; = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">const</span> userInfo = <span class="keyword">await</span> ctx.service.user.addName(<span class="string">'wjw'</span>);</span><br><span class="line">    ctx.body = userInfo;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="bdeae77a"></a></p><h3 id="3-5-egg中视图-view"><a href="#3-5-egg中视图-view" class="headerlink" title="3.5 egg中视图 (view)"></a>3.5 egg中视图 (view)</h3><blockquote><p>egg中的模板渲染，但是我认为前端后端分离的设计，更加有利于作为服务型架构设计，所以这边不描述view的构造</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;egg在设计完全符合比较好的mvc的设计模式。&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;a name=&quot;aca7ebb1&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;3-1-那么什么是mvc呢&quot;&gt;&lt;a href=&quot;#3-1-那么什么是mvc呢&quot; class=&quot;headerlink&quot; title=&quot;
      
    
    </summary>
    
      <category term="egg-企业级框架和应用入门" scheme="http://yoursite.com/categories/egg-%E4%BC%81%E4%B8%9A%E7%BA%A7%E6%A1%86%E6%9E%B6%E5%92%8C%E5%BA%94%E7%94%A8%E5%85%A5%E9%97%A8/"/>
    
    
      <category term="egg-企业级框架和应用入门" scheme="http://yoursite.com/tags/egg-%E4%BC%81%E4%B8%9A%E7%BA%A7%E6%A1%86%E6%9E%B6%E5%92%8C%E5%BA%94%E7%94%A8%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>2 目录结构介绍</title>
    <link href="http://yoursite.com/2019/06/01/egg-%E4%BC%81%E4%B8%9A%E7%BA%A7%E6%A1%86%E6%9E%B6%E5%92%8C%E5%BA%94%E7%94%A8%E5%85%A5%E9%97%A8/2%20%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84%E4%BB%8B%E7%BB%8D/"/>
    <id>http://yoursite.com/2019/06/01/egg-企业级框架和应用入门/2 目录结构介绍/</id>
    <published>2019-06-01T02:47:43.000Z</published>
    <updated>2019-06-15T06:26:51.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="2-1-目录结构"><a href="#2-1-目录结构" class="headerlink" title="2.1 目录结构"></a>2.1 目录结构</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">egg-project</span><br><span class="line">├── package.json</span><br><span class="line">├── app.js (可选)</span><br><span class="line">├── agent.js (可选)</span><br><span class="line">├── app(项目开发目录)</span><br><span class="line">|   ├── router.js (用于配置 URL 路由规则)</span><br><span class="line">│   ├── controller (用于解析用户的输入，处理后返回相应的结果)</span><br><span class="line">│   |   └── home.js</span><br><span class="line">│   ├── service (用于编写业务逻辑层)</span><br><span class="line">│   |   └── user.js</span><br><span class="line">│   ├── middleware (用于编写中间件)</span><br><span class="line">│   |   └── response_time.js</span><br><span class="line">│   ├── schedule (可选)</span><br><span class="line">│   |   └── my_task.js</span><br><span class="line">│   ├── public (用于放置静态资源)</span><br><span class="line">│   |   └── reset.css</span><br><span class="line">│   ├── view (可选)</span><br><span class="line">│   |   └── home.tpl</span><br><span class="line">│   └── extend (用于框架的扩展)</span><br><span class="line">│       ├── helper.js (可选)</span><br><span class="line">│       ├── request.js (可选)</span><br><span class="line">│       ├── response.js (可选)</span><br><span class="line">│       ├── context.js (可选)</span><br><span class="line">│       ├── application.js (可选)</span><br><span class="line">│       └── agent.js (可选)</span><br><span class="line">├── config (用于编写配置文件)</span><br><span class="line">|   ├── plugin.js(用于配置需要加载的插件)</span><br><span class="line">|   ├── config.default.js</span><br><span class="line">│   ├── config.prod.js</span><br><span class="line">|   ├── config.test.js (可选)</span><br><span class="line">|   ├── config.local.js (可选)</span><br><span class="line">|   └── config.unittest.js (可选)</span><br><span class="line">└── test (用于单元测试)</span><br><span class="line">    ├── middleware</span><br><span class="line">    |   └── response_time.test.js</span><br><span class="line">    └── controller</span><br><span class="line">        └── home.test.js</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1553573209647-1a9949b3-24dd-4c13-832b-4289810a2355.png#align=left&display=inline&height=380&name=image.png&originHeight=759&originWidth=900&size=141205&status=done&width=450" alt="image.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;2-1-目录结构&quot;&gt;&lt;a href=&quot;#2-1-目录结构&quot; class=&quot;headerlink&quot; title=&quot;2.1 目录结构&quot;&gt;&lt;/a&gt;2.1 目录结构&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl
      
    
    </summary>
    
      <category term="egg-企业级框架和应用入门" scheme="http://yoursite.com/categories/egg-%E4%BC%81%E4%B8%9A%E7%BA%A7%E6%A1%86%E6%9E%B6%E5%92%8C%E5%BA%94%E7%94%A8%E5%85%A5%E9%97%A8/"/>
    
    
      <category term="egg-企业级框架和应用入门" scheme="http://yoursite.com/tags/egg-%E4%BC%81%E4%B8%9A%E7%BA%A7%E6%A1%86%E6%9E%B6%E5%92%8C%E5%BA%94%E7%94%A8%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>1 环境搭建、创建、运行</title>
    <link href="http://yoursite.com/2019/06/01/egg-%E4%BC%81%E4%B8%9A%E7%BA%A7%E6%A1%86%E6%9E%B6%E5%92%8C%E5%BA%94%E7%94%A8%E5%85%A5%E9%97%A8/1%20%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E3%80%81%E5%88%9B%E5%BB%BA%E3%80%81%E8%BF%90%E8%A1%8C/"/>
    <id>http://yoursite.com/2019/06/01/egg-企业级框架和应用入门/1 环境搭建、创建、运行/</id>
    <published>2019-06-01T01:47:43.000Z</published>
    <updated>2019-06-15T06:26:51.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-1-介绍"><a href="#1-1-介绍" class="headerlink" title="1.1 介绍"></a>1.1 介绍</h3><p>egg.js是阿里旗下基于node.js和koa是一个node企业级应用开发框架，可以帮助开发团队，和开发人员减少成本。<br>基于koa2、es6、es7使得node具有更有规范的开发模式，更低的学习成本、更优雅的代码、更少的维护成本。<br><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1553564733278-f808c9af-138e-49e8-8b5c-62a6ff798edc.png#align=left&display=inline&height=318&name=image.png&originHeight=635&originWidth=1142&size=211739&status=done&width=571" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1553564716616-6dc83606-ce82-4596-b4b9-696736897888.png#align=left&display=inline&height=244&name=image.png&originHeight=488&originWidth=1009&size=119926&status=done&width=505" alt="image.png"><br><br><br></p><p><a name="717aefd0"></a></p><h3 id="1-2-环境搭建"><a href="#1-2-环境搭建" class="headerlink" title="1.2 环境搭建"></a>1.2 环境搭建</h3><p>1、要求nodejs版本必须大于8.0并且要用LTS 版本<br>2、创建egg的环境   npm i egg-init -g  / cnpm i egg-init -g        (只需要安装一次)<br>3、创建项目<br>    cd 到目录里面   （注意目录不要用中文  不要有空格）</p><p><a name="38ae35fe"></a></p><h3 id="1-3-创建"><a href="#1-3-创建" class="headerlink" title="1.3 创建"></a>1.3 创建</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ npm i egg-init -g</span><br><span class="line">$ egg-init egg-example --type=simple   //例如:egg-init 项目名称 --type=simple</span><br><span class="line">$ cd egg-example</span><br><span class="line">$ npm i</span><br></pre></td></tr></table></figure><p><a name="d561eef6"></a></p><h3 id="1-4-运行项目"><a href="#1-4-运行项目" class="headerlink" title="1.4 运行项目"></a>1.4 运行项目</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm run dev  </span><br><span class="line">open localhost:7001 //一般性来说默认端口是7001</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-1-介绍&quot;&gt;&lt;a href=&quot;#1-1-介绍&quot; class=&quot;headerlink&quot; title=&quot;1.1 介绍&quot;&gt;&lt;/a&gt;1.1 介绍&lt;/h3&gt;&lt;p&gt;egg.js是阿里旗下基于node.js和koa是一个node企业级应用开发框架，可以帮助开发团队，和开发人
      
    
    </summary>
    
      <category term="egg-企业级框架和应用入门" scheme="http://yoursite.com/categories/egg-%E4%BC%81%E4%B8%9A%E7%BA%A7%E6%A1%86%E6%9E%B6%E5%92%8C%E5%BA%94%E7%94%A8%E5%85%A5%E9%97%A8/"/>
    
    
      <category term="egg-企业级框架和应用入门" scheme="http://yoursite.com/tags/egg-%E4%BC%81%E4%B8%9A%E7%BA%A7%E6%A1%86%E6%9E%B6%E5%92%8C%E5%BA%94%E7%94%A8%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>23 实例属性-$ref</title>
    <link href="http://yoursite.com/2019/05/18/Vue.js%202.0%20%E6%89%8B%E6%8A%8A%E6%89%8B%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/23%20%E5%AE%9E%E4%BE%8B%E5%B1%9E%E6%80%A7-$ref/"/>
    <id>http://yoursite.com/2019/05/18/Vue.js 2.0 手把手入门笔记/23 实例属性-$ref/</id>
    <published>2019-05-18T07:10:04.000Z</published>
    <updated>2019-06-15T08:56:24.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="官网针对-ref的解释"><a href="#官网针对-ref的解释" class="headerlink" title="官网针对-ref的解释"></a>官网针对-ref的解释</h2><ul><li><p><strong>预期</strong>：<code>string</code><br><code>ref</code> 被用来给元素或子组件注册引用信息。引用信息将会注册在父组件的 <code>$refs</code> 对象上。如果在普通的 DOM 元素上使用，引用指向的就是 DOM 元素；如果用在子组件上，引用就指向组件实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- `vm.$refs.p` will be the DOM node --&gt;</span><br><span class="line">&lt;p ref=&quot;p&quot;&gt;hello&lt;/p&gt;</span><br><span class="line">&lt;!-- `vm.$refs.child` will be the child component instance --&gt;</span><br><span class="line">&lt;child-component ref=&quot;child&quot;&gt;&lt;/child-component&gt;</span><br></pre></td></tr></table></figure></li><li><p>当 <code>v-for</code> 用于元素或组件的时候，引用信息将是包含 DOM 节点或组件实例的数组。<br>关于 ref 注册时间的重要说明：因为 ref 本身是作为渲染结果被创建的，在初始渲染的时候你不能访问它们 - 它们还不存在！<code>$refs</code> 也不是响应式的，因此你不应该试图用它在模板中做数据绑定。</p></li></ul><p><a name="P2AYt"></a></p><h2 id="操作dom"><a href="#操作dom" class="headerlink" title="操作dom"></a>操作dom</h2><blockquote><p>如果我们用jQuery的话,一般性都可以操作dom</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#id"</span>).text(<span class="string">'xxx'</span>)   <span class="comment">// 使用Jquery</span></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"id"</span>)  <span class="comment">// 使用原生Dom</span></span><br></pre></td></tr></table></figure><p>现在我们牛逼了，我们用vue。那vue中，如果我要获取Dom，该怎么做？<br>这就进入本文的主题ref, $refs，官网解释：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>在JavaScript中我们习惯了使用document.getElementsByTagName</p></blockquote><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  data:&#123;</span><br><span class="line">    msg:<span class="string">'hello'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">document</span>.getElementsByTagName(<span class="string">"div"</span>)[<span class="number">0</span>].innerHTML);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><a name="noZkB"></a></p><h2 id="vue操作dom"><a href="#vue操作dom" class="headerlink" title="vue操作dom"></a>vue操作dom</h2><blockquote><p>那么我们在vue中呢</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">"msg"</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  data:&#123;</span><br><span class="line">    msg:<span class="string">'hello'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    <span class="comment">// console.log(document.getElementsByTagName("div")[0].innerHTML);</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'===================================='</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.$refs.msg);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'===================================='</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;官网针对-ref的解释&quot;&gt;&lt;a href=&quot;#官网针对-ref的解释&quot; class=&quot;headerlink&quot; title=&quot;官网针对-ref的解释&quot;&gt;&lt;/a&gt;官网针对-ref的解释&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;预期&lt;/strong&gt;：&lt;code
      
    
    </summary>
    
      <category term="Vue基础入门笔记" scheme="http://yoursite.com/categories/Vue%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Vue基础入门笔记" scheme="http://yoursite.com/tags/Vue%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>22 自定义指令-directives</title>
    <link href="http://yoursite.com/2019/05/18/Vue.js%202.0%20%E6%89%8B%E6%8A%8A%E6%89%8B%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/22%20%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4-directives/"/>
    <id>http://yoursite.com/2019/05/18/Vue.js 2.0 手把手入门笔记/22 自定义指令-directives/</id>
    <published>2019-05-18T06:10:04.000Z</published>
    <updated>2019-06-15T08:56:26.000Z</updated>
    
    <content type="html"><![CDATA[<p><a name="VpxwT"></a></p><h2 id="15-1-介绍"><a href="#15-1-介绍" class="headerlink" title="15.1 介绍"></a>15.1 介绍</h2><p>Vue 也允许注册自定义指令。注意，在 Vue2.0 中，代码复用和抽象的主要形式是组件。然而，有的情况下，你仍然需要对普通 DOM 元素进行底层操作，这时候就会用到自定义指令。<br><br><br>举一个栗子:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"utf-8"</span> /&gt;</span><br><span class="line">    &lt;title&gt;vue&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">       &lt;div v-color=<span class="string">'flag'</span>&gt;<span class="number">123</span>&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;script src="https:/</span><span class="regexp">/cdn.jsdelivr.net/</span>npm/vue<span class="string">"&gt;&lt;/script&gt; </span></span><br><span class="line"><span class="string">&lt;script&gt;</span></span><br><span class="line"><span class="string">    var vm = new Vue(&#123;</span></span><br><span class="line"><span class="string">        directives:&#123;</span></span><br><span class="line"><span class="string">            color(el,bindings)&#123; //el值指代的是button按钮</span></span><br><span class="line"><span class="string">                console.log(arguments);</span></span><br><span class="line"><span class="string">                el.style.background = bindings.value;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        el: '#app',</span></span><br><span class="line"><span class="string">        data: &#123;</span></span><br><span class="line"><span class="string">            flag: 'red'</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        methods:&#123;</span></span><br><span class="line"><span class="string">            getSomething()&#123;</span></span><br><span class="line"><span class="string">                return "</span>hello<span class="string">"</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;)</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure><p>出现如图情况</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1557979872661-82fbbe5f-21d7-4d27-b776-8e6da08f262e.png#align=left&display=inline&height=68&name=image.png&originHeight=136&originWidth=576&size=3491&status=done&width=288" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1557981369618-255dc6df-0173-436d-8d90-4e3a08c08685.png#align=left&display=inline&height=164&name=image.png&originHeight=328&originWidth=1558&size=102694&status=done&width=779" alt="image.png"></p><blockquote><p>再来个栗子</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>vue<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    .a&#123;</span><br><span class="line">        position: absolute;width: 100px;height: 100px;background: red;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"a"</span> <span class="attr">v-drag</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line">        directives:&#123;</span><br><span class="line">            drag(el)&#123;</span><br><span class="line"><span class="javascript">                el.onmousedown = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">var</span> disx = e.pageX - el.offsetLeft;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">var</span> disy = e.pageY - el.offsetTop;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">document</span>.onmousemove = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                        el.style.left = e.pageX - disx +<span class="string">'px'</span>;</span></span><br><span class="line"><span class="javascript">                        el.style.top = e.pageX - disy + <span class="string">'px'</span>;</span></span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">                    <span class="built_in">document</span>.onmouseup = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">document</span>.onmousemove = <span class="built_in">document</span>.onmousemove = <span class="literal">null</span>;</span></span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    e.preventDefault();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            flag: <span class="string">'red'</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            getSomething()&#123;</span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="string">"hello"</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1557981323722-a124890f-84be-46cd-841c-59bdaeecadf8.png#align=left&display=inline&height=251&name=image.png&originHeight=502&originWidth=1720&size=17097&status=done&width=860" alt="image.png"></p><p>可以拖动</p><p><a name="2MYal"></a></p><h2 id="15-2-钩子函数"><a href="#15-2-钩子函数" class="headerlink" title="15.2 钩子函数"></a>15.2 钩子函数</h2><p>一个指令定义对象可以提供如下几个钩子函数 (均为可选)：<br><code>bind</code>：只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置。</p><p><code>inserted</code>：被绑定元素插入父节点时调用 (仅保证父节点存在，但不一定已被插入文档中)。</p><p><code>update</code>：所在组件的 VNode 更新时调用，但是可能发生在其子 VNode 更新之前。指令的值可能发生了改变，也可能没有。但是你可以通过比较更新前后的值来忽略不必要的模板更新 (详细的钩子函数参数见下)。</p><p><a name="Zd937"></a></p><h2 id="15-3-钩子函数参数"><a href="#15-3-钩子函数参数" class="headerlink" title="15.3 钩子函数参数"></a>15.3 钩子函数参数</h2><ul><li><code>el</code>：指令所绑定的元素，可以用来直接操作 DOM 。</li><li><code>binding</code>：一个对象，包含以下属性：<ul><li><code>name</code>：指令名，不包括 <code>v-</code> 前缀。</li><li><code>value</code>：指令的绑定值，例如：<code>v-my-directive=&quot;1 + 1&quot;</code> 中，绑定值为 <code>2</code>。</li><li><code>oldValue</code>：指令绑定的前一个值，仅在 <code>update</code> 和 <code>componentUpdated</code> 钩子中可用。无论值是否改变都可用。</li><li><code>expression</code>：字符串形式的指令表达式。例如 <code>v-my-directive=&quot;1 + 1&quot;</code>中，表达式为 <code>&quot;1 + 1&quot;</code>。</li><li><code>arg</code>：传给指令的参数，可选。例如 <code>v-my-directive:foo</code> 中，参数为 <code>&quot;foo&quot;</code>。</li><li><code>modifiers</code>：一个包含修饰符的对象。例如：<code>v-my-directive.foo.bar</code> 中，修饰符对象为 <code>{ foo: true, bar: true }</code>。</li></ul></li><li><code>oldVnode</code>：上一个虚拟节点，仅在 <code>update</code> 和 <code>componentUpdated</code> 钩子中可用。</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1557981403487-88a67750-c0c9-41d7-9112-d52bdc8b3534.png#align=left&display=inline&height=142&originHeight=310&originWidth=1632&status=done&width=746" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a name=&quot;VpxwT&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;15-1-介绍&quot;&gt;&lt;a href=&quot;#15-1-介绍&quot; class=&quot;headerlink&quot; title=&quot;15.1 介绍&quot;&gt;&lt;/a&gt;15.1 介绍&lt;/h2&gt;&lt;p&gt;Vue 也允许注册自定义指令。注意，在 Vu
      
    
    </summary>
    
      <category term="Vue基础入门笔记" scheme="http://yoursite.com/categories/Vue%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Vue基础入门笔记" scheme="http://yoursite.com/tags/Vue%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>21 内置组件-动画(transition)</title>
    <link href="http://yoursite.com/2019/05/18/Vue.js%202.0%20%E6%89%8B%E6%8A%8A%E6%89%8B%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/21%20%E5%86%85%E7%BD%AE%E7%BB%84%E4%BB%B6-%E5%8A%A8%E7%94%BB(transition)/"/>
    <id>http://yoursite.com/2019/05/18/Vue.js 2.0 手把手入门笔记/21 内置组件-动画(transition)/</id>
    <published>2019-05-18T05:10:04.000Z</published>
    <updated>2019-06-15T08:56:27.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-组件的过渡"><a href="#1-组件的过渡" class="headerlink" title="1 组件的过渡"></a>1 组件的过渡</h2><p>Vue 提供了 <code>transition</code> 的封装组件，在下列情形中，可以给任何元素和组件添加进入/离开过渡</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1557903741434-1d5cce33-0862-4832-b272-67d9825bfe7e.png#align=left&display=inline&height=249&name=image.png&originHeight=498&originWidth=1162&size=45263&status=done&width=581" alt="image.png"></p><p>在进入/离开的过渡中，会有 6 个 class 切换。</p><ol><li><code>v-enter</code>：定义进入过渡的开始状态。在元素被插入之前生效，在元素被插入之后的下一帧移除。<br></li><li><code>v-enter-active</code>：定义进入过渡生效时的状态。在整个进入过渡的阶段中应用，在元素被插入之前生效，在过渡/动画完成之后移除。这个类可以被用来定义进入过渡的过程时间，延迟和曲线函数。<br></li><li><code>v-enter-to</code>: <strong>2.1.8版及以上</strong> 定义进入过渡的结束状态。在元素被插入之后下一帧生效 (与此同时 <code>v-enter</code> 被移除)，在过渡/动画完成之后移除。<br></li><li><code>v-leave</code>: 定义离开过渡的开始状态。在离开过渡被触发时立刻生效，下一帧被移除。<br></li><li><code>v-leave-active</code>：定义离开过渡生效时的状态。在整个离开过渡的阶段中应用，在离开过渡被触发时立刻生效，在过渡/动画完成之后移除。这个类可以被用来定义离开过渡的过程时间，延迟和曲线函数。<br></li><li><code>v-leave-to</code>: <strong>2.1.8版及以上</strong> 定义离开过渡的结束状态。在离开过渡被触发之后下一帧生效 (与此同时 <code>v-leave</code> 被删除)，在过渡/动画完成之后移除。<br><br><a name="QYFv7"></a><h3 id="1-1-初步代码实现"><a href="#1-1-初步代码实现" class="headerlink" title="1.1 初步代码实现"></a>1.1 初步代码实现</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>vue<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    div&gt;div&#123;</span><br><span class="line">        width:100px;height: 100px;background: red;</span><br><span class="line">    &#125;</span><br><span class="line">    .v-enter&#123;</span><br><span class="line">        opacity: 1;</span><br><span class="line">    &#125;</span><br><span class="line">    /* 激活的时候 */</span><br><span class="line">    .v-enter-avtive&#123;</span><br><span class="line">        opacity: 0;</span><br><span class="line">        transition: 1s linear;</span><br><span class="line">    &#125;</span><br><span class="line">    /* 离开 */</span><br><span class="line">    .v-leave-active&#123;</span><br><span class="line">        opacity: 0;</span><br><span class="line">        background: black;</span><br><span class="line">        transition: 1s linear;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"flag=!flag"</span>&gt;</span>切换<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- vue自定义的组件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transition</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">"flag"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el:<span class="string">'#app'</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line"><span class="javascript">            flag:<span class="literal">true</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p><a name="OEs6Z"></a></p><h3 id="1-2-多个transition"><a href="#1-2-多个transition" class="headerlink" title="1.2 多个transition"></a>1.2 多个transition</h3><blockquote><p>遇上了多个transition的时候，同一个class肯定是会冲突的，那么如何处理呢</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>vue<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    div&gt;div&#123;</span><br><span class="line">        width:100px;height: 100px;background: red;</span><br><span class="line">    &#125;</span><br><span class="line">    .jw-enter-active &#123;</span><br><span class="line">        transition: all .3s ease;</span><br><span class="line">    &#125;</span><br><span class="line">    .jw-leave-active &#123;</span><br><span class="line">        transition: all .8s cubic-bezier(1.0, 0.5, 0.8, 1.0);</span><br><span class="line">    &#125;</span><br><span class="line">    .jw-enter, .jw-leave-to</span><br><span class="line">    &#123;</span><br><span class="line">        transform: translateX(10px);</span><br><span class="line">        opacity: 0;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"flag=!flag"</span>&gt;</span>切换<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- vue自定义的组件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">"jw"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">"flag"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el:<span class="string">'#app'</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line"><span class="javascript">            flag:<span class="literal">true</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>简单的理解就是就 transition有一个name属性<br>在css中name-状态即可调用</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-组件的过渡&quot;&gt;&lt;a href=&quot;#1-组件的过渡&quot; class=&quot;headerlink&quot; title=&quot;1 组件的过渡&quot;&gt;&lt;/a&gt;1 组件的过渡&lt;/h2&gt;&lt;p&gt;Vue 提供了 &lt;code&gt;transition&lt;/code&gt; 的封装组件，在下列情形中，可以给任何
      
    
    </summary>
    
      <category term="Vue基础入门笔记" scheme="http://yoursite.com/categories/Vue%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Vue基础入门笔记" scheme="http://yoursite.com/tags/Vue%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
</feed>
