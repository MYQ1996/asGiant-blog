<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>AsGiant-bolg</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-06-06T09:23:01.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Mason Mei</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>个人简历</title>
    <link href="http://yoursite.com/2019/06/05/resume/"/>
    <id>http://yoursite.com/2019/06/05/resume/</id>
    <published>2019-06-05T03:19:04.000Z</published>
    <updated>2019-06-06T09:23:01.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>梅衍青</strong>    <br>男  ︳   23岁  ︳大专 ︳ 2年工作经验  ︳ 上海   <br>17621515830 ︳<a href>954663633@qq.com</a>  <br>上海工商职业技术学院   移动互联网方向</p><blockquote><p><strong>技能</strong></p></blockquote><p>前端：HTML、CSS、JavaScript<br>前端框架: vue、webpack、cordova、react-native，微信小程序<br>后端：php、node<br>后端框架: thinkphp、express、koa2、egg<br>数据库:mysql、mongodb、redis</p><p>版本控制：git、svn</p><blockquote><p><strong>工作经历</strong>   </p></blockquote><p>上海子杰软件有限公司  2017.01-2018-06  <br>快睿登信息科技(上海)有限公司  2018.06-至今<br>** <br><strong><br></strong></p><blockquote><p>  <strong>项目经验</strong>  </p></blockquote><p>一、风驰后台v0.2&amp;小通分期v0.2  2019.2-至今<br>项目内容:风驰后台、小通分期(汇宝通)作为第二期项目的迭代。小通分期，增加分期功能。<br>技术栈:avuex、vue全家桶、cordva、webpack、less<br>项目类型:网页、app<br>项目经验:技术点调用cordva插件，获取手机通讯录、GPS、联系人、电量、极光推送等原生功能。同时迭代风驰后台的页面系统，用户量也大量增加后发现并且处理一些关于手机适配的问题(主要是因为cordva是调用手机中的内核浏览器，出现了css3不兼容的问题)<br><br><br>二、重构风驰后台v0.1  2018年12 – 2019-2<br>项目内容:计划迭代汇宝通后台中，我提出了以下问题。1.前后端有绑定关系，发布后，前后端的这种依赖。2.ui的局限，后台都是使用敏捷开发，那么意味着很多组件是根据技术选型的时候就确定了的。我们现有的框架无法做到ui升级。选择迁回老风驰工程量也会很大(这里的重写包括语法结构都需要重写),选择强行在先有ui框架上修改，工程量无法估计。3.需求其实不是很明确的，只能参照老风驰的样子做，新老风驰经手的人都比较多，都是有什么需求直接加什么需求，但是具体权限和细节根据时间的推移，没有任何文档可以参照，所以建议重构。<br>技术栈:avuex、vue全家桶<br>项目类型:网页<br>项目经验：当时遇到了一个问题，就是这套后台必须兼容手机端的问题，element-ui的缺点也提现出来的，那就是对于手机端的适配，很多插件都会有问题，第二个问题就是前端人手紧缺，原来使用的架构，人手上无法维护。加上时间比较紧张，经过调研，采用了avuex的框架方案，该方案的优势在于json驱动ui的思想理念。以最快的速度，重构了风驰后台。<br> <br>三、黑卡  2018.11-2018-12<br>项目内容:根据个人资质情况，可以进行不同次数的征信洗白，享有最高100，000的额度利率低至银行利率，介绍老铁洗白征信，长期有效，连续签到一年，1000元大奖，三星级会员五星级酒店。<br>技术栈: vue、cordva、webpack、less<br>项目类型：app、网页<br>项目经验：针对于先有公司项目的沉淀，公司决定开启黑卡项目业务，对于vue技术的了解和逐步深入后，公司也对于原生和动态交互提出了更高的要求，针对于目前项目的组件规划和开发。<br> <br>四、汇宝通-后台   2018.08-2018-10<br>项目内容: vue后台贷款系统，引流，贷款模块，用户模块，商品模块，进件模块，风控模块<br>技术栈:vue、webpack、element-ui<br>项目类型：网页<br>项目经验:正对于现在走向组件化的趋势，配合公司领导，进行了后台组件的开发。将原先的贷款系统，引流，贷款模块，用户模块，商品模块，进件模块，风控模块拆分为各个模块，方便与后台页面随时的重构组装，服务与公司将部分模块卖给第三方公司的构想。<br> <br>五、汇宝通-app    2018.07-2018-09<br>项目内容: p2p的线上贷款系统，引流，贷款模块，用户模块，商品模块，进件模块，风控模块为一体的app项目。<br>技术栈:vue、cordva、webpack、less<br>项目类型：app、网页<br>项目经验：离开上一家公司后，我开始了新的征程，这第一次对于node技术进行了了解。前端做到工程和模块的话处理，将人力减少到最小数的敏捷开发。对于项目负责人的架构进行了学习和梳理。了解了关于cordva的插件。对于三个端(网页，安卓，ios)的兼容性，达到最快的试错。对于webpack的改造项目工程目录，达到了，一份代码能兼容三个端，并且还能够调用原生的底层权限。<br> <br>六、梯子网小程序   2018.01-2018-06<br>项目内容: 梯子网为教育局和大型社会培训机构提供一站式多机构管理，其中主要涉及两个难点，一是多机构的管理，不同机构可以定制自己模块下的内容，只有本机构下的人可以看到。二是定制化产生页面，不同的机构可以定制自己的页面栏目，根据自己的需要展示对应的内容，这还涉及到了不同机构、角色的权限问题。<br>项目类型: 微信小程序<br>技术栈: wxml、wxss、js<br>项目经验：冬去春来，公司决定实现一个小程序的工作规划，对于项目探索工作交给了我。对于视频的学习，可能因为有着react-native项目经验，对于新起的mvvm这样的设计思路有着充分的了解。所以上手写小程序，反而觉得比较简单。对于微信组件和api进行了了解和使用。对于wx.request进行了封装，和关于一些常用函数的封装，针对一些常用组件的封装。例如wx.getStorage、清空缓存、分享、弹窗等等。方便对于其他协作的伙伴调用和使用。<br> <br>七、上海天马Portal系统    2017.11-2017.12<br>项目内容: 上海天马Portal管理系统是为了在公司内部整合所有业务系统，规范统一入口，消息通知，业务处理，是业务统一入口，用户无需牢记各个应用系统的地址，降低用户使用时的困难，避免用户来回切换业务系统，提升用户工作效率。<br><br>项目类型: 网页<br>技术栈:layui、jquery、html<br>项目经验:第一次带2个实习生一起工作，心里美滋滋啊(不排除项目比较简单)，关于前端我才用了layui框架，使用过bootstrap后，总觉得layui的页面的美观程度还是比bootstrap框架要优雅很多的。也让我开始了解代码的书写规范，按照美工的设计与后台的配合，完成了项目的进度。<br> <br>八、英语学习-EnglishOnlie   2017.08-2017.10<br>项目内容: 软件分学生端和教师端，学生端主要实现学习功能，学习进度通过闯关和教师操作控制，教师端主要实现管理功能，管理学生帐户，学习资源管理，学习进度管理。<br>项目类型:app、网页、微信网页<br>技术栈：react-native、html、jquery<br>项目经验:这个公司遗留下的一个比较老的项目，不少组件使用的是react-android，不兼容ios的组件，这个工作的主要任务，就是将ios的兼容问题彻底的解决、并且兼容网页与微信网页。这个项目最大的特色应该就是学生读英语的功能，可以经过讯飞系统的语言识别，来判断学生的读音，从而给予评分。第一次了解了网页的录音和微信网页的录音调用是不同的，微信的调用，是不同的，微信有着自己独有的api。<br> <br>九、玖龙移动销售    2017.05-2017.07<br>项目内容: 在前端、管理查看集团的产品、订单、销售统计信息。<br>项目类型:app<br>技术栈:react-native<br>项目经验:经过之前三个月的学习，加入了新的项目组，对于这个项目而言，并没有参加项目的原始的开发计划。当时公司其他的项目比较紧张，与项目组长两个人直接飞往东莞珑石集团技术部门，进行了bug的修复，刚刚参加项目的时候，主要是对于ios的适配问题进行了修复工作(因为我是mac),了解了关于ios的info.list。第一次对于ios白名单有所认识，了解了关于前端调用原生的，最大的问题，是关于一些原生的权限问题。<br> <br>十、中国国际珠宝交易平台  2017.01-2017.04  <br>项目内容: “中国国际珠宝交易平台” APP 具有产品搜索/浏览、商品购买、评价、退换货等功能<br>项目类型:app<br>技术栈:react-native<br>项目经验:这个项目是加入前端组织行列的第一个项目，你知道在2017年，这个react-native在大环境下，其实我认为还不算很成熟，当时项目组没有什么这方面的技术，就自发的组织学习这项技术。几个通宵后的学习，学了基本上的flex布局，对于react-natve的特殊的css处理方法进行了了解，了解了fetch的网络请求方案，让工作的环境中还算能够使用这项技术，因为那时候刚刚入行，代码的稚嫩，如今看来还是有很大的问题。</p><blockquote><p><strong>开源项目</strong></p></blockquote><p>**<br><a href="https://github.com/MYQ1996/asGiant-admin.git" target="_blank" rel="noopener">https://github.com/MYQ1996/asGiant-admin.git</a><br>项目内容:</p><ul><li>基于egg架构的自动生成接口的框架</li><li>你可以这么理解这个框架，就是在你配置完数据后，就生成了增删改查接口，也同时生成了相关的栏目。</li><li>这样即使你是一个不懂后端的同学，你也可以直接调用接口给前端使用</li></ul><p>_<br>在这个项目中，我希望能解决，前端对于后端的不熟悉和了解，但是对于调用接口比较熟悉的业务现状。<br>完成了以下模块。<br>对于表的增删改查操作、增删改字段的信息、短信管理(只需配置短信的key)、邮箱管理(需配置邮箱的key)、人员注册(手机号、用户名、邮箱)、针对于字段添加了人员权限。之后的规划想做个cms，针对于seo的网站排名调优。对于增加之后，直接生成相对应的前端页面，使用node写了一个微信机器人，符合时代需求，达到人工智能，和机器人聊天的过程中，直接操作平台，完成接口的操作。希望之后，技术提升之后，能够够写出一套兼容性比较高的组件，直接配合平台的使用，有考虑过taro，但是感觉对于原生的调用不足，还在思考这部分的工作。最后达到敏捷开发的效果。(因为加班的缘故，所以一直没有做完)。</p><blockquote><p>掘金博客</p></blockquote><p><a href="https://juejin.im/user/5b4e88986fb9a04fba6e752b" target="_blank" rel="noopener">https://juejin.im/user/5b4e88986fb9a04fba6e752b</a></p><blockquote><p><strong>自我描述</strong></p></blockquote><pre><code>对于技术出生，还是个大专。还是受到不少的压力的，现在毕竟都觉得本科生比较好培养嘛。我是15年进的大专。第一年被选中参加了，学校的比赛班，主要就是负责学校对外的比赛参加。大二开始不参加日常课程直接进入培训，大三进入校企合作上班。对于技术不断追求，热衷学习研究新技术，实践在项目中。对于前后端有着一定的理解，希望能达到技术一个新的高度。</code></pre><p>ps: 希望能和贵公司有着合作的机会，也希望能成为你的同事。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;梅衍青&lt;/strong&gt;    &lt;br&gt;男  ︳   23岁  ︳大专 ︳ 2年工作经验  ︳ 上海   &lt;br&gt;17621515830 ︳&lt;a href&gt;954663633@qq.com&lt;/a&gt;  &lt;br&gt;上海工商职业技术学院   移动互联网方向&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>11.函数基础</title>
    <link href="http://yoursite.com/2019/04/10/JavaScript%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/11%20%E5%87%BD%E6%95%B0%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2019/04/10/JavaScript基础入门/11 函数基础/</id>
    <published>2019-04-10T08:10:04.000Z</published>
    <updated>2019-06-06T15:51:28.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li>函数是指一段在一起的、可以做某一件事儿的程序。也叫做子程序、(OOP中)方法</li><li>函数实现某一个功能的方法</li></ul><h2 id="创建函数"><a href="#创建函数" class="headerlink" title="创建函数"></a>创建函数</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">functoin [函数名]()&#123;</span><br><span class="line"><span class="comment">// =&gt; [函数体]</span></span><br><span class="line">    <span class="comment">// 实现功能的具体js代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="执行函数"><a href="#执行函数" class="headerlink" title="执行函数"></a>执行函数</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">函数名(); <span class="comment">// 创建的函数执行，而且这个函数可以执行很多次</span></span><br><span class="line">函数名();</span><br></pre></td></tr></table></figure><p>每一次执行都相当于把函数体重实现功能的js代码重复执行了一遍</p><blockquote><p>在真实的项目中，我们一般都会把实现一个具体功能的代码封装到函数中</p></blockquote><ul><li>如果当前这个功能需要在页面中执行多次，不封装成为函数，每一次实现这个功能，都需要重新吧代码写一遍，浪费时间；而封装在一个函数中，以后想实现多次这个功能，我们就没有必要在重新写代码，只需要把函数重新的执行即可，提高了开发效率</li><li>封装在一个函数，页面中就基本上很难重复一样的代码了，减少了页面中代码的冗余度，提高了代码的重复利用率: <code>低耦合高内聚</code></li></ul><blockquote><p>我们把以上的特点成为<strong>函数封装</strong> (OOP面向对象编程思想，需要我们掌握的就是类的继承、封装、多态)</p></blockquote><h2 id="JS中函数的核心原理"><a href="#JS中函数的核心原理" class="headerlink" title="JS中函数的核心原理"></a>JS中函数的核心原理</h2><blockquote><p>函数作为js中引用数据类型中的一种，也是按照引用地址操作的</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> total = <span class="number">1</span>+<span class="number">1</span>;</span><br><span class="line">  total *= <span class="number">20</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(total.toFixed(<span class="number">2</span>));</span><br><span class="line">&#125;</span><br><span class="line">sum();</span><br></pre></td></tr></table></figure><h3 id="创建函数-1"><a href="#创建函数-1" class="headerlink" title="创建函数"></a>创建函数</h3><ul><li>首先会在当前作用中声明一个函数名(声明的函数和使用var声明变量是一样的操作:var sum;function cum;这两个名字算重复了)</li><li>浏览器首先会开辟一个新的内存空间(奉陪一个16进制地址)，把函数体重写好的代码当做普通字符串存储在这个内存空间(创建一个函数如果不执行，函数没有意义)</li><li>把内存空间的地址赋值给之前声明的那个函数名</li></ul><h3 id="函数执行"><a href="#函数执行" class="headerlink" title="函数执行"></a>函数执行</h3><ul><li>目的:把之前存储的实现具体功能的js代码执行</li><li>函数执行，浏览器首先会为其开辟新的<code>私有作用域</code>(只能执行函数中之前编写的js代码)</li><li>形参赋值</li><li>私有作用中的变量升级</li><li>把之前穿件时间存储的那些js代码字符串，拿到自由作用域中，然后把题目变成js表达式从上到下执行</li><li>私有作用域是否销毁的问题</li></ul><br>![image.png](https://cdn.nlark.com/yuque/0/2019/png/271124/1553076800854-5e22d4eb-aa50-40a1-a8de-6abbd5cf8939.png#align=left&display=inline&height=203&name=image.png&originHeight=406&originWidth=986&size=115231&status=done&width=493)<br><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><blockquote><p>函数执行会形成一个私有的作用域，让里面的私有变量和外界互不影响(相互干扰、外面的无法直接获取里面的变量值)，此时我们可以理解为私有作用域把私有变量保护起来，我们把这种保护机制称为为<code>闭包</code></p></blockquote><h3 id="栈内存"><a href="#栈内存" class="headerlink" title="栈内存"></a>栈内存</h3><blockquote><p>作用域(全局作用域/私有作用域):提供一个供js代码执行的环境</p></blockquote><h3 id="堆内存"><a href="#堆内存" class="headerlink" title="堆内存"></a>堆内存</h3><blockquote><p>所有的引用数据类型，他们需要存储的内容都是堆内存中(相当于一个仓库，目的是存储信息)</p></blockquote><ul><li>对象会吧键值队存储起来</li><li>函数会把代码当做字符串存储起来</li></ul><h2 id="函数中形参和实参"><a href="#函数中形参和实参" class="headerlink" title="函数中形参和实参"></a>函数中形参和实参</h2><ul><li>形参:相当于生成洗衣机的时候提供的入口，需要用户执行函数的时候把需要的值传递进来，形参是个变量，用来春初和接口那些值</li><li>实参:用户执行的时候传递给形参的具体指</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 随便求出两个数的和</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">num1,num2</span>)</span>&#123; <span class="comment">//num1/num2就是形参变量(类似于var了一下)</span></span><br><span class="line"><span class="keyword">var</span> total = num1 + num2;</span><br><span class="line">    total*=<span class="number">10</span>;</span><br><span class="line">    total=total.toFixed(<span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(total);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sum(<span class="number">10</span>,<span class="number">20</span>);<span class="comment">//10/20是实参  num1=10 num2=20</span></span><br><span class="line">sum(<span class="number">10</span>); <span class="comment">// num1=10 num2=undefined 定义了形参但是执行的时候，没有传递实参，默认实参就是undefined</span></span><br></pre></td></tr></table></figure><h2 id="arguments实参集合"><a href="#arguments实参集合" class="headerlink" title="arguments实参集合"></a>arguments实参集合</h2><blockquote><p>当我们不知道用户具体要传递几个值的时候(传递几个值都行)，此时我们无法设置形参的个数:遇到此类需要，需要使用函数内置的实参集合：arguments</p></blockquote><ul><li>argument 只有函数才有</li><li>不管执行函数的时候是否传递实参，arguments天生就纯在，没有传递实参ARG是个空的集合传递了ARG中包含了所有传递的实参值</li><li>不管是否设置了形参，ARG中始终存储了所有的实参信息</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">arguments</span>)</span><br><span class="line">&#125;</span><br><span class="line">sum(<span class="number">10</span>,<span class="number">20</span>,<span class="string">'wjh'</span>,&#123;<span class="attr">name</span>:<span class="string">'wjw'</span>&#125;);</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1553077856793-ee7e01c4-6aff-4baf-b57a-4a6a01f7e9b2.png#align=left&display=inline&height=153&name=image.png&originHeight=306&originWidth=1272&size=59435&status=done&width=636" alt="image.png"></p><ul><li>arguments 是个类数组集合<ul><li>以数字作为索引(属性名)，从0开始</li><li>arguments[0] 第一个实参信息</li><li>arguments[2] 第三个实参信息</li><li>arguments[n] 第n+1个实参信息</li></ul></li><li>有一个length的属性，存储的是当前几个的长度(当前传递实参的个数)<ul><li>arguments.length</li><li>arguments[‘length’]</li><li>arguments.calle 存储的是当前函数本身</li><li>arguments.calle.caller 存储的是当前函数只在哪执行的(宿主函数)，在全局作用域下执行的，结果是null</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">arguments</span>.callee.caller);<span class="comment">//f</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">sum(<span class="number">10</span>,<span class="number">20</span>,<span class="string">'wjh'</span>,&#123;<span class="attr">name</span>:<span class="string">'wjw'</span>&#125;);</span><br><span class="line">&#125;</span><br><span class="line">fn();</span><br></pre></td></tr></table></figure><p>// arguments.call或者arguments.call.caller一般真正项目中很少使用，因为是在严格js模式下不允许我们直接使用这两个属性，然而现有项目大部分都是基于严格模式来的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 任意数求和</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> total = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i =<span class="number">0</span>;i&lt;<span class="built_in">arguments</span>.length;i++)&#123;</span><br><span class="line">  <span class="keyword">var</span> cur = <span class="built_in">Number</span>(<span class="built_in">arguments</span>[i]);</span><br><span class="line">    !<span class="built_in">isNaN</span>(cur)?total += cur : <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">  consloe.log(total);</span><br><span class="line">  <span class="keyword">return</span> total;</span><br><span class="line">  <span class="comment">// return 后面跟着的都是值(返回的都是值):此处不少TOTAL变量返回，而是吧total存储到值返回而已</span></span><br><span class="line">  <span class="comment">// return 60;</span></span><br><span class="line">&#125;</span><br><span class="line">sum(<span class="number">10</span>,<span class="number">20</span>,<span class="number">20</span>);</span><br><span class="line">sum();</span><br><span class="line">sum(<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="string">'wjw'</span>)</span><br><span class="line"><span class="comment">// console.log(total); </span></span><br><span class="line"><span class="comment">//=&gt;Uncaught ReferenceError: total is not defined 闭包的保护机制导致作用域会保护里面的私有变量</span></span><br></pre></td></tr></table></figure><h2 id="JS中的返回值return"><a href="#JS中的返回值return" class="headerlink" title="JS中的返回值return"></a>JS中的返回值return</h2><blockquote><p>返回值是函数提供的一个出口:我们如果想在外面使用函数私有的一些信息，那么就需要通过return，把这些信息返回出来供外面使用</p></blockquote><p>sum:代表的是函数本身<br>sum() 让函数先执行，代表的是当前函数返回的结果(return)后面是啥，相当于函数返回的是啥</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> total = <span class="number">0</span>;</span><br><span class="line">    renturn</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sum());</span><br><span class="line"><span class="comment">// 如果函数中没有return或者return后面啥也没有，默认返回的结果是undefined</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> total = <span class="number">0</span>;</span><br><span class="line">    renturn;</span><br><span class="line">    <span class="built_in">console</span>.log(sum());</span><br><span class="line">  <span class="comment">// 函数体重遇到return后，return后面的代码都不在执行了</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="js中匿名函数"><a href="#js中匿名函数" class="headerlink" title="js中匿名函数"></a>js中匿名函数</h2><blockquote><p>没有名字的函数</p></blockquote><ul><li>函数表达式</li><li>自执行函数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">oBox.onclick = function()&#123;</span><br><span class="line">// 把一个码云名字的函数(有名字的也无所谓)作为值赋值给一个变量或者一个元素的某一个事件等,函数表达式</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(function(n)&#123;</span><br><span class="line">// 创建函数和执行函数放在一起，穿件完成立马之执行:自执行函数</span><br><span class="line">  // n 形参 n=10</span><br><span class="line">&#125;)(10)</span><br><span class="line"></span><br><span class="line">// 以下都是自执行函数，符号只有控制语法规范</span><br><span class="line">~function()&#123;&#125;(10)</span><br><span class="line">-function()&#123;&#125;(10)</span><br><span class="line">+function()&#123;&#125;(10)</span><br><span class="line">!function()&#123;&#125;(10)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;函数是指一段在一起的、可以做某一件事儿的程序。也叫做子程序、(OOP中)方法&lt;/li&gt;
&lt;li&gt;函数实现某一个功能的方法&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;创建函数&quot;&gt;&lt;a href=&quot;#创建函数&quot; class=&quot;headerlink&quot; title=&quot;创建函
      
    
    </summary>
    
      <category term="JavaScript基础入门" scheme="http://yoursite.com/categories/JavaScript%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/"/>
    
    
      <category term="JavaScript基础入门" scheme="http://yoursite.com/tags/JavaScript%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>10.数组的函数</title>
    <link href="http://yoursite.com/2019/04/10/JavaScript%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/10%20%E6%95%B0%E7%BB%84%E7%9A%84%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2019/04/10/JavaScript基础入门/10 数组的函数/</id>
    <published>2019-04-10T07:10:04.000Z</published>
    <updated>2019-06-06T15:50:01.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数组的基础结构"><a href="#数组的基础结构" class="headerlink" title="数组的基础结构"></a>数组的基础结构</h2><ul><li>数组也是对象数据类型 typeof [] -&gt; ‘object’</li><li>数组也是属性名，只不过属性名是数字，我们把数字属性名称之为它的索引:数组是以数字为索引，索引从零开始，有一个length属性代表数组的长度</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1553145017026-b9ebbcdf-4f0a-427b-ad67-d539a8d3150e.png#align=left&display=inline&height=190&name=image.png&originHeight=380&originWidth=536&size=31500&status=done&width=268" alt="image.png"><br></p><blockquote><p>类数组：类似于数组，但是不是数组</p></blockquote><ul><li>通过getElementsByTageName 获取的元素集合是类数组</li><li>函数中的实参集合argument也是类数组</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1553145133119-f28b8564-9f9f-452f-85d0-c35fd41ec072.png#align=left&display=inline&height=107&name=image.png&originHeight=214&originWidth=366&size=42973&status=done&width=183" alt="image.png"><br> </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// for 循环操作</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i =<span class="number">0</span>;i&lt;ary.length;i++)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(ary[i])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// for in 循环操作</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> ary)&#123;</span><br><span class="line"><span class="comment">// key:属性名(数组中的属性名是索引)</span></span><br><span class="line"><span class="built_in">console</span>.log(ary[key]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// for 循环只能遍历到数组私有的一些属性，而for in 循环可以吧一些自定义的公共属性也能遍历到</span></span><br></pre></td></tr></table></figure><h2 id="数组中的常用方法"><a href="#数组中的常用方法" class="headerlink" title="数组中的常用方法"></a>数组中的常用方法</h2><blockquote><p>数组中有很多方法</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.dir(<span class="built_in">Array</span>.prototype)</span><br></pre></td></tr></table></figure><ul><li>方法的意义和作用</li><li>方法的形参</li><li>方法的返回值</li><li>通过此方法，原来的数组是否发生了改变</li></ul><blockquote><p>实现数组的增加、修改、删除</p></blockquote><h3 id="增加"><a href="#增加" class="headerlink" title="增加"></a>增加</h3><h3 id="push-向数组的末尾追加新内容"><a href="#push-向数组的末尾追加新内容" class="headerlink" title="push : 向数组的末尾追加新内容"></a>push : 向数组的末尾追加新内容</h3><p>参数:一到多个，任何数据类型都可以，想要给数组末尾追加什么，直接传递到push方法中极客，传递多个逗号隔开<br>返回值:新增后数组的长度<br>原有数组改变了</p><h3 id="unshift-向数组开头追加新内容"><a href="#unshift-向数组开头追加新内容" class="headerlink" title="unshift:向数组开头追加新内容"></a>unshift:向数组开头追加新内容</h3><p>参数:需要追加的内容(可以是多个任何数据类型的值)<br>返回值:新增后 数组的长度<br>原来数组改变了</p><p>把数组当做一个普通的对象，使用对象键值对的操作，给其设置新的属性(索引)<br>ary[ary.length]=xxx 向数组的末尾追加了新的内容</p><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><h3 id="pop-删除数组最后一项"><a href="#pop-删除数组最后一项" class="headerlink" title="pop 删除数组最后一项"></a>pop 删除数组最后一项</h3><p>参数:无<br>返回值:被删除的那一项内容<br>原有数组改变了</p><h3 id="shift-删除数组第一项"><a href="#shift-删除数组第一项" class="headerlink" title="shift:删除数组第一项"></a>shift:删除数组第一项</h3><p>参数:无<br>返回值:被删除那一项的内容<br>原有数组改变了<br>使用shift删除第一项之后，后面每一项的索引都要向前进一位(导致后面项的索引发生了改变)</p><p>把数组当做一个普通对象操作<br>delete删除:delete ary[索引]删除指定索引这一项(当前项被删除后),原有数组其它项的索引不会改变:当前数组的length也不会改变</p><p>ary.length–:删除数组最后一项</p><h3 id="splice-数组中内置的方法，可以实现数组的增加、修改、删除"><a href="#splice-数组中内置的方法，可以实现数组的增加、修改、删除" class="headerlink" title="splice:数组中内置的方法，可以实现数组的增加、修改、删除"></a>splice:数组中内置的方法，可以实现数组的增加、修改、删除</h3><p>splice实现删除<br>splice(n,m):从索引n开始删除m个(m不写是个删除列数组的末尾，n也不写)<br>返回值:被删除的内容(以一个新数组保存)<br>原有数组改变了<br>splice(0) 清空数组<br>splice() 一项都不删除，返回一个新的空数组<br>splice(0,1)删除第一项</p><h3 id="splice实现修改"><a href="#splice实现修改" class="headerlink" title="splice实现修改"></a>splice实现修改</h3><p>splice(n,m,x):在原有删除的基础上，用x代替删除的内容</p><p>splice实现增加<br>splice(n,0,x):在修改的基础上，我们一项都不删除，把x插入到索引n的前面<br>ary.splice(0,0,x)  向数组末尾追加新元素</p><p>数组的查询</p><h3 id="slice-数组的查询"><a href="#slice-数组的查询" class="headerlink" title="slice 数组的查询"></a>slice 数组的查询</h3><ul><li>参数:slice(n,m) 从索引n开始找到索引m处(不包含m)</li><li>返回值:吧找到的部分已一个新数组返回</li><li>原来的数组不变</li></ul><p>slice(n) 从索引n开始找到末尾<br>slice(0) /slice() 数组克隆，克隆一份和原来数组一模一样的的新数组<br>slice支持负载索引，如果传递的索引为负数，浏览器解析的时候是按照总长度+负数索引 来处理的</p><h3 id="将两个数组进行拼接"><a href="#将两个数组进行拼接" class="headerlink" title="将两个数组进行拼接"></a>将两个数组进行拼接</h3><p>concat:将多个数组拼接在一起</p><ul><li>参数:要拼接的内容(把内容放在原数组的后面)，可以是一个数组</li><li>返回:拼接后的新数组</li></ul><p>原有数组不变<br><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1553240058209-2b8bf72e-c869-4a20-93e9-2d4d7b554f01.png#align=left&display=inline&height=94&name=image.png&originHeight=188&originWidth=698&size=91943&status=done&width=349" alt="image.png"></p><h2 id="数组的查询"><a href="#数组的查询" class="headerlink" title="数组的查询"></a>数组的查询</h2><p>slice: 数组的查询<br>参数: slice(n,m) 从索引n开始找到索引为m处(不包含m)<br>返回值:把找到的部分已一个新数组返回<br>原来的数组不变</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">slice(n) 从索引n开始找到末尾</span><br><span class="line">slice(<span class="number">0</span>) / slice() 数组克隆，克隆一份和原来数组一模一样的新数组</span><br><span class="line">slice 支持负数索引，如果传递的索引为负数，浏览器解析的时候是按照，总长度+负数索引 来处理的</span><br></pre></td></tr></table></figure><h2 id="数组的拼接"><a href="#数组的拼接" class="headerlink" title="数组的拼接"></a>数组的拼接</h2><p>concat:将多个数组拼接在一起<br>参数:要拼接的内容(把内容放在原数组的后面),可以是一个数组，也可以是一些数据值<br>返回:拼接后的新数组<br>原有的数组不变</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">0</span>,<span class="number">100</span>]</span><br><span class="line">arr.concat([<span class="number">100</span>,<span class="number">200</span>],[<span class="number">200</span>,<span class="number">300</span>],<span class="number">12</span>)</span><br></pre></td></tr></table></figure><p>concat() 什么都没有拼接，相当于吧原有数组克隆一份一模一样的出来<br><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1553587618858-28ea0dc4-f2fc-41a6-ad95-f6dce2fff131.png#align=left&display=inline&height=71&name=image.png&originHeight=142&originWidth=448&size=48113&status=done&width=224" alt="image.png"></p><h2 id="数组转字符串"><a href="#数组转字符串" class="headerlink" title="数组转字符串"></a>数组转字符串</h2><h3 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString"></a>toString</h3><blockquote><p>实现吧数组转化为字符串(转换后的字符串逗号分隔每一项)</p></blockquote><p>参数:无<br>返回值:转换的字符串<br>原有数组不变</p><h3 id="join"><a href="#join" class="headerlink" title="join"></a>join</h3><blockquote><p>把数组按照指定的分隔符转换为字符串，和字符串中的split相对应</p></blockquote><ul><li>参数:指定的链接符号</li><li>返回值:转换后的字符串</li><li>原有数组不变</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1553588129014-79ede44c-43c8-479e-ab04-7d9dfd247c0a.png#align=left&display=inline&height=122&name=image.png&originHeight=244&originWidth=440&size=70751&status=done&width=220" alt="image.png"></p><blockquote><p>已知数组的每一项都是数字，想事先数组求和，我们如何实现？</p></blockquote><p>循环实现</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> total = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;ary.length;i++)&#123;</span><br><span class="line">total+=ary[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用join</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> total = <span class="built_in">eval</span>(ary.join(<span class="string">'+'</span>)) <span class="comment">// evel:把字符串变为js表达式执行</span></span><br></pre></td></tr></table></figure><h2 id="实现数组中每一项的排序和排列"><a href="#实现数组中每一项的排序和排列" class="headerlink" title="实现数组中每一项的排序和排列"></a>实现数组中每一项的排序和排列</h2><h3 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h3><blockquote><p>把数组中每一项倒过来排序</p></blockquote><p>参数:无<br>返回值:排序后的数组<br>原有数组改变</p><h3 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h3><blockquote><p>实现数组的排序</p></blockquote><p>参数:无或者回调函数<br>返回值:排序后的数组<br>原有数组改变<br>      不传递参数的情况下:可以给10以内的数字进行升序排列，但是超过10的就无法处理(多位数值识别第一位)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ary.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> a-b; <span class="comment">//升序</span></span><br><span class="line">  <span class="keyword">return</span> b-a; <span class="comment">//降序</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="验证数组中是否包含某一项"><a href="#验证数组中是否包含某一项" class="headerlink" title="验证数组中是否包含某一项"></a>验证数组中是否包含某一项</h2><h3 id="indexOf-lastindexOf"><a href="#indexOf-lastindexOf" class="headerlink" title="indexOf / lastindexOf"></a>indexOf / lastindexOf</h3><blockquote><p>获取当前现在数组中第一次或者最后一次出现的位置索引</p></blockquote><ul><li>数组的这两个方法在IE6-IE8下不兼容</li><li>字符串的这两个方法兼容所有的浏览器 </li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(ary.indexOf(<span class="number">12</span>)&gt;<span class="number">-1</span>)&#123;</span><br><span class="line"><span class="comment">// 数组中包含12</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.myIndexOf = <span class="function"><span class="keyword">function</span> <span class="title">myIndexOf</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> result = <span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i =<span class="number">0</span>;i&lt;<span class="keyword">this</span>.length;i++)&#123;</span><br><span class="line">  <span class="keyword">if</span>(value===<span class="keyword">this</span>[i])&#123;</span><br><span class="line">    result = i;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="遍历数组每一项的方法"><a href="#遍历数组每一项的方法" class="headerlink" title="遍历数组每一项的方法"></a>遍历数组每一项的方法</h2><blockquote><p>以下方法ie6-8下都不兼容</p></blockquote><h3 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h3><blockquote><p>遍历数组中的每一项</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ary.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">value,index</span>)</span>&#123;</span><br><span class="line"><span class="comment">/* 数组中有多少项，当前回调函数执行多少次，妹妹一次传进来的value就是当前遍历数组这一项的值，index</span></span><br><span class="line"><span class="comment">     就是遍历这一项的索引</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><blockquote><p>遍历数组中的每一项，在forEach的基础上，可以修改每一项的值</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ary.map(<span class="function"><span class="keyword">function</span>(<span class="params">value,index</span>)</span>&#123;</span><br><span class="line"><span class="comment">/* 数组中有多少项，当前回调函数执行多少次，妹妹一次传进来的value就是当前遍历数组这一项的值，index</span></span><br><span class="line"><span class="comment">     就是遍历这一项的索引</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">return</span> xxx;</span><br><span class="line">  <span class="comment">// return 后面返回的结果就是当前遍历的这一项修改为xxx</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>filter<br>find<br>reduce<br>every<br>…</p><h2 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h2><blockquote><p>var ary = [1,2,3,4,5,6,7,1,3,4,5];</p></blockquote><h3 id="方案一-最简单数组去重法"><a href="#方案一-最简单数组去重法" class="headerlink" title="方案一 最简单数组去重法"></a>方案一 最简单数组去重法</h3><p>遍历数组的每一项，拿每一项和它后面的项依次比较,如果相同了，则把相同的这一项在原来数组中删除即可</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 新建一新数组，遍历传入数组，值不在新数组就push进该新数组中</span></span><br><span class="line"><span class="comment">* IE8以下不支持数组的indexOf方法</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">uniq</span>(<span class="params">array</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> temp = []; <span class="comment">//一个新的临时数组</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; array.length; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(temp.indexOf(array[i]) == <span class="number">-1</span>)&#123;</span><br><span class="line">            temp.push(array[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> aa = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">5</span>];</span><br><span class="line"><span class="built_in">console</span>.log(uniq(aa));</span><br></pre></td></tr></table></figure><h3 id="方案二-对象键值法去重"><a href="#方案二-对象键值法去重" class="headerlink" title="方案二 对象键值法去重"></a>方案二 对象键值法去重</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 速度最快， 占空间最多（空间换时间）</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* 该方法执行的速度比其他任何方法都快， 就是占用的内存大一些。</span></span><br><span class="line"><span class="comment">* 现思路：新建一js对象以及新数组，遍历传入数组时，判断值是否为js对象的键，</span></span><br><span class="line"><span class="comment">* 不是的话给对象新增该键并放入新数组。</span></span><br><span class="line"><span class="comment">* 注意点：判断是否为js对象键时，会自动对传入的键执行“toString()”，</span></span><br><span class="line"><span class="comment">* 不同的键可能会被误认为一样，例如n[val]-- n[1]、n["1"]；</span></span><br><span class="line"><span class="comment">* 解决上述问题还是得调用“indexOf”。*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">uniq</span>(<span class="params">array</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> temp = &#123;&#125;, r = [], len = array.length, val, type;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        val = array[i];</span><br><span class="line">        type = <span class="keyword">typeof</span> val;</span><br><span class="line">        <span class="keyword">if</span> (!temp[val]) &#123;</span><br><span class="line">            temp[val] = [type];</span><br><span class="line">            r.push(val);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (temp[val].indexOf(type) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            temp[val].push(type);</span><br><span class="line">            r.push(val);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> aa = [<span class="number">1</span>,<span class="number">2</span>,<span class="string">"2"</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="string">"a"</span>,<span class="string">"a"</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">5</span>];</span><br><span class="line"><span class="built_in">console</span>.log(uniq(aa));</span><br></pre></td></tr></table></figure><h3 id="方案三-排序后相邻去除法"><a href="#方案三-排序后相邻去除法" class="headerlink" title="方案三 排序后相邻去除法"></a>方案三 排序后相邻去除法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 给传入数组排序，排序后相同值相邻，</span></span><br><span class="line"><span class="comment">* 然后遍历时,新数组只加入不与前一值重复的值。</span></span><br><span class="line"><span class="comment">* 会打乱原来数组的顺序</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">uniq</span>(<span class="params">array</span>)</span>&#123;</span><br><span class="line">    array.sort();</span><br><span class="line">    <span class="keyword">var</span> temp=[array[<span class="number">0</span>]];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; array.length; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>( array[i] !== temp[temp.length<span class="number">-1</span>])&#123;</span><br><span class="line">            temp.push(array[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> aa = [<span class="number">1</span>,<span class="number">2</span>,<span class="string">"2"</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="string">"a"</span>,<span class="string">"a"</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">5</span>];</span><br><span class="line"><span class="built_in">console</span>.log(uniq(aa));</span><br></pre></td></tr></table></figure><h3 id="方案四-数组下标法"><a href="#方案四-数组下标法" class="headerlink" title="方案四  数组下标法"></a>方案四  数组下标法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* 还是得调用“indexOf”性能跟方法1差不多，</span></span><br><span class="line"><span class="comment">* 实现思路：如果当前数组的第i项在当前数组中第一次出现的位置不是i，</span></span><br><span class="line"><span class="comment">* 那么表示第i项是重复的，忽略掉。否则存入结果数组。</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">uniq</span>(<span class="params">array</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> temp = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">        <span class="comment">//如果当前数组的第i项在当前数组中第一次出现的位置是i，才存入数组；否则代表是重复的</span></span><br><span class="line">        <span class="keyword">if</span>(array.indexOf(array[i]) == i)&#123;</span><br><span class="line">            temp.push(array[i])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> aa = [<span class="number">1</span>,<span class="number">2</span>,<span class="string">"2"</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="string">"a"</span>,<span class="string">"a"</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">5</span>];</span><br><span class="line"><span class="built_in">console</span>.log(uniq(aa));</span><br></pre></td></tr></table></figure><h3 id="方案五-优化遍历数组法"><a href="#方案五-优化遍历数组法" class="headerlink" title="方案五  优化遍历数组法"></a>方案五  优化遍历数组法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 思路：获取没重复的最右一值放入新数组</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 推荐的方法</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* 方法的实现代码相当酷炫，</span></span><br><span class="line"><span class="comment">* 实现思路：获取没重复的最右一值放入新数组。</span></span><br><span class="line"><span class="comment">* （检测到有重复值时终止当前循环同时进入顶层循环的下一轮判断）*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">uniq</span>(<span class="params">array</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> temp = [];</span><br><span class="line">    <span class="keyword">var</span> index = [];</span><br><span class="line">    <span class="keyword">var</span> l = array.length;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; l; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> j = i + <span class="number">1</span>; j &lt; l; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (array[i] === array[j])&#123;</span><br><span class="line">                i++;</span><br><span class="line">                j = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        temp.push(array[i]);</span><br><span class="line">        index.push(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(index);</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> aa = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">5</span>];</span><br><span class="line"><span class="built_in">console</span>.log(uniq(aa));</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;数组的基础结构&quot;&gt;&lt;a href=&quot;#数组的基础结构&quot; class=&quot;headerlink&quot; title=&quot;数组的基础结构&quot;&gt;&lt;/a&gt;数组的基础结构&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;数组也是对象数据类型 typeof [] -&amp;gt; ‘object’&lt;/li&gt;
&lt;li
      
    
    </summary>
    
      <category term="JavaScript基础入门" scheme="http://yoursite.com/categories/JavaScript%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/"/>
    
    
      <category term="JavaScript基础入门" scheme="http://yoursite.com/tags/JavaScript%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>9.Date的基础知识</title>
    <link href="http://yoursite.com/2019/04/10/JavaScript%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/9%20Date%E7%9A%84%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>http://yoursite.com/2019/04/10/JavaScript基础入门/9 Date的基础知识/</id>
    <published>2019-04-10T06:10:04.000Z</published>
    <updated>2019-06-06T15:46:06.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Data-是日期类"><a href="#Data-是日期类" class="headerlink" title="Data 是日期类"></a>Data 是日期类</h2><blockquote><p>通过它可以对时间进行处理</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> time = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="comment">// 获取当前客户端本机时间(当前获取的时间不能作为重要的参考依据)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取结果是一个日期格式的对象</span></span><br><span class="line"><span class="comment">// Wed Mar 20 2019 17:37:16 GMT+0800 (中国标准时间)</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="keyword">new</span> <span class="built_in">Date</span>() -&gt; object</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">time.getFullYear() 获取四位数整年</span><br><span class="line">time.getMonth() 获取月份</span><br><span class="line">time.getDate() 获取日</span><br><span class="line">time.getDay() 获取星期(<span class="number">0</span><span class="number">-6</span>代表周日-周六)</span><br><span class="line">time.getHours() 获取小时</span><br><span class="line">time.getMinutes() 获取分钟</span><br><span class="line">time.getSeconds() 获取秒</span><br><span class="line">time.getMilliseconds() 获取毫秒</span><br><span class="line">time.getTime() 获取当前日期距离<span class="string">'1970-01-01 00:00:00'</span>的毫秒差</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> time = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2017-10-22'</span>); </span><br><span class="line"><span class="comment">// 当new Date 中传递一个时间格式的字符串，相当于把这个字符串换位标准时间对象</span></span><br><span class="line"><span class="comment">// (转换完成后，就可以调取上面我们讲的那些方法)</span></span><br></pre></td></tr></table></figure><p>// 时间格式的字符串<br>‘2017-10-22’ (IE下识别不了)<br>‘2017/10/22 16:15:34’<br>‘1508659621314’(如果传递的是距离1970年那个毫秒查，也可以识别转换的,但是只能是数字，不能是字符串)<br> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Data-是日期类&quot;&gt;&lt;a href=&quot;#Data-是日期类&quot; class=&quot;headerlink&quot; title=&quot;Data 是日期类&quot;&gt;&lt;/a&gt;Data 是日期类&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;通过它可以对时间进行处理&lt;/p&gt;
&lt;/blockquote
      
    
    </summary>
    
      <category term="JavaScript基础入门" scheme="http://yoursite.com/categories/JavaScript%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/"/>
    
    
      <category term="JavaScript基础入门" scheme="http://yoursite.com/tags/JavaScript%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>8.字符串及常用的方法</title>
    <link href="http://yoursite.com/2019/04/10/JavaScript%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/8%20%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8F%8A%E5%B8%B8%E7%94%A8%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2019/04/10/JavaScript基础入门/8 字符串及常用的方法/</id>
    <published>2019-04-10T05:10:04.000Z</published>
    <updated>2019-06-06T15:45:14.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在js中用单(双)引号包裹起来的都是字符串</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var str = &apos;welcome to credan!&apos;</span><br></pre></td></tr></table></figure><p>字符串就是由零到多个字符串组成的</p><p>第一个字符索引0<br>第二个字符索引1<br>…<br>有length的属性，存储的是当前字符串中字符的个数(字符串的长度)</p><p>以数字作为索引，从零开始的</p><p>str[0] -&gt; ‘w’ 第一个字符<br>strlength-&gt; 46<br>str[str.length-1] -&gt; ‘!’ 最后一个字符<br>str[100] -&gt; undefined 如果指定的索引不存在获取的结果是undefined</p><p>真实项目中，我们经常操作字符串，此时我们需要掌握常用的一些字符床操作方法</p><blockquote><p>console.dir(String.prototype)</p></blockquote><p>charAt &amp;&amp; charCodeAt</p><blockquote></blockquote><h2 id="str-charCodeAt-索引"><a href="#str-charCodeAt-索引" class="headerlink" title="str.charCodeAt(索引)"></a>str.charCodeAt(索引)</h2><p>在charAt 基础上，把获取的字符变为Unicode编码值(对应ASCll码表)</p><ul><li>48-57 0-9</li><li>65-90 A-Z</li><li>97-122 a-z</li><li>…</li></ul><p>String.fromCharCode(十进制的Unicode值)，把值按照ascll码表中的信息，转为原有字符，charCodeAt正好对应<br><br><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1553008294829-62711c49-3c5a-449f-aed3-3f1c718032bd.png#align=left&display=inline&height=153&name=image.png&originHeight=306&originWidth=680&size=52212&status=done&width=340" alt="image.png"></p><h2 id="substr-amp-amp-substring-amp-amp-slice"><a href="#substr-amp-amp-substring-amp-amp-slice" class="headerlink" title="substr &amp;&amp; substring &amp;&amp; slice"></a>substr &amp;&amp; substring &amp;&amp; slice</h2><ul><li>实现字符串截取的三个办法</li><li>str.substr(n.m) : 从索引n开始，截取m个字符</li><li>str.substring(n,m):从索引n开始，截取到索引为m处(包含m)，把找到的部分截取</li><li>str.slice(n,m):和substring语法意义，区别在于slice支持一负数做索引</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1553008704722-782c7139-f3ba-4a79-8488-3603bda3135b.png#align=left&display=inline&height=183&name=image.png&originHeight=366&originWidth=460&size=70209&status=done&width=230" alt="image.png"></p><p>当索引是负数的时候，浏览器在处理的时候，是用字符串的总长度加上负数索引，然后按照正数处理操作</p><p>细节:</p><ul><li>如果只传递了n(str.substr(n)/str.substring(n)),相当于索引n开始的一直截取到字符串的末尾</li><li>如果传递的索引超出最大限制，也是吧能截取的部分截取掉即可</li><li>如果一个参数都不传递:相当于吧证书字符串都截取(字符串的克隆)</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1553008990121-ada3ebf4-1471-4f9e-903c-18fb84a143ed.png#align=left&display=inline&height=212&name=image.png&originHeight=424&originWidth=700&size=200574&status=done&width=350" alt="image.png"></p><p>indexOf &amp;&amp; lastIndexOf</p><ul><li>str.indexOf 获取当前字符在字符串中第一次出现位置的索引</li><li>str.lastIndexOf 获取的是最后一次出现位置的索引</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1553009435307-f79d0556-5031-4bf0-8923-60844406763a.png#align=left&display=inline&height=134&name=image.png&originHeight=268&originWidth=680&size=63046&status=done&width=340" alt="image.png"></p><blockquote><p>如果当前字符在字符串中没有出现过，结果是-1:我们根据这个规律可言验证一下当前字符串中是否包含某个字符</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">if(str.indexOf(&apos;?&apos;)===-1)&#123;</span><br><span class="line">// =&gt; 没有出现过</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if(str.indexOf(&apos;?&apos;)&gt;=-1)&#123;</span><br><span class="line">// =&gt; 出现过</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="split"><a href="#split" class="headerlink" title="split"></a>split</h2><blockquote><p>str.split 按照某个字符串分成数组中的某一项，和数组中的join方法是对应</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1553009620417-1162e2ed-dd4c-47c0-994f-a5c532df1c54.png#align=left&display=inline&height=147&name=image.png&originHeight=294&originWidth=396&size=64417&status=done&width=198" alt="image.png"></p><h2 id="replace"><a href="#replace" class="headerlink" title="replace"></a>replace</h2><blockquote><p>str.replace 实现字符的替换<br>执行一次replace 只能替换一次，如果有好几个都需要替换，在不适用正则的情况下，我们需要执行很多次replace</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1553009732430-9c95ed06-0e1b-4140-aabb-9d935ac7932f.png#align=left&display=inline&height=143&name=image.png&originHeight=286&originWidth=476&size=113815&status=done&width=238" alt="image.png"></p><blockquote><p>有些需求及时执行很多次repalce也实现不了，此时需要使用正则处理，真实项目中replace一般都是和正则搭配使用的</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1553009814591-925001c7-48f4-4a3c-8dde-0e6d338e6535.png#align=left&display=inline&height=176&name=image.png&originHeight=352&originWidth=560&size=238758&status=done&width=280" alt="image.png"></p><h2 id="trim-amp-amp-trimLeft-amp-amp-trimRight"><a href="#trim-amp-amp-trimLeft-amp-amp-trimRight" class="headerlink" title="trim &amp;&amp; trimLeft &amp;&amp; trimRight"></a>trim &amp;&amp; trimLeft &amp;&amp; trimRight</h2><ul><li>str.trimLeft : 去除字符串开始的口空格</li><li>str.trimRight : 去除字符串结尾的口空格</li><li>str.trim 去除字符串首位的空格</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1553009902075-a5b83b2e-7afa-4211-8e40-80473d5c2505.png#align=left&display=inline&height=164&name=image.png&originHeight=328&originWidth=454&size=60432&status=done&width=227" alt="image.png"></p><blockquote><p>获取地址栏的值</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">queryURLPrameter</span>(<span class="params">url</span>)</span>&#123;</span><br><span class="line"><span class="comment">// =&gt; url 传递的参数</span></span><br><span class="line">  <span class="keyword">var</span> quesIndex = url.indexOf(<span class="string">'?'</span>),</span><br><span class="line">   obj = &#123;&#125;</span><br><span class="line">  <span class="keyword">if</span>(quesIndex === <span class="number">-1</span>)&#123; <span class="comment">// url中没有问号传参 直接返回空</span></span><br><span class="line">  retrun obj;</span><br><span class="line">  &#125;</span><br><span class="line">  url = url.substr(quesIndex + <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">var</span> ary = url.split(<span class="string">'&amp;'</span>);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i =<span class="number">0</span>;i&lt;ary.length;i++)&#123;</span><br><span class="line">  <span class="keyword">var</span> curAry = ary[i].split(<span class="string">'='</span>);</span><br><span class="line">    obj[curAry[<span class="number">0</span>]] = curAry[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> obj</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span>.prototype.myQueryURLParameter = <span class="function"><span class="keyword">function</span></span></span><br><span class="line"><span class="function"><span class="title">myQueryURLParamter</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> obj = <span class="regexp">/([^=?&amp;]+)=([^=?&amp;]+)/g</span>;</span><br><span class="line">  <span class="keyword">this</span>.replace(reg,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> arg = argments;</span><br><span class="line">    obj[arg[<span class="number">1</span>]] = arg[<span class="number">2</span>]</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'https://www/baidu.com/s?wd=1233213&amp;issp=1'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.myQueryURLParameter());</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;在js中用单(双)引号包裹起来的都是字符串&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line
      
    
    </summary>
    
      <category term="JavaScript基础入门" scheme="http://yoursite.com/categories/JavaScript%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/"/>
    
    
      <category term="JavaScript基础入门" scheme="http://yoursite.com/tags/JavaScript%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>7.Math的常用方法</title>
    <link href="http://yoursite.com/2019/04/10/JavaScript%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/7%20Math%E7%9A%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2019/04/10/JavaScript基础入门/7 Math的常用方法/</id>
    <published>2019-04-10T03:10:04.000Z</published>
    <updated>2019-06-06T15:42:55.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h2><blockquote><p>但是他是对象数据类型的</p></blockquote><ul><li>‘object’</li><li>Math对象中给我们提供了很多常用操作数字的方法</li><li>console.dir(Math) // 查看所有方法</li></ul><h3 id="abs"><a href="#abs" class="headerlink" title="abs"></a><code>abs</code></h3><blockquote><p>Math.abs 取绝对值</p></blockquote><h3 id="cell-floor"><a href="#cell-floor" class="headerlink" title="cell / floor"></a><code>cell / floor</code></h3><blockquote><p>cell: 向上取整<br>floor: 向下取整</p></blockquote><h3 id="round"><a href="#round" class="headerlink" title="round"></a><code>round</code></h3><blockquote><p>round: 四舍五入</p></blockquote><h3 id="random"><a href="#random" class="headerlink" title="random"></a><code>random</code></h3><blockquote><p>random: 获取一个[0,1]之间的一个随机小数</p></blockquote><h3 id="max-minx"><a href="#max-minx" class="headerlink" title="max/minx"></a><code>max/minx</code></h3><blockquote><p>max 获取一组值中的最大值<br>minx 获取一组值中的最小值</p></blockquote><h3 id="PI"><a href="#PI" class="headerlink" title="PI"></a><code>PI</code></h3><blockquote><p>Math.PI 获取圆周率</p></blockquote><h3 id="pow-sqrt"><a href="#pow-sqrt" class="headerlink" title="pow / sqrt"></a><code>pow / sqrt</code></h3><blockquote><p>pow  获取一个值的多少幂<br>sqrt  获取一个值的开平方</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;数学函数&quot;&gt;&lt;a href=&quot;#数学函数&quot; class=&quot;headerlink&quot; title=&quot;数学函数&quot;&gt;&lt;/a&gt;数学函数&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;但是他是对象数据类型的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;‘object’&lt;/
      
    
    </summary>
    
      <category term="JavaScript基础入门" scheme="http://yoursite.com/categories/JavaScript%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/"/>
    
    
      <category term="JavaScript基础入门" scheme="http://yoursite.com/tags/JavaScript%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>6.JS的DOM获取节点</title>
    <link href="http://yoursite.com/2019/04/09/JavaScript%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/6%20JS%E7%9A%84DOM%E8%8E%B7%E5%8F%96%E8%8A%82%E7%82%B9/"/>
    <id>http://yoursite.com/2019/04/09/JavaScript基础入门/6 JS的DOM获取节点/</id>
    <published>2019-04-09T09:10:04.000Z</published>
    <updated>2019-06-06T15:40:50.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>DOM:document object model 文档对象模型，提供一些属性和方法可以让我们去操作DOM元素</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1552464509901-7b6d49d4-6147-4355-9eed-3fa8568b4659.png#align=left&display=inline&height=150&name=image.png&originHeight=300&originWidth=450&size=41767&status=done&width=225" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1552490736429-afc8138d-9713-4b29-9ec0-b80238f4d94f.png#align=left&display=inline&height=538&name=image.png&originHeight=1076&originWidth=1816&size=601570&status=done&width=908" alt="image.png"></p><h2 id="节点介绍"><a href="#节点介绍" class="headerlink" title="节点介绍"></a>节点介绍</h2><blockquote><p>node 节点，浏览器默认在一个html页面中的所有内容都是节点(包括标签、注解、文字文本等)</p></blockquote><ul><li>元素节点:HTML标签</li><li>文本节点:文字内容(大部分浏览器会把空格和换行也当做文本节点)</li><li>注解节点</li><li>document文档节点</li></ul><blockquote><p>元素节点</p></blockquote><ul><li>nodeType:1<ul><li>属性含有某个节点的名称</li></ul></li><li>nodeName: 大写标签名(在部分浏览器的怪异模式下，我们写的标签名是小写，它获取的就是小写…)<ul><li>对于元素节点，因为本身不直接包含文本，所以nodeValue是不可用的。当然你也可以在示例中自己写试试看有什么结果出现。</li><li>对于文本节点，nodeValue=文本值</li><li>对于属性节点，nodeValue=属性值 </li></ul></li><li>nodeValue:null<ul><li>对于元素节点，nodeType=1</li><li>对于文本节点，nodeType=3</li><li>对于属性节点，nodeType=2</li><li>对于注释元素，nodeType=8</li><li>对于文档元素，nodeType=9</li></ul></li></ul><p>[curEle].tagName:获取当前元素的标签名(获取的标签名一般都是大写)</p><blockquote><p>文本节点</p></blockquote><p>nodeType:3<br>nodeName:#text<br>nodeValue:文本内容</p><blockquote><p>注释节点</p></blockquote><p>nodeType:8<br>nodeName:#comment<br>nodeValue:注释内容</p><blockquote><p>文档节点</p></blockquote><p>nodeType:9<br>nodeName:#document<br>nodeValue:null</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">--</span> <span class="attr">div</span>#<span class="attr">box</span>&gt;</span>(ul&gt;li&#123;0$&#125;*3)+div&#123;内容$&#125;*3--&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>01<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>02<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>03<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>内容1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>内容2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>内容3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="获取dom元素"><a href="#获取dom元素" class="headerlink" title="获取dom元素"></a>获取dom元素</h2><h3 id="document-getElementById-一个元素"><a href="#document-getElementById-一个元素" class="headerlink" title="document.getElementById 一个元素"></a>document.getElementById 一个元素</h3><ul><li>此方法的上下文只能document</li><li>一个html页面中元素的id理论上是不能重复的,如果页面中ID重复了，我们获得结果第一个id对应的元素对象</li><li>在ie7更低的版本浏览器中，会把表单元素的name值当做id来识别使用(项目中尽量不要让表单的name和其他元素的id相同)</li><li>如果我们把js放在结构的下面，我们可以直接使用id值获取这个元素(不需要通过getElementById获取)，而且这种方式会把页面中所有id是他的元素都获取到(元素对象，或者集合) =&gt; 不推荐</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"box1"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">   <span class="built_in">console</span>.log(box1)    <span class="comment">// -&gt; [div#box1, div#box1, box1: div#box1]</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"myInput"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">size</span>=<span class="string">"20"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> x=<span class="built_in">document</span>.getElementsByName(<span class="string">"myInput"</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="document-getElementClassName-元素集合"><a href="#document-getElementClassName-元素集合" class="headerlink" title="document.getElementClassName 元素集合"></a>document.getElementClassName 元素集合</h3><ul><li>上下文是可以自己来指定</li><li>获取到的结果是一个元素集合(类数组集合)</li></ul><ul><li>获取的结果是集合，哪怕集合中只有一项，我们想要操作的是这一项(元素对象)，需要先从集合中获取出来，然后再操作</li><li>但是真实的项目中我们经常会通过样式类名获取元素，getElementClassName这个方法在ie6-8不兼容的</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;input name=<span class="string">"myInput"</span> type=<span class="string">"text"</span> size=<span class="string">"20"</span>/&gt;<span class="xml"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  var x=document.getElementsByName("input");</span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">var bodyBox = document.getElementsByTagName('body');</span></span><br><span class="line"><span class="xml">bodyBox[0].getElementsByTagName('div');</span></span><br></pre></td></tr></table></figure><h3 id="document-getElementsTagName-元素集合"><a href="#document-getElementsTagName-元素集合" class="headerlink" title="document.getElementsTagName 元素集合"></a>document.getElementsTagName 元素集合</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"myInput"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">size</span>=<span class="string">"20"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> x=<span class="built_in">document</span>.getElementsByName(<span class="string">"input"</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="document-getElementsByName-节点集合"><a href="#document-getElementsByName-节点集合" class="headerlink" title="document.getElementsByName 节点集合"></a>document.getElementsByName 节点集合</h3><blockquote><p>通过元素的NAME属性值获取一组元素（类数组：节点集合NodeList）<br>他的上下文只能是document</p></blockquote><ul><li>IE浏览器只能识别表单元素的name属性值，所以我们这个方法一般都用来操作表单元素的</li><li>获取html获得body的元素对象<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"myInput"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">size</span>=<span class="string">"20"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"> <span class="keyword">var</span> x=<span class="built_in">document</span>.getElementsByName(<span class="string">"myInput"</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="domcument-domcumentElement-获取整个html的对象"><a href="#domcument-domcumentElement-获取整个html的对象" class="headerlink" title="domcument.domcumentElement 获取整个html的对象"></a>domcument.domcumentElement 获取整个html的对象</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.documentElement.clientWidth||<span class="built_in">document</span>.body.clientWidth</span><br><span class="line"><span class="comment">// 获取当前浏览器可视区域的宽度(当前页面一个屏幕的宽度)</span></span><br><span class="line"><span class="comment">// =&gt;clientHieght 获取高度</span></span><br></pre></td></tr></table></figure><h3 id="domcument-body-获取body对象"><a href="#domcument-body-获取body对象" class="headerlink" title="domcument.body 获取body对象"></a>domcument.body 获取body对象</h3><h3 id="domcument-head-获取整个head对象"><a href="#domcument-head-获取整个head对象" class="headerlink" title="domcument.head 获取整个head对象"></a>domcument.head 获取整个head对象</h3><h3 id="context-querySelector-一个元素对象-context-querySelectorAll-获取元素集合"><a href="#context-querySelector-一个元素对象-context-querySelectorAll-获取元素集合" class="headerlink" title="[context]querySelector  一个元素对象 / [context]querySelectorAll 获取元素集合"></a>[context]querySelector  一个元素对象 / [context]querySelectorAll 获取元素集合</h3><ul><li>ie6-8不兼容，而且没有特别好的办法处理他的兼容，所以这两个方法一般多用于移动端开发使用</li></ul><p>querySelector 获取一个元素对象<br>querySelectorAll 获取的一个元素集合<br>只要css支持的选择器，这里大部分都支持</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">'#box1'</span>);</span><br><span class="line"><span class="built_in">document</span>.querySelectorAll(<span class="string">'.box1'</span>);</span><br><span class="line"><span class="built_in">document</span>.querySelectorAll(<span class="string">'div'</span>);</span><br><span class="line"><span class="built_in">document</span>.querySelectorAll(<span class="string">'body&gt;div'</span>);</span><br><span class="line"><span class="built_in">document</span>.querySelectorAll(<span class="string">'#box1 li'</span>);</span><br></pre></td></tr></table></figure><h2 id="节点关系属性"><a href="#节点关系属性" class="headerlink" title="节点关系属性"></a>节点关系属性</h2><blockquote><p>节点是用来描述页面中每一部门之间关系的,只要我可以获取页面中的一个页面，那么我就可以通过相关的属性和方法获取页面中所有的节点</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1552635822022-57c9c5f8-f1bb-4e19-bd32-ce2c10156817.png#align=left&display=inline&height=175&name=image.png&originHeight=350&originWidth=764&size=48181&status=done&width=382" alt="image.png"></p><h3 id="childNodes"><a href="#childNodes" class="headerlink" title="childNodes"></a>childNodes</h3><blockquote><p>获取当前元素所有的子节点(节点集合:类数组)<br>注:不仅仅是元素子节点，文本、注释等都会包含在内:子节点说明只是在儿子辈分中查找</p></blockquote><h3 id="children"><a href="#children" class="headerlink" title="children"></a>children</h3><blockquote><p>获取所有的元素子节点(元素集合)<br>在IE6-8下获取的结果和标准浏览器中有区别(IE6-8中会把注释点当做元素节点获取到)</p></blockquote><h3 id="pareNode"><a href="#pareNode" class="headerlink" title="pareNode"></a>pareNode</h3><blockquote><p>获取当前元素的父节点(元素对象)</p></blockquote><h3 id="previousibing"><a href="#previousibing" class="headerlink" title="previousibing"></a>previousibing</h3><blockquote><p>获取当前节点的上一个各个节点上一个哥哥节点(不一定是元素节点也可能是文本或者注释)</p></blockquote><h3 id="nextibling"><a href="#nextibling" class="headerlink" title="nextibling"></a>nextibling</h3><blockquote><p>获取当前节点的下一个弟弟节点</p></blockquote><h3 id="previousElementbling"><a href="#previousElementbling" class="headerlink" title="previousElementbling"></a>previousElementbling</h3><blockquote><p>获取当前节点的上一个哥哥元素节点</p></blockquote><h3 id="nextElementsIbling"><a href="#nextElementsIbling" class="headerlink" title="nextElementsIbling"></a>nextElementsIbling</h3><blockquote><p>获取当前节点下一个弟弟元素节点<br>IE6-8不兼容</p></blockquote><h3 id="firstChild"><a href="#firstChild" class="headerlink" title="firstChild"></a>firstChild</h3><blockquote><p>当前元素所有子节点中的第一个(也不一定是元素节点，可能是文本和注释)</p></blockquote><h3 id="lastChild"><a href="#lastChild" class="headerlink" title="lastChild"></a>lastChild</h3><blockquote><p>当前元素多有子节点中的最后一个<br>fistElementChild lastElementChild(IE6-8兼容)</p></blockquote><h2 id="创建和增加DOM元素"><a href="#创建和增加DOM元素" class="headerlink" title="创建和增加DOM元素"></a>创建和增加DOM元素</h2><blockquote><p>真实项目中，我们偶尔会在js中动态创建html标签，然后把其增加到页面中</p></blockquote><h3 id="document-createElement"><a href="#document-createElement" class="headerlink" title="document.createElement"></a>document.createElement</h3><blockquote><p>在js中动态创建一个html标签</p></blockquote><h3 id="appendChild"><a href="#appendChild" class="headerlink" title="appendChild"></a>appendChild</h3><blockquote><p>容器.appendChild(新元素)<br>把当前创建的新元素添加到容器的末尾位置</p></blockquote><h3 id="inserBefore"><a href="#inserBefore" class="headerlink" title="inserBefore"></a>inserBefore</h3><blockquote><p>容器.inserBefore(新元素、老元素)<br>在当前容器中，把新创建的元素增加到老元素之前</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建</span></span><br><span class="line"><span class="keyword">var</span> oDiv = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">oDiv.id=<span class="string">'div1'</span>;</span><br><span class="line">oDiv.className = <span class="string">'box'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加到页面中</span></span><br><span class="line"><span class="built_in">document</span>.body.appendChild(oDiv);</span><br><span class="line"><span class="built_in">document</span>.body.inserBefore(oDiv,box2);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> link = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>);</span><br><span class="line">link.href = <span class="string">'http://www.baidu.com?name=1&amp;age=2#haha'</span></span><br><span class="line"></span><br><span class="line">consloe.dir(link);</span><br><span class="line"><span class="comment">// hash:存储饿哈希值 '#haha'</span></span><br><span class="line"><span class="comment">// hostname:域名 'www.baidu.com'</span></span><br><span class="line"><span class="comment">// pathname:路径 '/stu/'</span></span><br><span class="line"><span class="comment">// protocol:协议 'http:'</span></span><br><span class="line"><span class="comment">// search:问号传递参数值 '?nname=1&amp;age=2'</span></span><br></pre></td></tr></table></figure><p>真实项目中很多需要通过动态创建元素来完成的，其中有一个需求:解析一个url地址每一部分的信息(包括问号传值的参数值)</p><ul><li>纯字符串拆分截取</li><li>编写强大的正则，捕获到需要的结果</li><li>通过动态创建一个a标签，利用a标签的一些内置属性来分别获取每一部分的内容</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">queryURLParameter</span>(<span class="params">url</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> link = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>);</span><br><span class="line">  link.href=url;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> search = link.search,</span><br><span class="line">  obj = &#123;&#125;<span class="string">'</span></span><br><span class="line"><span class="string">  if(search.length===0) return;</span></span><br><span class="line"><span class="string">  search = search.substr(1).split(/&amp;|=/g);</span></span><br><span class="line"><span class="string">  for(var i=0;i&lt;search.length;i+=2)&#123;</span></span><br><span class="line"><span class="string">  var key = search[i],</span></span><br><span class="line"><span class="string">    value = search[i+1];</span></span><br><span class="line"><span class="string">    obj[key]=value;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  link = null;</span></span><br><span class="line"><span class="string">  return obj;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="修改删除克隆DOM元素"><a href="#修改删除克隆DOM元素" class="headerlink" title="修改删除克隆DOM元素"></a>修改删除克隆DOM元素</h2><h3 id="removeChild"><a href="#removeChild" class="headerlink" title="removeChild"></a>removeChild</h3><ul><li>容器.removeChild(元素)</li><li>在当前容器中把每一个元素移出掉</li></ul><h3 id="replaceChild"><a href="#replaceChild" class="headerlink" title="replaceChild"></a>replaceChild</h3><ul><li>容器.removeChild(新元素，老元素)</li><li>把原有的元素克隆一份一模一样的，false:只克隆当前元素本身，true:深度克隆，吧当前元素本身以及元素的所有后代都进行克隆<h3 id="set-get-remove-Attribute"><a href="#set-get-remove-Attribute" class="headerlink" title="[set/get/remove]Attribute"></a>[set/get/remove]Attribute</h3></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">给当前元素设置/获取/移出属性的(一般操作的都是它的自定义属性)</span><br><span class="line">box.setAttribute(<span class="string">'myIndex'</span>,<span class="number">0</span>)</span><br><span class="line">box.getAttribute(<span class="string">'myIndex'</span>)</span><br><span class="line">box.removeAttribute(<span class="string">'myIndex'</span>)</span><br></pre></td></tr></table></figure><blockquote><p>使用xxx.index=0 和xxx.setAttribute(‘index’,0)这两种设置自定义属性的区别</p></blockquote><p>xxx.index : 是吧当前操作的元素当做一个普通对象，为其设置一个属性名<br>xxx.setAttribute:把元素当做特殊的元素对象来处理，设置的自定义属性是和页面结构中的DOM元素映射在一起的</p><p>JS中获取的元素对象，我们可以把他理解为两种角色:</p><ul><li>与页面HTML结构无关的普通对象</li><li>与页面HTML结构存在映射关系的元素对象</li></ul><p>元素对象中的内置属性，大部分都和页面的标签存在映射关系:<br>xxx.style.backgroundColor = ‘xxx’ 此时不仅把js中对象对应的属性值改变了，而且也会映射到页面的html标签上(标签中有一个style行内样式，元素的样式改变了)<br>xxx.className = ‘xxx’此时不仅是吧js对象中的属性值改变了，而且页面中的标签增加了class样式类(可以看见的)</p><p>元素对象中的自定义属性: xxx.index=0<br>仅仅是吧js对象中增加了一个属性名(自定义的)，和页面中的html没啥关系(在结构上看不见)</p><p>xxx.setAttribute:通过这种方式设置的自定义属性和之前提到的内置属性差不多，都是和html结构存在映射关系的(设置的自定属性可以呈现在结构上)</p><h2 id="6-6-面试题"><a href="#6-6-面试题" class="headerlink" title="6.6 面试题"></a>6.6 面试题</h2><blockquote><p>把当前页面中所有id叫做box1的都获取到</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> allList = <span class="built_in">document</span>.getElementsByTagName(*);</span><br><span class="line"><span class="keyword">var</span> result = []</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;allList.length;i++)&#123;</span><br><span class="line"><span class="keyword">var</span> item = allList[i];</span><br><span class="line">  item.id === <span class="string">'box1'</span>?result.push(item)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(result)</span><br></pre></td></tr></table></figure><blockquote><p>获取当前元素的上一个哥哥元素节点(兼容所有的浏览器)<br>curEle:current element</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 首先获取当前元素的上一个哥哥节点，判断当前获取的节点是否为元素节点(nodeType===1)</span></span><br><span class="line"><span class="comment">// 如果不是基于当前获取的节点，找他的上一个哥哥节点..(找几次不知道)一直到找到的节点是元素节点为止</span></span><br><span class="line"><span class="comment">// 如果在查找过程中，发现没有上一个哥哥节点，找到头了，则不再继续查找</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">prev</span>(<span class="params">curEle</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> p = curEle.previousSibling; <span class="comment">// 属性返回同一树层级中指定节点的前一个节点。</span></span><br><span class="line">  <span class="keyword">while</span>(p&amp;&amp;p.nodeType!==<span class="number">1</span>)&#123; <span class="comment">//p:p!=null</span></span><br><span class="line">    p = p.previousSibling;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 扩展</span></span><br><span class="line"><span class="comment">// next: 获取下一个弟弟元素节点</span></span><br><span class="line"><span class="comment">// prevAll:获取所有的哥哥元素节点</span></span><br><span class="line"><span class="comment">// nextAll:获取所有的弟弟元素节点</span></span><br><span class="line"><span class="comment">// siblings:获取所有的兄弟元素节点</span></span><br><span class="line"><span class="comment">// index:获取当前元素的兄弟中排名索引</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;DOM:document object model 文档对象模型，提供一些属性和方法可以让我们去操作DOM元素&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.nlark.com/yuque/0/2019/pn
      
    
    </summary>
    
      <category term="JavaScript基础入门" scheme="http://yoursite.com/categories/JavaScript%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/"/>
    
    
      <category term="JavaScript基础入门" scheme="http://yoursite.com/tags/JavaScript%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>5.JS中常见的操作的语句</title>
    <link href="http://yoursite.com/2019/04/09/JavaScript%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/5%20JS%E4%B8%AD%E5%B8%B8%E8%A7%81%E7%9A%84%E6%93%8D%E4%BD%9C%E7%9A%84%E8%AF%AD%E5%8F%A5/"/>
    <id>http://yoursite.com/2019/04/09/JavaScript基础入门/5 JS中常见的操作的语句/</id>
    <published>2019-04-09T08:10:04.000Z</published>
    <updated>2019-06-06T15:36:09.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="if、else-if-、else"><a href="#if、else-if-、else" class="headerlink" title="if、else if 、else"></a>if、else if 、else</h2><blockquote><p>判断操作语句</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件<span class="number">1</span>)&#123;</span><br><span class="line"><span class="comment">//=&gt;条件1成立执行的操作</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(条件<span class="number">2</span>)&#123;</span><br><span class="line"><span class="comment">//=&gt;上面条件不成立，条件2成立，执行的操作</span></span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">// =&gt; 以上条件都不成立执行的操作</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果好几个条件都成立了，只吧第一个成立的条件执行，后面成立的条件忽略不管<br>条件:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">A==B、A!=B、A&gt;B、A&lt;B</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(A)&#123;&#125; <span class="comment">// 先把A转换为布尔类型，判断真假以此来决定是否成立</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//否成立</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(A&gt;B&amp;&amp;A&lt;<span class="number">10</span>)&#123;&#125; <span class="comment">//只有两个小条件都是真，整体条件为真</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(A&gt;B||A&lt;<span class="number">10</span>)&#123;&#125;  <span class="comment">// 只要其中一个小条件成立，整体条件是真</span></span><br></pre></td></tr></table></figure><blockquote><p>BAT 面试题</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="built_in">parseFloat</span>(<span class="string">'width:12.5px'</span>);</span><br><span class="line"><span class="keyword">if</span>(num==<span class="number">12.5</span>)&#123; <span class="comment">// =&gt;NaN</span></span><br><span class="line">alert(<span class="number">12.5</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(num==<span class="literal">NaN</span>)&#123; <span class="comment">// NaN!=NaN</span></span><br><span class="line">alert(<span class="literal">NaN</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">typeof</span> num==<span class="string">'number'</span>)&#123; <span class="comment">// </span></span><br><span class="line">alert(<span class="number">0</span>)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">alert(<span class="string">"啥也不是"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h2><blockquote><p>条件？条件成立执行：条件不成立执行</p></blockquote><p>if(条件){}else : 三元运算符就是这种简单if..else..的另一种写法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">if</span>(num&gt;<span class="number">5</span>&amp;&amp;num&lt;<span class="number">10</span>)&#123;</span><br><span class="line">num++;<span class="comment">//累加1</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">num--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 修改成为三元运算符,如果条件成立或者不成立的某一种情况并不需要什么处理</span></span><br><span class="line"><span class="comment">// 我们空着语法不符合，我们使用null、undefined、void 0(就是undefined)占位就可以</span></span><br><span class="line">num&gt;<span class="number">5</span>&amp;&amp;num&lt;<span class="number">10</span>?num++:num--;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">if</span>(num&gt;<span class="number">5</span> &amp;&amp; num&lt;<span class="number">10</span>)&#123;</span><br><span class="line">num++;</span><br><span class="line">  <span class="keyword">break</span>;<span class="regexp">/continue;/</span><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// =&gt; 修改成为三元运算符</span></span><br><span class="line"><span class="comment">// 在三元运算符的操作中不能出现break、continue、return这样的关键词，所以我们无法用三目代替if、else</span></span><br><span class="line">num&gt;<span class="number">5</span> &amp;&amp; num&lt;<span class="number">10</span>?</span><br><span class="line">(num++,<span class="keyword">return</span>):<span class="literal">null</span>;</span><br></pre></td></tr></table></figure><h2 id="swith-case"><a href="#swith-case" class="headerlink" title="swith case"></a>swith case</h2><blockquote><p>swith case应用于if、else中一个变量在不同值情况下的不同操作</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num =<span class="number">10</span>;</span><br><span class="line"><span class="keyword">switch</span>(num)&#123;</span><br><span class="line"><span class="comment">//switch后面小括号中存放的是一个值(一般我们都写变量;把变量存储的值拿来用，有时候也可能是一个计算)</span></span><br><span class="line">  <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    <span class="comment">// case后面放的都是值，目的验证switch后面的值和哪一种case后面的值相等，相等的进行对应的处理</span></span><br><span class="line">  ...</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    <span class="comment">// 每一种case借宿后都要加break借宿当前的判断</span></span><br><span class="line">  <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">  ...</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    <span class="comment">// switch后面的值和每一种case情况对应的值都不相等，执行最后的default，类似于false</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>案例分析</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">switch</span>(num%<span class="number">2</span>)&#123;<span class="comment">//=&gt;先把取余操作进行运算，拿运算结果case比较</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">  num++;</span><br><span class="line">  <span class="keyword">break</span>;  <span class="comment">//不加break，不管后面的条件是够成立，都会继续向下执行，知道遇到break为止</span></span><br><span class="line">    <span class="comment">// 不加break，就可以实现||这样的操作</span></span><br><span class="line">  <span class="keyword">case</span>: <span class="number">2</span><span class="number">-1</span>: <span class="comment">//case后面也应该是值，此处先把2-1计算，把计算的结果和switch值比较</span></span><br><span class="line">  num--;</span><br><span class="line">  <span class="comment">// 最后一项可以不加break，不加也能跳出判断</span></span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">num%<span class="number">2</span>:让num存储的值除以<span class="number">2</span>去余数(<span class="number">0</span>或者<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>swich case 中的比较实用的”===”</p><ul><li>=:赋值，等号左边是变量，右边是值</li><li>==:比较，如果左边两边的类型不一样，浏览器默认转换为一样的然后再进行比较  ‘6’==6  =&gt; 6==6 =&gt;true</li><li>===:绝对相等，不仅要求值一样，并且类型也要完全一样</li></ul><h2 id="循环操作语句"><a href="#循环操作语句" class="headerlink" title="循环操作语句"></a>循环操作语句</h2><blockquote><p>循环，重复做一件事情</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(设置循环起始值；设置循环执行的条件；步长累加)&#123;</span><br><span class="line"><span class="comment">// 循环体:重复做的事情都是在循环体重</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>设置初始值</li><li>验证条件</li><li>条件成立，执行循环体:不成立，循环借宿</li><li>步长累加</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(;i&lt;<span class="number">5</span>;;)&#123;</span><br><span class="line">consloe.log(i);</span><br><span class="line">  <span class="comment">//没有步长累加，我们的i永远是0，循环条件永远成立“死循环”;</span></span><br><span class="line">  <span class="comment">//项目中不能出现死循环，一旦出现,循环下面的事情都做不了</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h3><blockquote><p>结束本轮循环，继续执行下一轮:循环体重continue后面的代码都不会在执行，它会直接的去执行步长，然后进行下一轮</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i+=<span class="number">2</span>)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(i)</span><br><span class="line">  <span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="break"><a href="#break" class="headerlink" title="break"></a>break</h3><blockquote><p>结束整个循环:循环体重一旦遇到break首先后面代码不执行了，而且步长累加也不执行了，循环都结束了</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for(var i=0;i&lt;5;i+=2)&#123;</span><br><span class="line">console.log(i)</span><br><span class="line">  break;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>BAT面试题</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>;i&lt;<span class="number">10</span>;i+=<span class="number">2</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(i&lt;<span class="number">5</span>)&#123;</span><br><span class="line">  i++;</span><br><span class="line">    <span class="keyword">continue</span>;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  i+=<span class="number">3</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(i) <span class="comment">// =&gt;10</span></span><br></pre></td></tr></table></figure><h3 id="for-in"><a href="#for-in" class="headerlink" title="for in"></a>for in</h3><blockquote><p>用来遍历(循环)对象键值对的</p></blockquote><ul><li>var key;var attr(attribute);</li><li>对象中有多少键值对，我们的for in 循环遍历多少次(多少次)</li><li>第一次循环key这个遍历存储的都是当前循环这个组键值队的属性名</li><li>key存储的值都是字符串格式的(不管属性名是否为数字)</li><li>在for in 循环的遍历时候，大部分浏览器都是先把对象中的键值对进行排序(把数字属性的排在前面，并且排列的时候安卓数字由小达大排列),其次在把非数字的属性名按照之前编写的顺序，循环的时候按照重新排列循序一次遍历(小数算作字母不要做数字)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">name</span>:wjw,<span class="attr">age</span>:<span class="number">8</span>,<span class="number">0</span>:<span class="string">'wjh'</span>,<span class="number">3</span>:<span class="string">'ylp'</span>,<span class="number">1</span>:<span class="string">'cx'</span>&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> obj)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'ok'</span>)</span><br><span class="line">    <span class="comment">// key 属性名 string</span></span><br><span class="line">    <span class="built_in">console</span>.log(obj.key)</span><br><span class="line">  <span class="comment">//获取obj中key这个属性对应的值 -&gt;undefined &lt;=&gt; obj['key']</span></span><br><span class="line">    <span class="built_in">console</span>.log(obj[key]);</span><br><span class="line">  <span class="comment">//-&gt;每一次循环把key变脸存储的值(当前遍历的属性名)获取到放在中括号中，获取obj对应的属性值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> obj)&#123;</span><br><span class="line">    <span class="keyword">if</span>(obj.hasOwnProperty(key))&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;if、else-if-、else&quot;&gt;&lt;a href=&quot;#if、else-if-、else&quot; class=&quot;headerlink&quot; title=&quot;if、else if 、else&quot;&gt;&lt;/a&gt;if、else if 、else&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;判
      
    
    </summary>
    
      <category term="JavaScript基础入门" scheme="http://yoursite.com/categories/JavaScript%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/"/>
    
    
      <category term="JavaScript基础入门" scheme="http://yoursite.com/tags/JavaScript%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>4.JS数据类型</title>
    <link href="http://yoursite.com/2019/04/09/JavaScript%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/4%20JS%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>http://yoursite.com/2019/04/09/JavaScript基础入门/4 JS数据类型/</id>
    <published>2019-04-09T08:10:04.000Z</published>
    <updated>2019-06-06T15:33:16.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="基本数据类型（值类型）"><a href="#基本数据类型（值类型）" class="headerlink" title="基本数据类型（值类型）"></a>基本数据类型（值类型）</h3><ul><li>Number  数字</li><li>String  字符串<ul><li>单引号包裹起来的都是字符串(单双号没有区别)</li></ul></li><li>Boolean  布尔<ul><li>true false =&gt; 布尔值只有两个值</li></ul></li><li>null 空对象指针</li><li>undefined  未定义</li></ul><h3 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h3><ul><li>{}  普通对象</li><li>[]  数组</li><li>/^$/ 正则</li><li>…</li></ul><h3 id="function数据类型"><a href="#function数据类型" class="headerlink" title="function数据类型"></a>function数据类型</h3><ul><li>funciotn fn (){}</li></ul><h2 id="数据类型检查"><a href="#数据类型检查" class="headerlink" title="数据类型检查"></a>数据类型检查</h2><ul><li>typeof<ul><li>用来检测数据类型的运算符</li></ul></li><li>instanceod<ul><li>检测某个实例是否属于这个类</li></ul></li><li>constructor <ul><li>获取当前实例的构造器</li></ul></li><li>Object prototype.toSting.call()<ul><li>获取当前实例的所属类信息</li></ul></li></ul><h3 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h3><p>操作符<br>typeof 是用来检测给定变量的数据类型的操作符。对一个值使用 typeof 操作符可能返回下列某个字符串：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"undefined"</span></span><br><span class="line"><span class="string">"boolean"</span></span><br><span class="line"><span class="string">"string"</span></span><br><span class="line"><span class="string">"number"</span></span><br><span class="line"><span class="string">"object"</span> <span class="comment">// 如果这个值是对象或者null "function"</span></span><br></pre></td></tr></table></figure><h2 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h2><blockquote><p>Boolean()</p></blockquote><ul><li>把其他数据类型的值转化为布尔类型</li><li>只有0、Nan、null、undefined这五个数据值转换为布尔类型的false，其余的都会变成true</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1552208177369-64842834-6cfb-404d-81bf-8aebbb3ccd6a.png#align=left&display=inline&height=305&name=image.png&originHeight=812&originWidth=412&size=151327&status=done&width=155" alt="image.png"></p><blockquote><p>叹号在JS中海油一个作用：取反，先把值转换为布尔类型，然后再去取反</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1552208350624-3136c9bb-8da6-4d5a-9f28-79a81a3a0b7d.png#align=left&display=inline&height=109&name=image.png&originHeight=218&originWidth=98&size=14063&status=done&width=49" alt="image.png"></p><p><code>!!</code></p><blockquote><p>在叹号取反的基础上取反，取反两次相当于没有操作，但是却已经其他类型值转化为布尔类型了，和Boolean是相同的效果  </p></blockquote><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><blockquote><p>在JS中单引号和双引号包起来的都是字符串</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">12</span> - &gt; number</span><br><span class="line"><span class="string">'12'</span> -&gt; string</span><br><span class="line"><span class="string">'[12,23]'</span> -&gt; string</span><br></pre></td></tr></table></figure><h3 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString()"></a>toString()</h3><p>第一种是使用几乎每个值都有的 toString()方法。多数情况下，调用 toString() 方法不必传递参数，但在调用数值的 toString()方法时，可以传递一个参数：输出数值的基数。默认情况下，toString() 方法以十进制格式返回数值的字符串表示。而通过传递基数，toString() 可以输出二进制、八进制、十六进制等。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line">alert(num.toString());    <span class="comment">// "10"</span></span><br><span class="line">alert(num.toString(<span class="number">2</span>));  <span class="comment">// "1010"</span></span><br><span class="line">alert(num.toString(<span class="number">8</span>));  <span class="comment">// "12"</span></span><br><span class="line">alert(num.toString(<span class="number">10</span>));  <span class="comment">// "10"</span></span><br><span class="line">alert(num.toString(<span class="number">16</span>));  <span class="comment">// "A"</span></span><br></pre></td></tr></table></figure><p>常用方法<br><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1552212096220-2e8a4a63-4ef0-4168-9a4a-466a64dfe772.png#align=left&display=inline&height=189&name=image.png&originHeight=276&originWidth=266&size=51778&status=done&width=182" alt="image.png"></p><h3 id="number数字"><a href="#number数字" class="headerlink" title="number数字"></a>number数字</h3><blockquote><p>0 12-22 12.5 js中多增加了一个number类型的数据NaN  typeof NaN -&gt; Number</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> intNum = <span class="number">55</span>; <span class="comment">// 十进制整数 var octalNum1 = 070; // 八进制的56</span></span><br><span class="line"><span class="keyword">var</span> octalNum1 = <span class="number">079</span>; <span class="comment">// 无效的八进制数值——解析为79 </span></span><br><span class="line"><span class="keyword">var</span> octalNum1 = <span class="number">08</span>; <span class="comment">// 无效的八进制数值——解析为8 </span></span><br><span class="line"><span class="keyword">var</span> hexNum1 = <span class="number">0xA</span>;  <span class="comment">// 十六进制的10</span></span><br><span class="line"><span class="keyword">var</span> hexNum2 = <span class="number">0x1F</span>; <span class="comment">// 十六进制的31</span></span><br></pre></td></tr></table></figure><blockquote><p>注意，八进制字面量在严格模式下是无效的，会导致抛出错误。</p></blockquote><h3 id="数值范围"><a href="#数值范围" class="headerlink" title="数值范围"></a>数值范围</h3><p>ECMAScript 能够表示的最小数值保存在 Number.MIN_VALUE 中——在多数浏览器中，这个值是 5e-324；能够 Number.MAX_VALUE 中——在大多数浏览器中，这个值是1.7976931348623157e+308。如果某次计算的结果得到了一个超过JavaScript 数值范围的值，那么这个数值将会自动转换为 Infinity 值，如果这个数值是负数，则会转换成 -Infinity（负无穷），如果这个数值是正数，则会转换成Infinity（正无穷）。要确定一个数值是不是有穷的，可以使用 isFinite() 函数。</p><h3 id="NaN"><a href="#NaN" class="headerlink" title="NaN"></a>NaN</h3><ul><li>not a numer : 不是一个数，但是属于number类型</li><li>NaN == NaN ： false , NaN 和任何其他值都不相等</li></ul><h3 id="isNaN"><a href="#isNaN" class="headerlink" title="isNaN()"></a>isNaN()</h3><ul><li>用来检测当前这个值是否是非有效数字，如果不是有效数字，检测的结果是true , 反之是有效数字则为false</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">isNaN</span>(<span class="number">0</span>)   <span class="comment">// -&gt;false</span></span><br><span class="line"><span class="built_in">isNaN</span>(<span class="literal">NaN</span>) <span class="comment">// -&gt;true</span></span><br></pre></td></tr></table></figure><ul><li>当我们使用isNaN检测值的时候，检测的值不是number类型的，浏览器默认的吧值先转换为number类型，任何再去检测</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">isNaN</span>(<span class="string">'12'</span>) <span class="comment">//-&gt;false</span></span><br></pre></td></tr></table></figure><h3 id="Number"><a href="#Number" class="headerlink" title="Number()"></a>Number()</h3><ul><li>把其他数据类型值转化成number类型的值</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Number</span>(<span class="string">'12'</span>) <span class="comment">// -&gt; 12</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="string">'12px'</span>) <span class="comment">// -&gt;NaN</span></span><br><span class="line"><span class="comment">// 在使用Number转换的时候只要字符串中出现任何一个非有效数字字符，最后的结果都是NaN</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Number</span>(<span class="literal">true</span>) <span class="comment">//-&gt; 1 </span></span><br><span class="line"><span class="built_in">Number</span>(<span class="literal">false</span>) <span class="comment">//-&gt; 0</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="literal">null</span>) <span class="comment">// -&gt; 0</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="literal">undefined</span>) <span class="comment">//-&gt;NaN</span></span><br></pre></td></tr></table></figure><ul><li>把引用数据类型转换成number，首先需要吧引用数据类型转为字符串（toString)，在把字符串转换为number即可</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Number</span>([]) <span class="comment">// -&gt; ""</span></span><br><span class="line"><span class="built_in">Number</span>([<span class="number">12</span>]) <span class="comment">// -&gt; 12</span></span><br><span class="line"><span class="built_in">Number</span>([<span class="number">12</span>,<span class="number">13</span>]) <span class="comment">// -&gt; 12,13 (,是非有效字符) -&gt; NaN</span></span><br><span class="line"><span class="built_in">Number</span>(&#123;<span class="attr">age</span>:<span class="number">12</span>&#125;) <span class="comment">// -&gt;NaN</span></span><br><span class="line"><span class="built_in">Number</span>(&#123;&#125;) <span class="comment">// -&gt; NaN</span></span><br></pre></td></tr></table></figure><h3 id="pareInt"><a href="#pareInt" class="headerlink" title="pareInt"></a>pareInt</h3><ul><li>也是吧其他数据类型值转换为number，和Number方法在处理字符串的时候有所区别</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Number</span>(<span class="string">'12px'</span>) <span class="comment">// -&gt; NaN</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">'12px'</span>) <span class="comment">// -&gt; 12</span></span><br></pre></td></tr></table></figure><ul><li>提取规则：从左到右依次查找有效数字字符，知道遇到非有效数字字符为止（不管后端是否还有，都不找了）</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(<span class="string">'12px13'</span>) <span class="comment">// -&gt; 12</span></span><br></pre></td></tr></table></figure><h3 id="数值转换"><a href="#数值转换" class="headerlink" title="数值转换"></a>数值转换</h3><p>处理整数最常用的还是 parseInt() ，它会忽略字符前面的空格，直到找到第一个非空格字符。如果第一个字符不是数字字符或者负号，parseInt() 就会返回 NaN；也就是说，用 parseInt() 转换空字符串会返回 NaN 。如果第一个字符是数字字符， parseInt() 会继续解析第二个字符，直到解析完所有后续字符或者遇到了一个非数字字符。如果字符以“0x”开头且后面跟数字字符，会被解析为 16 进制整数；<br>以“0”开头且后面跟数字字符，会被解析为 8 进制整数。下面给出一些例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num1 = <span class="built_in">parseInt</span>(<span class="string">"1234blue"</span>);   <span class="comment">// 1234</span></span><br><span class="line"><span class="keyword">var</span> num2 = <span class="built_in">parseInt</span>(<span class="string">""</span>);     <span class="comment">// NaN</span></span><br><span class="line"><span class="keyword">var</span> num3 = <span class="built_in">parseInt</span>(<span class="string">"0xA"</span>);    <span class="comment">// 10(十六进制)</span></span><br><span class="line"><span class="keyword">var</span> num4 = <span class="built_in">parseInt</span>(<span class="number">22.5</span>);   <span class="comment">// 22</span></span><br><span class="line"><span class="keyword">var</span> num5 = <span class="built_in">parseInt</span>(<span class="string">"70"</span>);     <span class="comment">// 70</span></span><br><span class="line"><span class="keyword">var</span> num6 = <span class="built_in">parseInt</span>(<span class="string">"0xf"</span>);    <span class="comment">// 15(十六进制)</span></span><br></pre></td></tr></table></figure><h3 id="pareFloat"><a href="#pareFloat" class="headerlink" title="pareFloat"></a>pareFloat</h3><ul><li>在pareInt的基础上可以识别小数点</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pareInt(<span class="string">'12.5px'</span>) -&gt; <span class="number">12</span></span><br><span class="line">pareFloat(<span class="string">'12.5px'</span>) -&gt; <span class="number">12.5</span></span><br></pre></td></tr></table></figure><h2 id="null-和undefined"><a href="#null-和undefined" class="headerlink" title="null 和undefined"></a>null 和undefined</h2><ul><li>null : 空，没有</li><li>undefined ：未定义，没有</li><li>“” : 空字符串，没有</li><li>0: 也可以理解为没有</li></ul><h3 id="空字符串和null的区别"><a href="#空字符串和null的区别" class="headerlink" title="空字符串和null的区别"></a>空字符串和null的区别</h3><ul><li>都是去去种树</li><li>空字符串属于去挖了个坑，但是没有种任何东西</li><li>null属于连坑都没挖</li><li>空字符串相对于null来说开辟了内存地址，消耗了那么一丢丢的性能</li></ul><h3 id="null和undefined的区别"><a href="#null和undefined的区别" class="headerlink" title="null和undefined的区别"></a>null和undefined的区别</h3><ul><li>null一般都是暂时没有，预期中以后会有的(可能以后也没有达到预期)，在js中null都是手动先赋值为null，后期我们在给其赋具体值</li><li>undefined:完全没有预料之内的</li></ul><h2 id="Object-对象"><a href="#Object-对象" class="headerlink" title="Object 对象"></a>Object 对象</h2><blockquote><p>ECMAScript 中的对象其实就是一组数据和功能的集合。对象可以通过执行 new 操作符后跟要创建的对象类型的名称来创建。而创建 Object 类型的实例并为其添加属性和（或）方法，就可以创建自定义对象，如下所示：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br></pre></td></tr></table></figure><p>每一个对象都是由零到多组 属性名（key键）：属性值(value值) 组成的,或者说有多组键值对组成的，每一组键值对中间用逗号分隔</p><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><blockquote><p>描述这个对象特点特征的</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj =&#123;<span class="attr">name</span>:<span class="string">'wjw'</span>,<span class="attr">age</span>:<span class="number">8</span>&#125;;</span><br></pre></td></tr></table></figure><h3 id="获取"><a href="#获取" class="headerlink" title="获取"></a>获取</h3><blockquote><p>某个属性名对应的属性值或者数字格式的</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">obj.name</span><br><span class="line">obj[<span class="string">'name'</span>]</span><br></pre></td></tr></table></figure><h3 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h3><blockquote><p>属性值可以是任何数据类型</p></blockquote><ul><li>对象名.属性名：忽略属性名的单双引号</li><li>对象名[属性名]：不能忽略单双引号</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果属性名是数字如何操作</span></span><br><span class="line">obj<span class="number">.0</span> 语法不支持</span><br><span class="line">obj[<span class="number">0</span>] / obj[<span class="string">'0'</span>] 两种都支持</span><br></pre></td></tr></table></figure><blockquote><p>如果操作的属性名在对象中不存在，获取的结果是undefined</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">obj.sex <span class="comment">// -&gt;undefined</span></span><br></pre></td></tr></table></figure><h3 id="设置-修改"><a href="#设置-修改" class="headerlink" title="设置/修改"></a>设置/修改</h3><blockquote><p>一个对象的属性名是不能重复的（唯一性），如果之前存在就是修改属性值的操作，反之不存在就是新的设置属性的操作</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">obj.sex = <span class="string">'男'</span>;</span><br><span class="line">obj[<span class="string">'age'</span>] = <span class="number">9</span>;</span><br></pre></td></tr></table></figure><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><h4 id="假删除-让其属性赋值为null，但是属性还是对象"><a href="#假删除-让其属性赋值为null，但是属性还是对象" class="headerlink" title="假删除:让其属性赋值为null，但是属性还是对象"></a>假删除:让其属性赋值为null，但是属性还是对象</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">obj.sex = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><h4 id="真删除-把整个属性都在对象中暴力移出"><a href="#真删除-把整个属性都在对象中暴力移出" class="headerlink" title="真删除:把整个属性都在对象中暴力移出"></a>真删除:把整个属性都在对象中暴力移出</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> obj.sex</span><br></pre></td></tr></table></figure><h3 id="基本数据类型-和-引用数据类型的区别"><a href="#基本数据类型-和-引用数据类型的区别" class="headerlink" title="基本数据类型 和 引用数据类型的区别"></a>基本数据类型 和 引用数据类型的区别</h3><blockquote><p>JS是运行在浏览器中的(内核引擎)，浏览器会为JS提供赖以生存的环境（提供给js代码执行的环境）=&gt; 全局作用域window(global)</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">12</span>;</span><br><span class="line"><span class="keyword">var</span> b = a; <span class="comment">// 把A变量存储的值赋值给B</span></span><br><span class="line">b = <span class="number">13</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> n =&#123;<span class="attr">name</span>:<span class="string">'wjh'</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> m = n;</span><br><span class="line">m.name = <span class="string">'wjw'</span></span><br><span class="line"><span class="built_in">console</span>.log(n.name)</span><br></pre></td></tr></table></figure><ul><li>基本数据类型是按值操作的：基本数据类型的赋值的时候，是直接把值赋值给变量即可</li><li>引用数据类型是按照空间地址（引用地址）来操作的: var n = {name:’wjw’}<ul><li>先创建一个变量n</li><li>浏览器首先会吧开辟一个新的存储控件（内存控件），目的是吧对象中需要存储的内容（键值对）分别的存储在这个空间中，为了方便后期找到这个空间，浏览器给空间设定一个地址（16进制）</li><li>把空间的地址赋值给了变量</li></ul></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1552297184317-5a20e4ac-2ac4-4b41-8388-31856879bd7d.png#align=left&display=inline&height=390&name=image.png&originHeight=780&originWidth=906&size=92890&status=done&width=453" alt="image.png"></p><p><a name="08ed45a7"></a></p><h3 id="4-9-function数据类型"><a href="#4-9-function数据类型" class="headerlink" title="4.9 function数据类型"></a>4.9 function数据类型</h3><blockquote><p>函数数据类型也要按照引用地址来操作的</p></blockquote><p>函数:具备一定功能的方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// =&gt; 创建函数:</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> 函数名(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">//=&gt; 函数体:实现某一个功能的具体JS代码</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// =&gt; 执行函数:相当于使用洗衣机洗衣服(如果函数只创建了，但是没有去执行，函数没有任何的意义)</span></span><br><span class="line"><span class="comment">// 函数名()</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">fn; <span class="comment">// =&gt; 输出函数本身</span></span><br><span class="line">fn(); <span class="comment">// =&gt; 把函数执行（吧函数体重实现功能的代码执行）</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1552306799475-e85f6b5c-ed1a-4793-8c0d-41d1d899d981.png#align=left&display=inline&height=221&name=image.png&originHeight=442&originWidth=876&size=270908&status=done&width=438" alt="image.png"></p><p>形参：形式参数(变量)，函数的入口<br>当我们创建一个函数想要实现个功能的时候，发现有一些材料不清楚，只有当函数运行的时候，别人传递给我，我才知道，此时我们就需要设定入口,让用户执行的时候通过入口把值把我们</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">num1,num2</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(num1+num2)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 实参:函数执行传递给函数的具体值就是实参</span></span><br><span class="line">fn(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">fn(<span class="number">10</span>,<span class="number">20</span>);</span><br></pre></td></tr></table></figure><h3 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h3><p>把其他数据类型转换为number类型<br>-&gt; isNaN、Number、pareInt、parseFloat<br>-&gt; 在进行数据加减乘除数学运算的时候</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// true -&gt; 1 false-&gt;0</span></span><br><span class="line"><span class="comment">// ''-&gt;0  '12'-&gt;12  '12px'-&gt;NaN/12</span></span><br><span class="line"><span class="comment">// '小伙子'-&gt;NaN</span></span><br><span class="line"><span class="comment">// null -&gt; 0 </span></span><br><span class="line"><span class="comment">// undefined-&gt; NaN</span></span><br><span class="line">&#123;&#125; /^$/ <span class="function"><span class="keyword">function</span>(<span class="params"></span>) -&gt;<span class="title">NaN</span></span></span><br><span class="line">[]</span><br><span class="line">[<span class="number">12</span>]-&gt;<span class="string">'12'</span>-&gt;<span class="number">12</span></span><br><span class="line">[<span class="string">'12,13'</span>]-&gt;<span class="string">'12,23'</span>-&gt;<span class="literal">NaN</span></span><br><span class="line"><span class="comment">// =&gt; 引用数据类型转换为数字</span></span><br><span class="line"><span class="comment">// 通过toString方法把数组转换为字符串，然后在调用Number转换为数字</span></span><br></pre></td></tr></table></figure><h3 id="JS中的数据运算"><a href="#JS中的数据运算" class="headerlink" title="JS中的数据运算"></a>JS中的数据运算</h3><ul><li>+、-、*、/加减乘除</li><li>除了加法有特殊性，其余的运算符都是数学运算，也是遇到非数字类型，需要把其转换为number再运算</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1-&apos;1&apos; -&gt; 0</span><br><span class="line">10*null -&gt; 0</span><br><span class="line">10/undefined -&gt; NaN</span><br><span class="line">10*[10]-&gt;100</span><br></pre></td></tr></table></figure><h3 id="加法的特殊性"><a href="#加法的特殊性" class="headerlink" title="加法的特殊性:"></a>加法的特殊性:</h3><ul><li>在遇到字符串的时候，+不是数学运算，而是字符串拼接，只要不遇到字符串就是数学运算</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1+&apos;1&apos; -&gt; &apos;11&apos;</span><br><span class="line">null+&apos;1&apos; -&gt; ‘null1’</span><br></pre></td></tr></table></figure><ul><li>字符串拼接:是把其它的值转换为字符串然后再拼接(toString)</li><li>其它数据类型的toString是直接的把值用单(双)引号包起来极客，只有对象的特殊性，对象的有特殊性，对象.toStirng===’[Object Object]</li></ul><h3 id="将其它数据类型转换为布尔类型"><a href="#将其它数据类型转换为布尔类型" class="headerlink" title="将其它数据类型转换为布尔类型"></a>将其它数据类型转换为布尔类型</h3><ul><li>Boolean、！、！！</li><li>在条件判断的时候、也是转换为布尔类型，然后验证条件的真假</li><li>只有0、NaN、空字符串、null、undefined五个转换为false、其余的都是转换为true</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[] -&gt; true</span><br><span class="line">-1 -&gt; true</span><br><span class="line"></span><br><span class="line">if(box)&#123;</span><br><span class="line">// =&gt; 首先把box变量存储的值获取到，转化为布尔类型，如果为true条件成立，反之不成立</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if(3+&apos;3px&apos;)&#123;</span><br><span class="line">// 条件成立: 3 + &apos;3px&apos; = &apos;33px&apos; </span><br><span class="line">&#125;</span><br><span class="line">if(3-&apos;3px&apos;)&#123;</span><br><span class="line">// 条件不成立: 3-&apos;3px&apos; = NaN</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在使用-进行比较的时候"><a href="#在使用-进行比较的时候" class="headerlink" title="在使用==进行比较的时候"></a>在使用==进行比较的时候</h3><blockquote><p>在使用==进行比较的时候，如果左右两边的数据不相同，浏览器默认转换为相同的类型，然后在比较(‘===’不会这样操作)</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 对象和对象: 应用数据类型比较的空间地址不一样，不是一个空间</span><br><span class="line">[] == [] -&gt; false</span><br><span class="line">var a =&#123;&#125;</span><br><span class="line">var b = a;</span><br><span class="line">a==b -&gt; true</span><br></pre></td></tr></table></figure><h3 id="对象和数字-吧对象转换成数字"><a href="#对象和数字-吧对象转换成数字" class="headerlink" title="对象和数字:吧对象转换成数字"></a>对象和数字:吧对象转换成数字</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[]== 0 -&gt; true</span><br><span class="line">(&#123;&#125;)=== NaN -&gt; false</span><br><span class="line">NaN和自己不相等和其它任何值都不相等</span><br></pre></td></tr></table></figure><h3 id="对象和字符串-把两边都转换为数字比较的"><a href="#对象和字符串-把两边都转换为数字比较的" class="headerlink" title="对象和字符串:把两边都转换为数字比较的"></a>对象和字符串:把两边都转换为数字比较的</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[]===&apos;&apos; -&gt; true</span><br></pre></td></tr></table></figure><h3 id="对象和布尔值-把两边都转换成数字"><a href="#对象和布尔值-把两边都转换成数字" class="headerlink" title="对象和布尔值:把两边都转换成数字"></a>对象和布尔值:把两边都转换成数字</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[]==true -&gt;  0==1 -&gt;false</span><br><span class="line">[]==false -&gt;  0==0 -&gt;true</span><br><span class="line">![]==false -&gt;  ![]  -&gt;把数组变成为布尔在取反=false</span><br><span class="line">false=false -&gt; true</span><br></pre></td></tr></table></figure><p>字符串和数字:字符串转换为数字<br>字符串和布尔:都转为数字<br>布尔和数字:布尔转换为数字</p><p>规律:两个等于号比较，左右两边数字值的类型不一样，浏览器会吧两边的类型都转换为数字然后再比较，但是null和undefined除外<br>null==undefined -&gt; true<br>null===undefined -&gt; false<br>null 和 undefined 和其它任何都不相等<br>null==0 -&gt; false null以及undefined和其它任何值都不相等</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;数据类型&quot;&gt;&lt;a href=&quot;#数据类型&quot; class=&quot;headerlink&quot; title=&quot;数据类型&quot;&gt;&lt;/a&gt;数据类型&lt;/h2&gt;&lt;h3 id=&quot;基本数据类型（值类型）&quot;&gt;&lt;a href=&quot;#基本数据类型（值类型）&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
      <category term="JavaScript基础入门" scheme="http://yoursite.com/categories/JavaScript%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/"/>
    
    
      <category term="JavaScript基础入门" scheme="http://yoursite.com/tags/JavaScript%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>3.JS定义值</title>
    <link href="http://yoursite.com/2019/04/09/JavaScript%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/3%20JS%E5%AE%9A%E4%B9%89%E5%80%BC/"/>
    <id>http://yoursite.com/2019/04/09/JavaScript基础入门/3 JS定义值/</id>
    <published>2019-04-09T07:10:04.000Z</published>
    <updated>2019-06-06T15:27:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>语法<br>ECMAScript 的语法大量借鉴了 C 及其他类 C 语言（如 Perl 和 Java）的语法。<br>区分大小写</p><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单行注释</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 这是一个多行</span></span><br><span class="line"><span class="comment">*（块级）注释</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h2><p>严格模式<br>ES5 引入了严格模式的概念，在严格模式下，ES3 中的一些不确定行为将得到处理，而且队某些不安全的操作也会抛出错误。要在整个脚本中启用严格模式，可以在顶部添加如下代码：<br>这行代码看起来像是字符串，而且也没有赋值给任何变量，但其实它是一个编译指<br>示（pragma），用于告诉支持的JavaScript引擎切换到严格模式。在函数内部的上方包含这条编译指示，也可以指定函数在严格模式下执行:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="meta"> "use strict"</span>;  <span class="comment">//函数体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="变量、常量"><a href="#变量、常量" class="headerlink" title="变量、常量"></a>变量、常量</h2><blockquote><p>变量是可以变得<br>常量是不可变的</p></blockquote><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><ul><li>变量其实只是一个无意义的名字，它所代表的意义都是其存储的那个值</li><li>让原有的num变量存储的值修改为13（变量只能代表一值）</li></ul><p>js定义变量的方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// var 变量名 = 值;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">12</span>;</span><br><span class="line"><span class="keyword">var</span> name = <span class="string">'wjw'</span></span><br></pre></td></tr></table></figure><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><ul><li>任何一个具体的数据都是常量，例如12是个常量</li><li>和变量累死，我们设置一个常量（也就是一个名字），给其存储一个值，但是这个存储的值不能修改</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> num = <span class="number">12</span>;</span><br></pre></td></tr></table></figure><h2 id="JS中命名规范"><a href="#JS中命名规范" class="headerlink" title="JS中命名规范"></a>JS中命名规范</h2><ul><li>JS中严格区分大小写</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> test = <span class="string">'wjw'</span>;</span><br><span class="line"><span class="keyword">var</span> Test = <span class="string">'wjh'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(test);</span><br><span class="line"><span class="comment">// 输出test</span></span><br></pre></td></tr></table></figure><ul><li>遵循国际命名规则”驼峰命名法”<blockquote><p>第一个单词首字母小写，其余每一个有意义单词首字母大写</p></blockquote></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> studentInfo; <span class="comment">// 学生信息</span></span><br><span class="line"><span class="comment">// 所见即所得</span></span><br><span class="line"><span class="comment">// 例子:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* info : information 信息</span></span><br><span class="line"><span class="comment">* init : initlization 初始化</span></span><br><span class="line"><span class="comment">*  add/insert/create 增加插入创建</span></span><br><span class="line"><span class="comment">*  remove/rm/clear/del/delete 删除</span></span><br><span class="line"><span class="comment">*  update 修改</span></span><br><span class="line"><span class="comment">*  get/query/select : 查询获取</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ul><li>命名的时候可以使用$、_、数字、字母，但是数字不能作为名字的第一位</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> student_info;</span><br><span class="line"><span class="keyword">var</span> $xxx; <span class="comment">//=&gt; 一般都是应用jq获得到的值</span></span><br><span class="line"><span class="keyword">var</span> _xxx; <span class="comment">//=&gt; 一般这样的情况代表变量是一个局或者公共的变量</span></span><br></pre></td></tr></table></figure><ul><li>JS中很多字都是有特殊含义的，我们这些词，叫做关键词；现在没有特殊含义，以后可能会作为关键的，我们叫做保留字；二关键词和保留字不可以随便用来命名；</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1552036896263-fd04e4f8-345d-4ff6-9587-45c3a1a67877.png#align=left&display=inline&height=277&name=image.png&originHeight=554&originWidth=1336&size=284246&status=done&width=668" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1552036875298-debe0648-b2cf-484c-8069-43111c9cf872.png#align=left&display=inline&height=610&name=image.png&originHeight=1220&originWidth=1660&size=696625&status=done&width=830" alt="image.png"><br></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;语法&lt;br&gt;ECMAScript 的语法大量借鉴了 C 及其他类 C 语言（如 Perl 和 Java）的语法。&lt;br&gt;区分大小写&lt;/p&gt;
&lt;h2 id=&quot;注释&quot;&gt;&lt;a href=&quot;#注释&quot; class=&quot;headerlink&quot; title=&quot;注释&quot;&gt;&lt;/a&gt;注释&lt;/h2&gt;
      
    
    </summary>
    
      <category term="JavaScript基础入门" scheme="http://yoursite.com/categories/JavaScript%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/"/>
    
    
      <category term="JavaScript基础入门" scheme="http://yoursite.com/tags/JavaScript%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>2.JS常用的输出方式</title>
    <link href="http://yoursite.com/2019/04/09/JavaScript%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/2%20JS%E5%B8%B8%E7%94%A8%E7%9A%84%E8%BE%93%E5%87%BA%E6%96%B9%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/04/09/JavaScript基础入门/2 JS常用的输出方式/</id>
    <published>2019-04-09T06:10:04.000Z</published>
    <updated>2019-06-06T15:26:37.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="弹窗输出"><a href="#弹窗输出" class="headerlink" title="弹窗输出"></a>弹窗输出</h2><h3 id="alert"><a href="#alert" class="headerlink" title="alert"></a>alert</h3><ul><li>在浏览器中弹出一个提示框(提供确定按钮，点击确定弹窗消失)</li><li>使用alert弹窗信息，提示的内容最后都会转换成字符串(调用了toSring这个方法)<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="number">1</span>)</span><br><span class="line">alert(&#123;<span class="attr">name</span>:<span class="string">'wjw'</span>&#125;) <span class="comment">//=&gt; '[object Object]'</span></span><br><span class="line">alert([<span class="number">13</span>,<span class="number">14</span>]) <span class="comment">//=&gt; '12,13'</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="confirm"><a href="#confirm" class="headerlink" title="confirm"></a>confirm</h3><ul><li>在alert基础上增加了让用户选择的操作(提供两个按钮:确定和取消)</li><li>当用户点击确定按钮的时候，我们接收到的结果是true，点击是取消按钮我们接受到的结果是false，此后我们可以根据结果来处理即可 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> wjw = confirm(<span class="string">"are you sure"</span>);</span><br><span class="line">alert(wjw);</span><br></pre></td></tr></table></figure></li></ul><h3 id="prompt"><a href="#prompt" class="headerlink" title="prompt"></a>prompt</h3><ul><li><ul><li>在confirm 基础上增加让用户增加输入的效果</li></ul></li><li><ul><li>用户点击取消按钮，我们获取到的结果是null,如果用户点击是确定按钮，我们将获取用户输入的信息</li></ul></li><li><ul><li>在真实的项目中，一般性会使用二次封装的弹窗，不会使用这种弹窗</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> flag = prompt(<span class="string">"are you sure"</span>);</span><br><span class="line"></span><br><span class="line">alert(flag)</span><br></pre></td></tr></table></figure><h2 id="控制台输出"><a href="#控制台输出" class="headerlink" title="控制台输出"></a>控制台输出</h2><blockquote><p>控制台输出，方便开发调试</p></blockquote><h3 id="console"><a href="#console" class="headerlink" title="console"></a>console</h3><ul><li>在控制台输出，优势不会转换数据类型，输出什么格式的数据都可以</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(&#123;<span class="attr">name</span>:<span class="string">'wjw'</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.dir() <span class="comment">//比log输出更加详细一些</span></span><br><span class="line"><span class="built_in">console</span>.table <span class="comment">//把json数据展示成一个表格</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;弹窗输出&quot;&gt;&lt;a href=&quot;#弹窗输出&quot; class=&quot;headerlink&quot; title=&quot;弹窗输出&quot;&gt;&lt;/a&gt;弹窗输出&lt;/h2&gt;&lt;h3 id=&quot;alert&quot;&gt;&lt;a href=&quot;#alert&quot; class=&quot;headerlink&quot; title=&quot;alert&quot;&gt;
      
    
    </summary>
    
      <category term="JavaScript基础入门" scheme="http://yoursite.com/categories/JavaScript%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/"/>
    
    
      <category term="JavaScript基础入门" scheme="http://yoursite.com/tags/JavaScript%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>1.导入JS</title>
    <link href="http://yoursite.com/2019/04/09/JavaScript%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/1%20%E5%AF%BC%E5%85%A5JS/"/>
    <id>http://yoursite.com/2019/04/09/JavaScript基础入门/1 导入JS/</id>
    <published>2019-04-09T05:10:04.000Z</published>
    <updated>2019-06-06T15:26:09.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="三种常见导入"><a href="#三种常见导入" class="headerlink" title="三种常见导入"></a>三种常见导入</h2><h3 id="行内导入JS-慎重：不安全"><a href="#行内导入JS-慎重：不安全" class="headerlink" title="行内导入JS(慎重：不安全)"></a>行内导入JS(慎重：不安全)</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onclick</span>=<span class="string">"alert('hello world')"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="内嵌式"><a href="#内嵌式" class="headerlink" title="内嵌式"></a>内嵌式</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">alert('hello world')</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="外链式"><a href="#外链式" class="headerlink" title="外链式"></a>外链式</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 新建一个js文件</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./js/demo.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// or</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./js/demo.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="内嵌与外链不能同时操作"><a href="#内嵌与外链不能同时操作" class="headerlink" title="内嵌与外链不能同时操作"></a>内嵌与外链不能同时操作</h2><blockquote><p>内嵌导入和外链导入不能合并在一起，如果当前是外链导入的，那么在script脚本块找那个编写的所有代码都不会被执行。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"./js/demo.js"</span>&gt;</span><br><span class="line">  alert(<span class="string">'hello world'</span>)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="位置编写位置"><a href="#位置编写位置" class="headerlink" title="位置编写位置"></a>位置编写位置</h2><blockquote><p>我们一般性会把css放在body的上面，把js放在body末尾(约定速成的规范)</p></blockquote><pre><code>但是如果放在了标签前面那么将如何处理?</code></pre><blockquote><p>页面加载完所有资源之后执行操作</p></blockquote><p> 在js中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在jq中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'load'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ie8以下</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.attachEvent(<span class="string">'onreadystatechange'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;三种常见导入&quot;&gt;&lt;a href=&quot;#三种常见导入&quot; class=&quot;headerlink&quot; title=&quot;三种常见导入&quot;&gt;&lt;/a&gt;三种常见导入&lt;/h2&gt;&lt;h3 id=&quot;行内导入JS-慎重：不安全&quot;&gt;&lt;a href=&quot;#行内导入JS-慎重：不安全&quot; class=&quot;he
      
    
    </summary>
    
      <category term="JavaScript基础入门" scheme="http://yoursite.com/categories/JavaScript%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/"/>
    
    
      <category term="JavaScript基础入门" scheme="http://yoursite.com/tags/JavaScript%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>0.介绍</title>
    <link href="http://yoursite.com/2019/04/09/JavaScript%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/0%20%E4%BB%8B%E7%BB%8D/"/>
    <id>http://yoursite.com/2019/04/09/JavaScript基础入门/0 介绍/</id>
    <published>2019-04-09T03:10:04.000Z</published>
    <updated>2019-06-06T15:21:28.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ECMAScript"><a href="#ECMAScript" class="headerlink" title="ECMAScript"></a>ECMAScript</h2><p>ECMA-262 的第 5 版是 JS 的第一个稳定版本，得到了各浏览器厂商的支持。<br></p><ul><li>语法</li><li>类型</li><li>语句</li><li>关键词</li><li>保留字</li><li>操作符</li><li>对象</li></ul><h2 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h2><blockquote><p>文档对象模型是针对 XML 但经过扩展用于 HTML 的 API 。DOM 把整个页面映射为一个多层次节点结构。HTML 或 XML 页面中的每个组成部分都是某种类型的节点，这些节点又包含着不同类型的数据。<br>document object model 文档对象模型，里面提供了一些属性和方法，可以让我们操作页面的元素</p></blockquote><h2 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h2><blockquote><p>原则上讲，BOM只处理浏览器窗口和框架，但下面一些针对浏览器的 JS 扩展也被看做是BOM的一部分。<br>browser object model 浏览器对象模型，里面提供了一些属性和方法，可以让我们操作浏览器。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;ECMAScript&quot;&gt;&lt;a href=&quot;#ECMAScript&quot; class=&quot;headerlink&quot; title=&quot;ECMAScript&quot;&gt;&lt;/a&gt;ECMAScript&lt;/h2&gt;&lt;p&gt;ECMA-262 的第 5 版是 JS 的第一个稳定版本，得到了各浏览器厂商
      
    
    </summary>
    
      <category term="JavaScript基础入门" scheme="http://yoursite.com/categories/JavaScript%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/"/>
    
    
      <category term="JavaScript基础入门" scheme="http://yoursite.com/tags/JavaScript%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>3. 内容编码和加密解密方法</title>
    <link href="http://yoursite.com/2019/04/08/http%E4%B8%8Eajax%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/3.%20%E5%86%85%E5%AE%B9%E7%BC%96%E7%A0%81%E5%92%8C%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2019/04/08/http与ajax入门笔记/3. 内容编码和加密解密方法/</id>
    <published>2019-04-08T06:10:04.000Z</published>
    <updated>2019-06-06T14:55:06.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="正常的编码解码-非加密"><a href="#正常的编码解码-非加密" class="headerlink" title="正常的编码解码(非加密)"></a>正常的编码解码(非加密)</h2><h3 id="escape-uescape"><a href="#escape-uescape" class="headerlink" title="escape/uescape"></a>escape/uescape</h3><blockquote><p>主要就是把中文汉字进行编码的(一般只有js语言支持,也经常应用于前端页面通讯时间的中文汉字编码)</p></blockquote><h3 id="encodeURL-decodeURL"><a href="#encodeURL-decodeURL" class="headerlink" title="encodeURL/decodeURL"></a>encodeURL/decodeURL</h3><blockquote><p>基本上所有的编码语言都支持</p></blockquote><h3 id="encodeURlComponent-decodeURIComponent"><a href="#encodeURlComponent-decodeURIComponent" class="headerlink" title="encodeURlComponent/decodeURIComponent"></a>encodeURlComponent/decodeURIComponent</h3><blockquote><p>和第二种方法非常的累死，区别在于</p></blockquote><blockquote><p>需求:我们url问号传递参数的时候，我们传递的参数值还是一个url或者包含很多特殊字符，此时为了不影响住要的url，我们需要把传递的参数值进行编码，使用encodeURLComponent处理</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">'http://www.baidu.com/?'</span>,</span><br><span class="line">    obj=&#123;</span><br><span class="line">    name:<span class="string">'wjw'</span>,</span><br><span class="line">      age:<span class="number">9</span>,</span><br><span class="line">      url:<span class="string">'http://www.sogou.com/?x=1'</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// =&gt; 把obj中的每一项属性名和属性值拼接到url的末尾(问号传参的方式)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> obj)&#123;</span><br><span class="line">str +=<span class="string">`<span class="subst">$&#123;key&#125;</span>=<span class="subst">$&#123;obj[key]&#125;</span>`</span>;</span><br><span class="line">  <span class="comment">// =&gt; 不能使用encodeURL必须使用encodeURlComponent,原因是encodeURL不能编码</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(str.replace(<span class="regexp">/&amp;$/g</span>,<span class="string">''</span>));</span><br></pre></td></tr></table></figure><h3 id="也可以通过加密的方法进行编码解码"><a href="#也可以通过加密的方法进行编码解码" class="headerlink" title="也可以通过加密的方法进行编码解码"></a>也可以通过加密的方法进行编码解码</h3><p>1、可逆转加密(一般都是团队自己玩的规则)<br>2、不可逆加密(一般都是基于MD5加密完成的，可能会把md5加密后的结果二次加密)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">'js/md5.min.js'</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">hex_md5(<span class="string">'0000'</span>)</span><br><span class="line">  <span class="comment">// "c6f057b86584942e415435ffb1fa93d4"</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;正常的编码解码-非加密&quot;&gt;&lt;a href=&quot;#正常的编码解码-非加密&quot; class=&quot;headerlink&quot; title=&quot;正常的编码解码(非加密)&quot;&gt;&lt;/a&gt;正常的编码解码(非加密)&lt;/h2&gt;&lt;h3 id=&quot;escape-uescape&quot;&gt;&lt;a href=&quot;#e
      
    
    </summary>
    
      <category term="http与ajax入门笔记" scheme="http://yoursite.com/categories/http%E4%B8%8Eajax%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="http与ajax入门笔记" scheme="http://yoursite.com/tags/http%E4%B8%8Eajax%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>2. AJAX</title>
    <link href="http://yoursite.com/2019/04/08/http%E4%B8%8Eajax%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/2.%20AJAX/"/>
    <id>http://yoursite.com/2019/04/08/http与ajax入门笔记/2. AJAX/</id>
    <published>2019-04-08T05:10:04.000Z</published>
    <updated>2019-06-06T15:16:43.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是ajax？"><a href="#什么是ajax？" class="headerlink" title="什么是ajax？"></a>什么是ajax？</h2><p>async javastctip and xml,异步的js和xml</p><h2 id="xml-可扩展的标记语言"><a href="#xml-可扩展的标记语言" class="headerlink" title="xml:可扩展的标记语言"></a>xml:可扩展的标记语言</h2><blockquote><p>作用是通过存储数据的(通过自己扩展的标记名称清晰的展示出来数据结构)</p></blockquote><blockquote><p>ajax值所以称为异步的js和xml,主要原因是:当初最开始用ajax实现客户端和服务器端数据通信的时候，传输的数据格式一般都是xml格式的数据，我们把他们称为异步js和xml(现在一般都是基于json格式进行数据传输)</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version='1.0' encoding='UTF-8'?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">student</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">age</span>&gt;</span>25<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">score</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">english</span>&gt;</span>90<span class="tag">&lt;/<span class="name">english</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">math</span>&gt;</span>90<span class="tag">&lt;/<span class="name">math</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">chinese</span>&gt;</span>90<span class="tag">&lt;/<span class="name">chinese</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">score</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="异步的js"><a href="#异步的js" class="headerlink" title="异步的js"></a>异步的js</h2><blockquote><p>这里的异步不是ajax只能基于异步进行请求(虽然建议都是使用异步变成)，这里的异步特指的是<strong>局部刷新</strong></p></blockquote><h2 id="局部刷新-vs-全局刷新"><a href="#局部刷新-vs-全局刷新" class="headerlink" title="局部刷新 vs 全局刷新"></a>局部刷新 vs 全局刷新</h2><blockquote><p>在非完全前后端分离项目中，前端开发只需要完成页面的制作，并且把一些基础的人机交互效果使用js完成即可，页面中需要动态呈现内容的部分，都是交给后台开发工程师做数据绑定和基于服务器进行渲染的(服务器端渲染)</p></blockquote><p>[优势]</p><ul><li>动态展示的数据在页面的原代码中可以看见，有利于seo优化推广(有利于搜索引擎的收录和抓取)</li><li>从服务器获取的结构就已经是最后要呈现的结果了，不需要客户端做额外的事情，所以也没加速快(前提是服务器端处理的速度够快，能够处理过来)，所以类似于京东、淘宝这些网站，首屏数据一般都是由服务器渲染的</li></ul><p>[弊端]</p><ul><li>实时更新的数据，每一次想要展示最新的数据，页面都要重新的刷新一次，这样肯定不行</li><li>都交给服务器端做数据渲染，服务器端的压力太大，如果服务器处理不过来，页面呈现的速度更慢(所以京东、淘宝这类网站,除了首屏是服务器端渲染的，其他屏一般都是客户端做数据渲染绑定)</li><li>这种模式不利于开发(开发效率低)</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1554193153655-396c293f-995c-4246-b4e7-a7c801e3b47f.png#align=left&display=inline&height=282&name=image.png&originHeight=422&originWidth=1050&size=333041&status=done&width=702" alt="image.png"></p><blockquote><p>目前市场上大部分项目都是前后端完全分离的项目(也有非完全前后端分离的)</p></blockquote><h2 id="前后端完全分离"><a href="#前后端完全分离" class="headerlink" title="前后端完全分离"></a>前后端完全分离</h2><p>前后端完全分离的项目，页面中需要动态绑定的数据是交给客户端完全渲染的</p><ul><li>想服务器端发送ajax请求</li><li>把从服务器端获取的数据解析处理，拼接成为我们需要展示的html字符串</li><li>把拼接好的字符串替换页面中某一部分的内容(局部刷新),页面整体不需要重新加载，局部渲染极客</li></ul><p>[优势]</p><ul><li>我们可以根据需求，任意修改页面中某一部分的内容(例如实时刷新),整体页面不刷新，性能好，体验好(所有表单验证，需要实时刷新的等需求都要基于ajax实现)</li><li>有利于开发，提高开发的效率<ul><li>前后端的完全分离，后台不需要考虑前端如何实现，前端也不需要考虑后台用什么技术，真正意义上实现了技术的划分</li><li>可以同时进行开发:项目开发开始，首先制定前后端数据交互的结构文档(文档中包含了，调用哪个接口或者那些数据等协议规范),后台吧接口线写好(目前很多公司也需要前端自己拿node来模拟这些接口)，客户端按照接口调取极客，后端再去实现接口功能极客</li></ul></li></ul><p>[弊端]</p><ul><li>不利于seo优化:第一次从服务器端获取的内容不包含需要动态绑定的数据，所以也没的原代码中没有这些内容，不利于seo收录，后期听过js添加到页面中的内容，并不会写在页面的源代码中(是源代码不是页面结构)</li><li>交由客户端渲染，首先需要把页面呈现，然后通过js的异步ajax请求获取数据，然后数据绑定，浏览器在动态增加部分重新渲染，无形中浪费了一些时间，没有服务器端渲染页面呈现速度快</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1554194196374-285844b7-622d-4fcd-a376-70afdea45846.png#align=left&display=inline&height=356&name=image.png&originHeight=402&originWidth=808&size=173137&status=done&width=716" alt="image.png"></p><h2 id="ajax请求"><a href="#ajax请求" class="headerlink" title="ajax请求"></a>ajax请求</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line"><span class="comment">// 不兼容ie6以及更低版本的浏览器(ie6 activeXobject)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 打开请求地址(可以理解为一些基础配置，但是并没有发送请求呢)</span></span><br><span class="line">xhr.open([method],[url],[<span class="keyword">async</span>],[username],[user password]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听ajax改变，获取响应信息(获取响应头信息，获取响应主体信息)</span></span><br><span class="line">xhr.onreadystatechange=<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(xhr.readyState===<span class="number">4</span> &amp;&amp; xhr.readyState===<span class="number">200</span>)&#123;</span><br><span class="line">  <span class="keyword">let</span> result = xhr.responseText;<span class="comment">// 获取响应主体中的内容</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送ajax请求(括号中传递的信息内容是请求主体的内容)</span></span><br><span class="line"></span><br><span class="line">xhr.send(<span class="literal">null</span>)</span><br></pre></td></tr></table></figure><p> <br>分析第二部分的细节点</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhr.open([method],[url],[<span class="keyword">async</span>],[username],[user password]);</span><br></pre></td></tr></table></figure><h3 id="ajax请求方式（method）"><a href="#ajax请求方式（method）" class="headerlink" title="ajax请求方式（method）"></a>ajax请求方式（method）</h3><blockquote><p>get系列的请求</p></blockquote><ul><li><p>get</p></li><li><p>delete</p></li><li><p>head</p></li><li><p>…</p><blockquote><p>post系列的请求(推送)</p></blockquote></li><li><p>post</p></li><li><p>put:想服务器中增加指定的资源文件</p></li><li><p>…</p></li></ul><p>不管哪一种请求方式,客户端可以吧信息传递给服务器，服务器也可以吧信息返回给客户端，只要get系列一般以获取为主(给的少)</p><ol><li>我们想获取一些动态展示的信息，一般使用GET请求，因为只需要向服务器发送请求，告诉服务器端想要什么，服务器端就会把需要的数据返回</li><li>在实现注册功的时候，我们需要把客户端输入信息发送给服务器进行存储，服务器一般返回成功是成功等状态，此时我们一般都基于post请求完成</li><li>….</li></ol><p>get系列请求和post系列请求，在项目是在中存在很多的区别</p><ol><li><p>get请求传递给服务器的内容一般贸易post请求传递给服务器的内容多</p><ol><li>原因:get请求传递给服务器内容一般都是基于<strong>url地址问号传递参数</strong> 来实现的，而实现的，而post请求一般都是基于<strong>设置请求主体</strong>来实现的。浏览器都已自己的关于url的最大长度限制(谷歌:8kb、火狐:7kb、ie:2kb)超过限制长度的部分，浏览器会自动截取掉，导致传递给服务器的数据缺失</li><li>理论上post请求通过主体传递是没有大小限制，真实项目中为了保证传输的速度，我们会限制大小(例如:上传的资料或者图片我们会做大小的限制)</li></ol></li><li><p>get请求容易出现缓存(这个缓存不可控:一般我们都不需要)，而post不会出现缓存(除非自己做特殊处理)</p><ol><li>原因:get是通过url问号传参传递给服务器信息，二post是设置请求主体</li><li>设置请求主体不会出现缓存，但是url传递参数就会了</li><li><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">  url:<span class="string">'getList?lx=news'</span>,</span><br><span class="line">    success:<span class="function"><span class="params">result</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 第一次请求数据回来，间隔一分钟后，浏览器又发送一次请求，</span></span><br><span class="line">      <span class="comment">// 但是新发送，不管是地址还是传递的参数都和第一次不一样，</span></span><br><span class="line">      <span class="comment">// 浏览器很有可能会把上一次数据获取，而不是获取新的数据</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;,<span class="number">60000</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解决方案:每一次重新请求的时候，在URL的末尾追加一个随机数，保证每一次请求的地址不完全一直</span></span><br><span class="line"><span class="comment">// 就可以避免是从缓存中读取的数据</span></span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">url:<span class="string">'getList?lx=news_='</span>+<span class="built_in">Math</span>.random()</span><br><span class="line">success:<span class="function"><span class="params">result</span>=&gt;</span>&#123;</span><br><span class="line">  </span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol></li><li><p>GET请求没有post请求安全(post也并不是十分安全，只是相对安全)<br>原因:还是因为get是url传递给服务器有一种比较简单的黑客技术:url劫持，也就是可以客户端传递给服务器劫持掉，导致信息泄露</p></li></ol><h3 id="2-4-2-url"><a href="#2-4-2-url" class="headerlink" title="2.4.2 url"></a>2.4.2 url</h3><blockquote><p>请求数据的地址(api地址)，真实项目中，后台开发工程师会编写一个api文档，在api文档中汇总了获取那些数据需要使用哪些地址，我们按照文档操作即可</p></blockquote><h3 id="2-4-3-async"><a href="#2-4-3-async" class="headerlink" title="2.4.3 async"></a>2.4.3 async</h3><blockquote><p>异步(sync同步)，设置当前ajax请求是异步还是同步的，不写默认是异步(true)，如果设置false，则代表当前请求是同步的</p></blockquote><blockquote><p>用户名和密码这两个参数一般不用，如果你请求的url地址所在服务器设定了访问权限，则需要我们提供通行的用户名和密码才可以(一般服务器都可以允许匿名访问的)</p></blockquote><h2 id="AJAX状态码"><a href="#AJAX状态码" class="headerlink" title="AJAX状态码"></a>AJAX状态码</h2><p>xhr.readyState</p><ol><li>unsent 未发送，只要创建一个ajax对象，默认值是零</li><li>opened 我们已经执行了xhr,open这个操作</li><li>headers_resceived 当前ajax的请求已经发送，并且已经接收到服务器端返回的响应头信息了</li><li>loading 响应主体内容正在返回的路上</li><li>done 响应主体内容已经返回到客户端</li></ol><h2 id="HTTP网络状态码"><a href="#HTTP网络状态码" class="headerlink" title="HTTP网络状态码"></a>HTTP网络状态码</h2><blockquote><p>记录了当前服务器返回信息的状态</p></blockquote><p>xhr.status</p><ul><li>200成功，一个完整的http事务完成了(以2开头的状态码一般性都是成功)</li><li>3开头一般也是成功，只不过是服务器做了特殊的处理<ul><li>301 moved permanently 永久转移(永久重定向)</li><li>302 move temporarily 临时转移(临时重定向，新的http版本中任务307是临时重定向) <ul><li>一般用于服务器的负载均衡:当前服务器处理不了，我把当前请求临时交给其他的服务器处理(一般图片请求经常出现302,很多公司都有单独的图片服务器)</li></ul></li><li>304 not modified 从浏览器缓存中获取数据 <ul><li>把一些不经常更新的文件或者内容缓存到浏览器中，下一次从缓存中获取，减轻服务器压力，也提高页面加载的速度</li></ul></li></ul></li><li>4开头的，一般性都是失败的，而且客户端的问题偏大<ul><li>400:请求参数错误</li><li>401:无权限访问</li><li>404:访问地址不存在</li></ul></li><li>5开头的，一般都是失败，而且服务器的问题偏大<ul><li>500:internal Server Error 未知的服务器错误</li><li>503:Service Unavailable 服务器超负债</li><li>…</li></ul></li></ul><p>面试题 ajax中总共支持几个方法<br>let xhr = new xmlHttpReques();<br>console.dir(xhr);</p><p>[属性]<br>readyState:存储的是当前ajax的状态<br>response/responseText/responseXML : 都是用来接收服务器返回的响应主体的内容，只是更具服务器返回内容的格式不一样，我们使用不同的属性接收即可<br>responseText是最常见的，接收到结果是字符串格式的(一般服务器返回的数据都是json格式字符串)<br>responXML:偶尔会用到，如果服务器返回的是xml文档数据，我们需要使用这个属性接收<br>status:记录了服务器返回的http状态码<br>statusText:对返回状态码的描述<br>timeout:设置当前ajax请求的超时时间，假设我们设置时间为3000(MS)，从AJAX请求发送开始，3秒后响应主体内容还没有返回，浏览器会把当前ajax请求强行断开</p><p>[方法]<br>abor():强行终端ajax请求<br>getAllResponseHeaders():获取全部的响应头信息(获取的结果是一丢字符串文本)<br>getResponseHeader(key):获取指定属性名的响应头部信息，例如:xhr.getResponseHeader(‘data’)获取响应头中存储的服务的时间<br>open():打开一个url地址<br>overridMimeType():重写数据的MIME类型<br>send():发送ajax请求(括号中书写的内容是客户端请求主体吧信息传递给服务器)<br>setRequestHeader(key,value):设置请求头信息(可以是设置自定义请求信息)</p><p>[事件]<br>onabort:当ajax被终端请求触发这个时间<br>onreadstatechange:ajax状态发烧改变，会触发这个事件<br>ontimeout:当AJAX请求超时，会触发这个事件<br>…</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest(();</span><br><span class="line">xhr.open(<span class="string">'get'</span>,<span class="string">'temp.json?_='</span>+<span class="built_in">Math</span>.random(),<span class="literal">true</span>);</span><br><span class="line">xhr.setRequesHeader(<span class="string">'cookie'</span>,<span class="string">'xxx'</span>); <span class="comment">// =&gt; 设置请求内容不能出现中文汉字</span></span><br><span class="line">xhr.timeout = <span class="number">10</span>;</span><br><span class="line">xhr.ontimeout=<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'当前请求已经超时'</span>);</span><br><span class="line">  xhr.abort();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="params">()</span> =&gt;</span>&#123;</span><br><span class="line"><span class="keyword">let</span> &#123;<span class="attr">readyState</span>:state,status&#125; = xhr;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 说明请求数据成功了</span></span><br><span class="line">    <span class="keyword">if</span>(!<span class="regexp">/^(2|3)\d&#123;2&#125;$/</span>.test(status)) <span class="keyword">return</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 在状态为2的时候就获取响应头信息</span></span><br><span class="line">    <span class="keyword">if</span>(state === <span class="number">2</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> headerAll = xhr.getAllResponseHeaders(),</span><br><span class="line">      serverDate = xhr.getResponseHeader(<span class="string">'date'</span>);<span class="comment">// 获取的服务时间是格林尼治时间(相比北京时间差不多差8小时)</span></span><br><span class="line">          <span class="built_in">console</span>.log(headerAll,<span class="keyword">new</span> <span class="built_in">Date</span>(serverDate));</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 在状态为4的时候就获取响应头信息已经回来了</span></span><br><span class="line">    <span class="keyword">if</span>(state === <span class="number">4</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> valueText = xhr.responseText,<span class="comment">// 获取到的结果一般都是json字符串(可以时间json.parse把其转换成json对象) </span></span><br><span class="line">          valueXML = xhr.responseXML; <span class="comment">// 获取到的结果是xml格式的数据，(可以通过xml的一些常规操作获取存储的指定信息)</span></span><br><span class="line">      <span class="comment">// 如果服务器返回的是xml文档，responseText获取的结果是字符串，而responseXML获取的是标准xml文档</span></span><br><span class="line">      <span class="built_in">console</span>.log(valueText,valueXML);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">xhr.send(<span class="string">'name=wjw&amp;age=23&amp;sex=man'</span>)</span><br></pre></td></tr></table></figure><h3 id="AJAX中的同步和异步编程"><a href="#AJAX中的同步和异步编程" class="headerlink" title="AJAX中的同步和异步编程"></a>AJAX中的同步和异步编程</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">xhr.open(<span class="string">'get'</span>,<span class="string">'temp.json'</span>,<span class="literal">false</span>);</span><br><span class="line">xhr.onredystatechange=<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(xhr.readySate);</span><br><span class="line">&#125;</span><br><span class="line">xhr.send();</span><br><span class="line"><span class="comment">// 只输出一次结果4</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1554350463659-0b94b605-b1ab-4b9c-adc4-c4b4873acfdf.png#align=left&display=inline&height=264&name=image.png&originHeight=528&originWidth=694&size=230731&status=done&width=347" alt="image.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">xhr.open(<span class="string">'get'</span>,<span class="string">'temp.json'</span>,<span class="literal">false</span>);</span><br><span class="line">xhr.send();<span class="comment">// =&gt; 同步开始发送ajax请求，开启ajax任务，在任务没有完成之前，什么事情都做不了</span></span><br><span class="line"><span class="comment">// 下面绑定时间也做不了 =&gt; loading =&gt; 当readyState ===4 的是ajax任务完成，开始执行下面的操作</span></span><br><span class="line">xhr.onreadystatechange=<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(xhr.readySate);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 绑定方法之前状态已经为4了，此时ajax的状态不会再改吧其他值，所以事件永远不会被处罚</span></span><br><span class="line"><span class="comment">// 一次都没有执行方法(使用ajax同步编程，不要把send放在事件监听前</span></span><br><span class="line"><span class="comment">// 这样我们无法在绑定方法中获取响应主体的内容)</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1554368143539-8939fb33-f95e-4e86-8b85-3de2a9b8eac1.png#align=left&display=inline&height=203&name=image.png&originHeight=406&originWidth=548&size=142518&status=done&width=274" alt="image.png"></p><pre><code class="javascript"><span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest();<span class="comment">// 下面绑定时间也做不了 =&gt; loading =&gt; 当readyState ===4 的是ajax任务完成，开始执行下面的操作</span>xhr.onreadystatechange=<span class="function"><span class="params">()</span>=&gt;</span>{    <span class="built_in">console</span>.log(xhr.readySate);  <span class="keyword">if</span>(xhr.readySate===<span class="number">1</span>) {      xhr.setRequestHeader(<span class="string">'aaa'</span>,<span class="string">'bbb'</span>);  }}xhr.open(<span class="string">'get'</span>,<span class="string">'temp.json'</span>,<span class="literal">false</span>);<span class="comment">// xhr.readyState === 1 AJAX特殊处理的一件事:执行OPEN状态变为1,会主动把之前监听的方法执行一次</span><span class="comment">// 然后再去执行SEND</span>xhr.send();<span class="comment">// xhr.redayState === 4 AJAX任务借宿，主任务队列完成</span></code></pre><h2 id="AJAX类库的封装"><a href="#AJAX类库的封装" class="headerlink" title="AJAX类库的封装"></a>AJAX类库的封装</h2><blockquote><p>JQ中的AJAX</p></blockquote><h3 id="url"><a href="#url" class="headerlink" title="url"></a>url</h3><blockquote><p>请求api地址</p></blockquote><h3 id="method"><a href="#method" class="headerlink" title="method"></a>method</h3><blockquote><p>请求方法get/post..在老板的jq中使用是type，使用type和method相同效果</p></blockquote><h3 id="dataType"><a href="#dataType" class="headerlink" title="dataType"></a>dataType</h3><blockquote><p>dataType只是我们预设获取结果的类型不会影响服务器的返回(服务器端一般给我们返回的都是json格式的字符串),如果我们预设是json,那么类库中将吧服务器返回的字符串转换为json对象，如果我们预设是text(默认值)，我们把服务器获取的结果直接拿过来操作即可，我们预设的值还可以xml等</p></blockquote><h3 id="cache"><a href="#cache" class="headerlink" title="cache"></a>cache</h3><blockquote><p>设置是否清楚缓存，只对get系列请求有作用，默认是true不清除缓存，手动设置false，jq类库在请求url的末尾最佳一个随机数来清楚缓存</p></blockquote><h3 id="data"><a href="#data" class="headerlink" title="data"></a>data</h3><blockquote><p>我们通过data可以把一些信息传递给服务器，get系列请求会把data中的内容拼接在url的末尾通过问号传参的方式给服务器，post系列请求会把内容请求放在主题传递给服务器;data的值可以设置为两种格式，字符串、对象，如果是字符串，设置的值是传递给服务器的就是什么，如果设置成对象，jq会把对象变为xxx=xxx&amp;xx=xx,这样来数据传递</p></blockquote><h3 id="async"><a href="#async" class="headerlink" title="async"></a>async</h3><blockquote><p>设置同步或者异步，默认是true代表异步，false代表同步</p></blockquote><h3 id="success"><a href="#success" class="headerlink" title="success"></a>success</h3><blockquote><p>dangajax请求成功后redayState===4&amp;&amp;statue是以2或者3开头的<br>请求成功后jq会把传递的回调函数执行，并且获取的结果当做实参传递给回调函数(result就是我们从服务器获取的结果)</p></blockquote><h3 id="error"><a href="#error" class="headerlink" title="error"></a>error</h3><blockquote><p>请求错误触发回调函数</p></blockquote><h3 id="complate"><a href="#complate" class="headerlink" title="complate"></a>complate</h3><blockquote><p>不管请求还是错误的还是正确的都会触发这个回调函数(他就是完成的意思)</p></blockquote><p>….</p><h2 id="封装自己的AJAX库"><a href="#封装自己的AJAX库" class="headerlink" title="封装自己的AJAX库"></a>封装自己的AJAX库</h2><ul><li>url</li><li>method/type</li><li>data</li><li>dataType</li><li>async</li><li>cache</li><li>success</li></ul><pre><code class="javascript">~funcction(){    <span class="class"><span class="keyword">class</span> <span class="title">ajaxClass</span> </span>{        <span class="comment">// send ajax</span>        init() {            <span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest();            xhr.onreadustatechange = <span class="function"><span class="params">()</span> =&gt;</span> {                <span class="keyword">if</span> (!<span class="regexp">/^[23]\d{2}$/</span>.test(xhr.status)) <span class="keyword">return</span>;                <span class="keyword">if</span> (xhr.redayState === <span class="number">4</span>) {                    <span class="keyword">let</span> result = xhr.responseText;                    <span class="comment">//    DATA-TYPE</span>                    <span class="keyword">switch</span> (<span class="keyword">this</span>.dataType.toUpperCase()) {                        <span class="keyword">case</span> <span class="string">'TEXT'</span>:                            <span class="keyword">break</span>;                        <span class="keyword">case</span> <span class="string">'JSON'</span>:                            result = <span class="built_in">JSON</span>.parese(result);                            <span class="keyword">break</span>;                        <span class="keyword">case</span> <span class="string">'XML'</span>:                            result = xhr.responseXML;                            <span class="keyword">break</span>;                    }                    <span class="keyword">this</span>.success(result);                }            }            <span class="comment">// DATA</span>            <span class="keyword">if</span> (<span class="keyword">this</span>.data !==<span class="literal">null</span>) {                <span class="keyword">this</span>.formatData();                <span class="keyword">if</span> (<span class="keyword">this</span>.idGET) {                    <span class="keyword">this</span>.url +=<span class="keyword">this</span>.querySymbol()+<span class="keyword">this</span>.data;                    <span class="keyword">this</span>.data = <span class="literal">null</span>;                }            }            <span class="comment">// CACHE</span>            <span class="keyword">this</span>.isGET ? <span class="keyword">this</span>.cache();            xhr.open(<span class="keyword">this</span>.method, <span class="keyword">this</span>.url, <span class="keyword">this</span>.async);            xhr.send();        }        cacheFn() {            <span class="comment">// THIS:EXAMPLE</span>            !<span class="keyword">this</span>.cache ? <span class="keyword">this</span>.url += <span class="string">`<span class="subst">${<span class="keyword">this</span>.querySymbol()}</span>_=<span class="subst">${<span class="built_in">Math</span>.random()}</span>`</span> : <span class="literal">null</span>;        }        querySymbol() {            <span class="comment">// THIS:EXAMPLE</span>            <span class="keyword">return</span> <span class="keyword">this</span>.url.indexOf(<span class="string">'?'</span>) &gt; <span class="number">-1</span> ? <span class="string">'&amp;'</span> : <span class="string">'?'</span>;        }        formatData(){             <span class="comment">// THIS:EXAMPLE</span>             <span class="keyword">if</span>(<span class="built_in">Object</span>.prototype.toString.call(<span class="keyword">this</span>.data)===<span class="string">'[Object Object]'</span>){                 <span class="keyword">let</span> obj = <span class="keyword">this</span>.data,                     str = <span class="string">``</span>;                     <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> obj) {                         <span class="keyword">if</span> (object.hasOwnProperty(key)) {                          str +=<span class="string">`<span class="subst">${key}</span>=<span class="subst">${obj[key]}</span>`</span>;                          }                     }                str = str.replace(<span class="regexp">/&amp;$/g</span>,<span class="string">''</span>);                <span class="keyword">this</span>.data = str;             }        }    }    <span class="keyword">let</span> ajax = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{};    <span class="comment">// init parameters</span>    <span class="built_in">window</span>.ajax = <span class="function"><span class="keyword">function</span> (<span class="params">{</span></span><span class="function"><span class="params">        url = null,</span></span><span class="function"><span class="params">        method = <span class="string">'GET'</span>,</span></span><span class="function"><span class="params">        type = <span class="string">'GET'</span>,</span></span><span class="function"><span class="params">        data = null,</span></span><span class="function"><span class="params">        dataType = <span class="string">'JSON'</span>,</span></span><span class="function"><span class="params">        cache = true,</span></span><span class="function"><span class="params">        async = ture,</span></span><span class="function"><span class="params">        suceess = null</span></span><span class="function"><span class="params">    } = {}</span>) </span>{        <span class="keyword">let</span> _this = <span class="keyword">new</span> ajaxClass(); <span class="comment">// 创建实例</span>        [<span class="string">'url'</span>, <span class="string">'method'</span>,<span class="string">'data'</span>,<span class="string">'dataType'</span>,<span class="string">'cache'</span>,<span class="string">'async'</span>,<span class="string">'success'</span>].forEach(<span class="function">(<span class="params">item</span>)=&gt;</span>{            <span class="keyword">if</span> (item === <span class="string">'method'</span>) {                _this.method = type === <span class="literal">null</span> ? method : type;                <span class="keyword">return</span>;            }            <span class="keyword">if</span> (item===<span class="string">'success'</span>) {                 _this.suceess = <span class="keyword">typeof</span> success === <span class="string">'function'</span> ? success : <span class="keyword">new</span> <span class="built_in">Function</span>();            }            _this[item] = <span class="built_in">eval</span>(item);        })        _this.isGET = <span class="regexp">/^(GET|DELETE|HEAD)$/i</span>.test(example.method);        _this.init();        <span class="keyword">return</span> _this;    };}();ajax({})</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是ajax？&quot;&gt;&lt;a href=&quot;#什么是ajax？&quot; class=&quot;headerlink&quot; title=&quot;什么是ajax？&quot;&gt;&lt;/a&gt;什么是ajax？&lt;/h2&gt;&lt;p&gt;async javastctip and xml,异步的js和xml&lt;/p&gt;
&lt;h2 id=
      
    
    </summary>
    
      <category term="http与ajax入门笔记" scheme="http://yoursite.com/categories/http%E4%B8%8Eajax%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="http与ajax入门笔记" scheme="http://yoursite.com/tags/http%E4%B8%8Eajax%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>1. HTPP</title>
    <link href="http://yoursite.com/2019/04/08/http%E4%B8%8Eajax%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/1.%20HTPP/"/>
    <id>http://yoursite.com/2019/04/08/http与ajax入门笔记/1. HTPP/</id>
    <published>2019-04-08T03:10:04.000Z</published>
    <updated>2019-06-06T14:47:05.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前端和后端如何通讯"><a href="#前端和后端如何通讯" class="headerlink" title="前端和后端如何通讯"></a>前端和后端如何通讯</h2><blockquote><p>前端:客户端<br>后端:服务端</p></blockquote><p>职业规划建议</p><blockquote><p>培养自己的人脉圈，以及建立自己的影响力</p></blockquote><ul><li>状态自己的总和能力</li><li>经常参加一些活动</li><li>开放分享(做讲师分享自己的智慧、写组件的个人博客做技术分享)</li></ul><p>当我们在浏览器地址中输入URL地址，到最后看到页面，中间经历了哪些事情？<br>假设我们访问的是 <a href="https://www.baidu.com这个地址，按下enter建后，我们可以看到百度首页" target="_blank" rel="noopener">https://www.baidu.com这个地址，按下enter建后，我们可以看到百度首页</a></p><ul><li>百度页面并没有在我们自己的客服端本地，我们是输入地址后，才请求过来的</li><li>输入不同的域名可以看到不同的页面</li><li>有的网页是https，有的是http(也有的是ftp)</li><li>需要客户端联网才能完成这些事情</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1554171011360-68037c8f-c3bf-4e19-a4e2-ed9a695ce4f6.png#align=left&display=inline&height=237&name=image.png&originHeight=474&originWidth=786&size=228302&status=done&width=393" alt="image.png"></p><h3 id="DNS服务器-域名解析服务"><a href="#DNS服务器-域名解析服务" class="headerlink" title="DNS服务器 域名解析服务"></a>DNS服务器 域名解析服务</h3><p>1.<a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a>  220.163.18.24<br>域名和服务器关联在一起，是通过DNS解析完成，所谓的DNS解析就是在dns服务上生成一条解析记录，标注了域名和对应的外网ip地址</p><h3 id="都经历了哪些事情？"><a href="#都经历了哪些事情？" class="headerlink" title="都经历了哪些事情？"></a>都经历了哪些事情？</h3><ul><li>首先根据客户端输入的域名，到DNS服务器上进行反解析(通过域名找到对应服务器的外网ip)</li><li>通过找到外网的ip，找到对应的服务器</li><li>通过地址栏中输入的端口号(没输入是因为不同协议有自己默认的端口号)找到服务器上发布的对应项目</li><li>服务器获取请求资源的地址，例如/stu/index.html，把资源文件中的原代码找到<ul><li>response 响应阶段</li></ul></li><li>服务器端会把找的原代码返回给客户端(通过http等传输协议返回)</li><li>客户端接收到原代码后，会交给浏览器的内核(渲染引擎)进行渲染，最后由浏览器绘制出对应的页面<ul><li>服务器自主渲染</li></ul></li></ul><h3 id="客户端和服务端交互-通讯-模型"><a href="#客户端和服务端交互-通讯-模型" class="headerlink" title="客户端和服务端交互(通讯)模型"></a>客户端和服务端交互(通讯)模型</h3><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1554171831526-af8fe24c-dbf6-44cc-ae64-4f30506b7a0a.png#align=left&display=inline&height=192&name=image.png&originHeight=328&originWidth=1094&size=230743&status=done&width=642" alt="image.png"></p><h2 id="第一部分-传输协议"><a href="#第一部分-传输协议" class="headerlink" title="第一部分 传输协议"></a>第一部分 传输协议</h2><h3 id="URL、URI、URN"><a href="#URL、URI、URN" class="headerlink" title="URL、URI、URN"></a>URL、URI、URN</h3><ul><li>URI : 统一资源标识符</li><li>URL: 统一资源路径地址</li><li>URN：统一资源名称</li><li>URI=URL+URN</li></ul><blockquote><p>一个完整的url包含很多部分<br><a href="https://www.yuque.com/as-giant/dz5g6s/eh4kdu/edit" target="_blank" rel="noopener">https://www.yuque.com/as-giant/dz5g6s/eh4kdu/edit</a>?name=wang&amp;age=2</p></blockquote><blockquote><p>传输协议是用来完成客户端和服务端的数据(内存)传输的，类似于快递小哥、负责把客户和商家的物品来回床底</p></blockquote><ul><li>客户端不仅可以向服务器发送请求，而且还可以吧一些内容传递给服务器</li><li>服务器端也可以把内容返回给客户端<ul><li>客户端和服务端传输的内容总称:<strong>http报文</strong>，这些报文信息都是基于传输协议完成传输的，客户端传递给服务器叫做请求(<strong>Request</strong>),服务器返回给客户端叫做响应(<strong>Response</strong>) , request+response两个阶段统称为一个HTTP事务(事务:一个完整的事情)</li></ul></li></ul><h3 id="HTTP事务"><a href="#HTTP事务" class="headerlink" title="HTTP事务"></a>HTTP事务</h3><ul><li>当客户端想服务器端发送请求，此时客户端和服务器端会简历一个传输通道(链接通道)，传输协议就是基于这个通道吧信息进行传输的</li><li>当服务器端接受到请求信息，把内容返回给客户端后，传输通道会自动销毁关闭</li></ul><h3 id="传输协议分类"><a href="#传输协议分类" class="headerlink" title="传输协议分类"></a>传输协议分类</h3><ul><li>http:超文本传输协议(客户端和服务器端传输的内容除了文本以外)，还可以传输图片，音视频等文件流[二进制编码/base64],以及传输xml格式的数据等，是目前市场上应用最广泛的传输协议</li><li>https:http ssl,它比http更加安全，要往数据内容的传输通道是经过ssl加密的(它需要在服务器端惊醒特殊的处理)，所以涉及资金类的网站一般都是https协议的</li><li>ftp:资源文件传输协议，一般用客户端把资源文件(不是代码)上传到服务端，或者从服务器端下载一些资源文件（ftp传输的内容会http这类传输协议传输的内容多)</li></ul><h3 id="http报文"><a href="#http报文" class="headerlink" title="http报文"></a>http报文</h3><p>1、起始行</p><ul><li>请求起始行</li><li>响应起始行</li></ul><p>2、首部(头)</p><ul><li>请求头：内置请求头、自定义请求头</li><li>响应式：内置响应头、自定义响应头</li><li>通用头：请求和响应都有的</li></ul><p>3、主体</p><ul><li>请求主体</li><li>响应主体</li></ul><p>请求xxx都是客户端设置的信息，服务器获取这些信息<br>响应xxx都是服务器端设置的信息，客户端用来接受这些信息</p><h2 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h2><p>设置域名其实就给不好记忆的服务器外网ip设置了一个好记忆的名字<br>顶级域名(一级域名):qq.com<br>二级域名:<a href="http://www.qq.com、v.qq.com、sports.qq.com" target="_blank" rel="noopener">www.qq.com、v.qq.com、sports.qq.com</a><br>三级域名:kbs.sports.qq.com</p><h2 id="端口号"><a href="#端口号" class="headerlink" title="端口号"></a>端口号</h2><p>在服务器发布项目的时候，我们可以通过端口号区分当前服务器上不同的项目<br>一台服务器的端口号取值范围:0~65535之间，如果电脑上安装了很多程序，有一些端口号是被占用了</p><p>HTTP:默认端口号80<br>HTTP:默认端口号443<br>FTP:默认端口号21</p><p>对于上述三个端口号其实是很重要的，如果被其它程序占用的，我们则不能使用了，所以服务器上一般是禁止安装其它程序的</p><h2 id="第四部分-请求资源文件的路径名称"><a href="#第四部分-请求资源文件的路径名称" class="headerlink" title="第四部分 请求资源文件的路径名称"></a>第四部分 请求资源文件的路径名称</h2><p>/stu/index.html<br>在服务器中发布项目的时候，我们一般都会配置一些默认文档:用户即使不输入请求文件的名称，服务器也会找到默认文档(一般默认文档都是index/default…)<br>我们通常为了做seo优化，会把一些动态页面的地址(xxx.php、xxx.aspx、xxx.asp、xxx.jsp…)进行伪URL重写(需要服务器处理的)<br><a href="https://item.jd.com/432527.html" target="_blank" rel="noopener">https://item.jd.com/432527.html</a><br>不可能是有一个商品，自己就单独写一个详情页面，肯定是同一个详情页做的不同处理</p><h3 id="第一种方案"><a href="#第一种方案" class="headerlink" title="第一种方案"></a>第一种方案</h3><p>由后台语言很久详情页模板动态生成具体的详情页面</p><h3 id="第二种方案"><a href="#第二种方案" class="headerlink" title="第二种方案"></a>第二种方案</h3><p>当前页面就是一个页面，例如:detail.html/detail.php…,我们做详情页面的时候，开发是按照detail.html?id=432527 来开发的，但是这种页面不方便做seo优化，此时我们把真实的地址进行重写，重写为了让我们看到的是4325427.html</p><h3 id="第五部分-问号传承"><a href="#第五部分-问号传承" class="headerlink" title="第五部分 问号传承"></a>第五部分 问号传承</h3><p>?name=zf&amp;age=9<br>把一些通过xxx=xxx的方式，放在一个url的末尾，通过问号传递</p><p>【作用】<br>1.在ajax请求中，我们可以通过问号传递参数的方式，客户端吧一些信息传递给服务器，服务器更具传递信息的不一样，返回不同的数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// $.ajax(url,&#123;&#125;);</span></span><br><span class="line"><span class="comment">// $.get(url,function()&#123;&#125;);</span></span><br><span class="line"><span class="comment">// 对于ajax请求的特殊写法，原理还是基于ajax方法实现 $.post $.script</span></span><br><span class="line"></span><br><span class="line">$.ajax(&#123;</span><br><span class="line">    url:<span class="string">'getPersonInfo?id=12'</span></span><br><span class="line">    ...</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当前案例，我们传递给服务器的编号是多少，服务器端就会把对应编号人员信息给返回</span></span><br></pre></td></tr></table></figure><p>2.消除ajax请求中get方式缓存</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">url:<span class="string">'xxx?_=0.123456'</span></span><br><span class="line">method:<span class="string">'get'</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 我们会在请求url的末尾最佳一个随机数_=随机数，保证每一次请求的url都是不一样的，以此来消除get请求一流的缓存问题</span></span><br></pre></td></tr></table></figure><p>3.通过url传递传输的方式，可以实现页面之间信息的通讯，例如:我们有两个页面A/B,A是列表页面、B是详情页，点击A中的某一条信息，进入到唯一的详情页B，如果展示不同的信息，这种操作就可以基于URL问号传递参数来实现了</p><p>例如:<br><a href="http://sports.qq.com/kbsweb/game.htm?mid=10000:1471087" target="_blank" rel="noopener">http://sports.qq.com/kbsweb/game.htm?mid=10000:1471087</a><br><a href="http://sports.qq.com/kbsweb/game.htm?mid=10000:1471086" target="_blank" rel="noopener">http://sports.qq.com/kbsweb/game.htm?mid=10000:1471086</a><br>在进入game.htm页面的时候，我们可以获取URL传递的参数值，更具传递参数值的不一样从服务器端获取不同的数据展示</p><p>在列表页面进行页面跳转的时候，我们需要记住的是跳转的同事传递不同的参数值<br><a href="game.html?mid=xxx"></a></p><h3 id="第六部分-HASH值"><a href="#第六部分-HASH值" class="headerlink" title="第六部分 HASH值"></a>第六部分 HASH值</h3><p>#xxx<br>URL末尾传递的井号什么，就是HASH值(哈希值)</p><p>[作用]<br>1、页面中锚点定位<br>2、前端路由(SPA单页面开发) –&gt;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前端和后端如何通讯&quot;&gt;&lt;a href=&quot;#前端和后端如何通讯&quot; class=&quot;headerlink&quot; title=&quot;前端和后端如何通讯&quot;&gt;&lt;/a&gt;前端和后端如何通讯&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;前端:客户端&lt;br&gt;后端:服务端&lt;/p&gt;
&lt;/blockq
      
    
    </summary>
    
      <category term="http与ajax入门笔记" scheme="http://yoursite.com/categories/http%E4%B8%8Eajax%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="http与ajax入门笔记" scheme="http://yoursite.com/tags/http%E4%B8%8Eajax%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>13. promise</title>
    <link href="http://yoursite.com/2019/03/06/es6/13.promise/"/>
    <id>http://yoursite.com/2019/03/06/es6/13.promise/</id>
    <published>2019-03-06T03:12:06.000Z</published>
    <updated>2019-06-06T14:25:45.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="异步回调"><a href="#异步回调" class="headerlink" title="异步回调"></a>异步回调</h2><h2 id="回调地狱"><a href="#回调地狱" class="headerlink" title="回调地狱"></a>回调地狱</h2><p>在需要多个操作的时间，会导致多个回调函数嵌套，导致代码不够直观，就常说的回调地域</p><h2 id="并行结果"><a href="#并行结果" class="headerlink" title="并行结果"></a>并行结果</h2><p>如果几个异步操作之间并没有前后顺序之分，但需要等多个异步完成操作完成后才能执行后续的任务，无法实现并行节约时间</p><h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><p>promise本意是承诺，在程序中的意思就是承诺我过一段时间后会给你一个结果。什么时间会用到过一段时间？答案是异步操作，异步是指可能比较长时间才有结果的才做，例如网络请求、读取本地文件等</p><h2 id="Promise的三种状态"><a href="#Promise的三种状态" class="headerlink" title="Promise的三种状态"></a>Promise的三种状态</h2><ul><li>Pending Promise对象势力创建时候的初始化状态</li><li>Fulfilled 可以理解为成功的状态</li><li>Rejected 可以理解为失败的状态<blockquote><p>then方法就是用来指定Promise 对象的状态改变时确定执行的操作，resolve时执行第一个函数（onFulfilled）,reject时执行第二函数（onRejected）</p></blockquote></li></ul><h2 id="构造一个Promise"><a href="#构造一个Promise" class="headerlink" title="构造一个Promise"></a>构造一个Promise</h2><h3 id="使用Promise"><a href="#使用Promise" class="headerlink" title="使用Promise"></a>使用Promise</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">Math</span>.random()&gt;<span class="number">0.5</span>)</span><br><span class="line">      resolve(<span class="string">'This is resolve!'</span>)</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      reject(<span class="string">'This is reject'</span>)</span><br><span class="line">    &#125;,<span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line">promise.then(Fulfilled,Rejected)</span><br></pre></td></tr></table></figure><ul><li>构造一个Promise实例需要给Promise构造函数传入一个函数</li><li>传入的函数需要有两个形参，两个形参都是function类型的参数。<ul><li>第一个形参运行后会让Promise实例处于resolve状态，所以我们一般给第一个形参命名为resolve，使 Promise对象的状态改变成成功，同时传递一个参数用于后续成功后的操作</li><li>第一个形参运行后悔让Promise实例处于reject状态，所以我们一般给第一个形参命名为reject，将Promise对象的状态改变为失败，同事将错误的信息传递到后续错误处理的操作</li></ul></li></ul><h2 id="es5模拟Promise"><a href="#es5模拟Promise" class="headerlink" title="es5模拟Promise"></a>es5模拟Promise</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Promise</span>(<span class="params">fn</span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.success(data);</span><br><span class="line">&#125;,(error)=&gt;&#123;</span><br><span class="line"><span class="keyword">this</span>.error();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.prtotype.resolve = <span class="function"><span class="keyword">function</span> (<span class="params">data</span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.success(data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.prototype.then = <span class="function"><span class="keyword">function</span> (<span class="params">success,error</span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.success = success;</span><br><span class="line"><span class="keyword">this</span>.error = error;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="es5模拟Promise-1"><a href="#es5模拟Promise-1" class="headerlink" title="es5模拟Promise"></a>es5模拟Promise</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Promise</span></span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>(fn)&#123;</span><br><span class="line">  fn(<span class="function">(<span class="params">data</span>)=&gt;</span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.success(data);</span><br><span class="line">      &#125;,(error)=&gt;&#123;</span><br><span class="line">      <span class="keyword">this</span>.error();</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  resolve(data)&#123;</span><br><span class="line">  <span class="keyword">this</span>.success(data);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  reject(error)&#123;</span><br><span class="line">  <span class="keyword">this</span>.error(error);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  then(success,error)&#123;</span><br><span class="line">  <span class="keyword">this</span>.success = success;</span><br><span class="line">    <span class="keyword">this</span>.error = error;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="promise-做为函数的返回值"><a href="#promise-做为函数的返回值" class="headerlink" title="promise 做为函数的返回值"></a>promise 做为函数的返回值</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajaxPromise</span>(<span class="params">queryUrl</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">  xhr.open(<span class="string">'GET'</span>,queryUrl,ture);</span><br><span class="line">    xhr.send(<span class="literal">null</span>);</span><br><span class="line">    xhr.onreadystatechange = <span class="function"><span class="params">()</span> =&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(xhr.readyState === <span class="number">4</span> )&#123;</span><br><span class="line">        <span class="keyword">if</span>(xhr.status === <span class="number">200</span>)&#123;</span><br><span class="line">          resolve(xhr.responseText);</span><br><span class="line">          &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          reject(xhr.responseText);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ajaxPromise(<span class="string">'http://www.baidu.com'</span>)</span><br><span class="line">.then(<span class="function">(<span class="params">value</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.error(err);</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure><h2 id="promise的链式调用"><a href="#promise的链式调用" class="headerlink" title="promise的链式调用"></a>promise的链式调用</h2><ul><li>每次调用返回的都是一个新的Promise实例</li><li>链式调用的参数通过返回值传递</li></ul><p>then 可以使用链式调用的写法原因在于，每一次执行该方法时总是会返回一个 Promise 对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">readFile(<span class="string">'1.txt'</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(data);</span><br><span class="line">  <span class="keyword">return</span> readFile(data);</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(err);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="promise-API"><a href="#promise-API" class="headerlink" title="promise API"></a>promise API</h2><h3 id="Promise-all"><a href="#Promise-all" class="headerlink" title="Promise.all"></a>Promise.all</h3><ul><li>参数:接受一个数组，数组内都是Promise实例</li><li>返回值: 返回一个 promise 实例，这个promise 实例的状态转移取决于参数的 promise实例的状态变化。当参数处于resolve状态时，返回resolve状态。如果参数中任意一个实例处于reject状态，返回的promise实例变为reject状态。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.all([p1,p2]).then(<span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">//[ '2.txt', '2' ]</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>不管两个promise谁先完成，Promise.all 方法会按照数组里面的顺序将结果返回</p></blockquote><h3 id="Promise-race"><a href="#Promise-race" class="headerlink" title="Promise.race"></a>Promise.race</h3><ul><li>参数:接受一个数组，数组内都是Promise实例</li><li>返回值: 返回一个 promise 实例，这个promise 实例的状态转移取决于参数的 promise实例的状态变化。当参数处于resolve状态时，返回resolve状态。如果参数中任意一个实例处于reject状态，返回的promise实例变为reject状态。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.race([p1,p2]).then(<span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">//[ '2.txt', '2' ]</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="Promise-resolve"><a href="#Promise-resolve" class="headerlink" title="Promise.resolve"></a>Promise.resolve</h3><p>返回一个Promise 实例，这个实例处于resolve状态。<br>根据传入的参数不同有不同的功能:</p><ul><li>值(对象、数组、字符串等):作为resolve传递出去的值</li><li>Promise 实例 : 原封不动返回</li></ul><h3 id="Promise-reject"><a href="#Promise-reject" class="headerlink" title="Promise.reject"></a>Promise.reject</h3><p>返回一个Promise实例，这个实例处于reject状态</p><ul><li>参数一般就是抛出的错误信息。</li></ul><h2 id="q"><a href="#q" class="headerlink" title="q"></a>q</h2><p>Q是一个在Javascrip中实现promise的模块<br><a name="ad6ccffe"></a></p><h2 id="13-8-1-q的基本用法"><a href="#13-8-1-q的基本用法" class="headerlink" title="13.8.1 q的基本用法"></a>13.8.1 q的基本用法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Q = <span class="built_in">require</span>(<span class="string">'q'</span>);</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">read</span>(<span class="params">filename</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> deferred = Q.defer();</span><br><span class="line">  fs.readFile(filename,<span class="string">'utf8'</span>,<span class="function"><span class="keyword">function</span>)(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(err)&#123;</span><br><span class="line">    deferred.reject(err);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  deferred.resolve(data);</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">read(<span class="string">'1.txt1'</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;,funtcion(error)&#123;</span><br><span class="line"><span class="built_in">console</span>.error(error);                    </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="13-8-2-q的简单实现"><a href="#13-8-2-q的简单实现" class="headerlink" title="13.8.2 q的简单实现"></a>13.8.2 q的简单实现</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    defer()&#123;</span><br><span class="line">        <span class="keyword">var</span> _success,_error;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            resolve(data)&#123;</span><br><span class="line">                _success(data);</span><br><span class="line">            &#125;,</span><br><span class="line">            reject(err)&#123;</span><br><span class="line">                _error(err);</span><br><span class="line">            &#125;,</span><br><span class="line">            promise:&#123;</span><br><span class="line">                then(success,error)&#123;</span><br><span class="line">                    _success = success;</span><br><span class="line">                    _error = error;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="170dcbc6"></a></p><h2 id="13-8-3-q的实现"><a href="#13-8-3-q的实现" class="headerlink" title="13.8.3 q的实现"></a>13.8.3 q的实现</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> defer = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> pending = [], value;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        resolve: <span class="function"><span class="keyword">function</span> (<span class="params">_value</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (pending) &#123;</span><br><span class="line">                value = _value;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, ii = pending.length; i &lt; ii; i++) &#123;</span><br><span class="line">                    <span class="keyword">var</span> callback = pending[i];</span><br><span class="line">                    callback(value);</span><br><span class="line">                &#125;</span><br><span class="line">                pending = <span class="literal">undefined</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        promise: &#123;</span><br><span class="line">            then: <span class="function"><span class="keyword">function</span> (<span class="params">callback</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (pending) &#123;</span><br><span class="line">                    pending.push(callback);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    callback(value);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="13-9-bluebird"><a href="#13-9-bluebird" class="headerlink" title="13.9 bluebird"></a>13.9 bluebird</h2><blockquote><p>实现 promise 标准的库是功能最全，速度最快的一个库</p></blockquote><h2 id="13-9-1-bluebird经典使用"><a href="#13-9-1-bluebird经典使用" class="headerlink" title="13.9.1 bluebird经典使用"></a>13.9.1 bluebird经典使用</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="built_in">Promise</span> = <span class="built_in">require</span>(<span class="string">'./bluebird'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> readFile = <span class="built_in">Promise</span>.promisify(<span class="built_in">require</span>(<span class="string">"fs"</span>).readFile);</span><br><span class="line">readFile(<span class="string">"1.txt"</span>, <span class="string">"utf8"</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">contents</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(contents);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">Promise</span>.promisifyAll(<span class="built_in">require</span>(<span class="string">"fs"</span>));</span><br><span class="line"></span><br><span class="line">fs.readFileAsync(<span class="string">"1.txt"</span>, <span class="string">"utf8"</span>).then(<span class="function"><span class="keyword">function</span> (<span class="params">contents</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(contents);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="bluebird简单实现"><a href="#bluebird简单实现" class="headerlink" title="bluebird简单实现"></a>bluebird简单实现</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    promisify(fn)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> args = <span class="built_in">Array</span>.from(<span class="built_in">arguments</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">                fn.apply(<span class="literal">null</span>, args.concat(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                        reject(err);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        resolve(<span class="built_in">arguments</span>[<span class="number">1</span>])</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;));</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    promisifyAll(obj)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> attr <span class="keyword">in</span> obj)&#123;</span><br><span class="line">            <span class="keyword">if</span>(obj.hasOwnProperty(attr) &amp;&amp; <span class="keyword">typeof</span> obj[attr] ==<span class="string">'function'</span>)&#123;</span><br><span class="line">                obj[attr+<span class="string">'Async'</span>] = <span class="keyword">this</span>.promisify(obj[attr]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="13-10-动画"><a href="#13-10-动画" class="headerlink" title="13.10 动画"></a>13.10 动画</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;move&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">    &lt;style&gt;</span></span><br><span class="line"><span class="regexp">        .square&#123;</span></span><br><span class="line"><span class="regexp">            width:40px;</span></span><br><span class="line"><span class="regexp">            height:40px;</span></span><br><span class="line"><span class="regexp">            border-radius: 50%;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        .square1&#123;</span></span><br><span class="line"><span class="regexp">            background-color: red;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        .square2&#123;</span></span><br><span class="line"><span class="regexp">            background-color: yellow;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        .square3&#123;</span></span><br><span class="line"><span class="regexp">            background-color: blue;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>style&gt;</span><br><span class="line">&lt;<span class="regexp">/head&gt;</span></span><br><span class="line"><span class="regexp">&lt;body&gt;</span></span><br><span class="line"><span class="regexp">&lt;div class="square square1" style="margin-left: 0"&gt;&lt;/</span>div&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"square square2"</span> style=<span class="string">"margin-left: 0"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"square square3"</span> style=<span class="string">"margin-left: 0"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">  var square1 = document.querySelector('.square1');</span></span><br><span class="line"><span class="regexp">  var square2 = document.querySelector('.square2');</span></span><br><span class="line"><span class="regexp">  var square3 = document.querySelector('.square3');</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  /</span>*<span class="function"><span class="keyword">function</span> <span class="title">move</span>(<span class="params">element,target,resolve</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> timer = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> marginLeft = <span class="built_in">parseInt</span>(element.style.marginLeft, <span class="number">10</span>);</span><br><span class="line">      <span class="keyword">if</span>(marginLeft == target)&#123;</span><br><span class="line">        resolve();</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        element.style.marginLeft = ++marginLeft+<span class="string">'px'</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,<span class="number">13</span>);</span><br><span class="line">  &#125;*<span class="regexp">/</span></span><br><span class="line"><span class="regexp">  function move(element,target,resolve)&#123;</span></span><br><span class="line"><span class="regexp">    let current = 0;</span></span><br><span class="line"><span class="regexp">    let timer = setInterval(function()&#123;</span></span><br><span class="line"><span class="regexp">      element.style.transform=`translateX($&#123;++current&#125;px)`;</span></span><br><span class="line"><span class="regexp">      if(current&gt;target)&#123;</span></span><br><span class="line"><span class="regexp">        clearInterval(timer);</span></span><br><span class="line"><span class="regexp">        resolve();</span></span><br><span class="line"><span class="regexp">      &#125;;</span></span><br><span class="line"><span class="regexp">    &#125;,13);</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">  function animate(element,target)&#123;</span></span><br><span class="line"><span class="regexp">    return new Promise(function(resolve,reject)&#123;</span></span><br><span class="line"><span class="regexp">      move(element,target,resolve);</span></span><br><span class="line"><span class="regexp">    &#125;);</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">  animate(square1,100)</span></span><br><span class="line"><span class="regexp">    .then(function()&#123;</span></span><br><span class="line"><span class="regexp">      return animate(square2,100);</span></span><br><span class="line"><span class="regexp">    &#125;)</span></span><br><span class="line"><span class="regexp">    .then(function()&#123;</span></span><br><span class="line"><span class="regexp">      return animate(square3,100);</span></span><br><span class="line"><span class="regexp">    &#125;);</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><p><a name="c6923f5a"></a></p><h2 id="13-11-co"><a href="#13-11-co" class="headerlink" title="13.11. co"></a>13.11. co</h2><p><a name="d65c4d2f"></a></p><h2 id="13-11-1-co初体验"><a href="#13-11-1-co初体验" class="headerlink" title="13.11.1 co初体验"></a>13.11.1 co初体验</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getNumber</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve,reject</span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">let</span> number = <span class="built_in">Math</span>.random();</span><br><span class="line">      <span class="keyword">if</span>(number &gt;<span class="number">.5</span>)&#123;</span><br><span class="line">        resolve(number);</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        reject(<span class="string">'数字太小'</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,<span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> *<span class="title">read</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="keyword">yield</span> getNumber();</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">  <span class="keyword">let</span> b = <span class="keyword">yield</span> <span class="string">'b'</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(b);</span><br><span class="line">  <span class="keyword">let</span> c = <span class="keyword">yield</span> getNumber();</span><br><span class="line">  <span class="built_in">console</span>.log(c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">co</span>(<span class="params">gen</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> g = gen();</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">next</span>(<span class="params">lastValue</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">let</span> &#123;done,value&#125; = g.next(lastValue);</span><br><span class="line">      <span class="keyword">if</span>(done)&#123;</span><br><span class="line">         resolve(lastValue);</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(value <span class="keyword">instanceof</span> <span class="built_in">Promise</span>)&#123;</span><br><span class="line">          value.then(next,<span class="function"><span class="keyword">function</span>(<span class="params">val</span>)</span>&#123;</span><br><span class="line">            reject(val);</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          next(value);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    next();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line">co(read).then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">reason</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(reason);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><a name="fb5ae0eb"></a></p><h2 id="13-11-2-co连续读文件"><a href="#13-11-2-co连续读文件" class="headerlink" title="13.11.2 co连续读文件"></a>13.11.2 co连续读文件</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readFile</span>(<span class="params">filename</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve,reject</span>) </span>&#123;</span><br><span class="line">    fs.readFile(filename,<span class="string">'utf8'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(err)</span><br><span class="line">        reject(err);</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        resolve(data);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> *<span class="title">read</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="keyword">yield</span> readFile(<span class="string">'./1.txt'</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">  <span class="keyword">let</span> b = <span class="keyword">yield</span> readFile(<span class="string">'./2.txt'</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">co</span>(<span class="params">gen</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> g = gen();</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">next</span>(<span class="params">val</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> &#123;done,value&#125; = g.next(val);</span><br><span class="line">    <span class="keyword">if</span>(!done)&#123;</span><br><span class="line">      value.then(next);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  next();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="118b50d1"></a></p><h2 id="13-12-Promise-A-完整实现"><a href="#13-12-Promise-A-完整实现" class="headerlink" title="13.12 Promise/A+完整实现"></a>13.12 Promise/A+完整实现</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Promise</span>(<span class="params">executor</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> self = <span class="keyword">this</span>;</span><br><span class="line">  <span class="comment">// 默认状态pending</span></span><br><span class="line">  self.status = <span class="string">"pending"</span>;</span><br><span class="line">  <span class="comment">// 此变量里放着此promise的结果</span></span><br><span class="line">  self.value = <span class="literal">undefined</span>;</span><br><span class="line">  <span class="comment">// 存放所有成功的回调函数</span></span><br><span class="line">  self.onResolvedCallbacks = [];</span><br><span class="line">  <span class="comment">// 存放所有的失败的回调函数</span></span><br><span class="line">  self.onRejectedCallbacks = [];</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 调用方法promise 变成成功状态</span></span><br><span class="line">  <span class="comment">// resolve的时候你把值传过来</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (value <span class="keyword">instanceof</span> <span class="built_in">Promise</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> value.then(resolve, reject)</span><br><span class="line">    &#125;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// 异步执行所有的回调函数</span></span><br><span class="line">      <span class="keyword">if</span> (self.status == <span class="string">'pending'</span>) &#123;</span><br><span class="line">        self.value = value;</span><br><span class="line">        self.status = <span class="string">'resolved'</span>;</span><br><span class="line">        self.onResolvedCallbacks.forEach(<span class="function"><span class="params">item</span> =&gt;</span> item(value));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 调用方法把当前promise变成失败</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">reject</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (self.status == <span class="string">'pending'</span>) &#123;</span><br><span class="line">        self.value = value;</span><br><span class="line">        self.status = <span class="string">'rejected'</span>;</span><br><span class="line">        self.onRejectedCallbacks.forEach(<span class="function"><span class="params">item</span> =&gt;</span> item(value));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    executor(resolve, reject);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    reject(e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolvePromise</span>(<span class="params">promise2, x, resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (promise2 === x) &#123;</span><br><span class="line">    <span class="keyword">return</span> reject(<span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'循环引用'</span>));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> then, called;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (x != <span class="literal">null</span> &amp;&amp; ((<span class="keyword">typeof</span> x == <span class="string">'object'</span> || <span class="keyword">typeof</span> x == <span class="string">'function'</span>))) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      then = x.then;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> then == <span class="string">'function'</span>) &#123;</span><br><span class="line">        then.call(x, <span class="function"><span class="keyword">function</span> (<span class="params">y</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">if</span> (called)<span class="keyword">return</span>;</span><br><span class="line">          called = <span class="literal">true</span>;</span><br><span class="line">          resolvePromise(promise2, y, resolve, reject);</span><br><span class="line">        &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">r</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">if</span> (called)<span class="keyword">return</span>;</span><br><span class="line">          called = <span class="literal">true</span>;</span><br><span class="line">          reject(r);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        resolve(x);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="keyword">if</span> (called)<span class="keyword">return</span>;</span><br><span class="line">      called = <span class="literal">true</span>;</span><br><span class="line">      reject(e);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    resolve(x);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// onFullfilled成功的回调,onReject失败的回调</span></span><br><span class="line"><span class="built_in">Promise</span>.prototype.then = <span class="function"><span class="keyword">function</span> (<span class="params">onFulfilled, onRejected</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> self = <span class="keyword">this</span>;</span><br><span class="line">  onFulfilled = <span class="keyword">typeof</span> onFulfilled == <span class="string">'function'</span> ? onFulfilled : <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line">  &#125;;</span><br><span class="line">  onRejected = <span class="keyword">typeof</span> onRejected == <span class="string">'function'</span> ? onRejected : <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> value</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">let</span> promise2;</span><br><span class="line">  <span class="keyword">if</span> (self.status == <span class="string">'resolved'</span>) &#123;</span><br><span class="line">    promise2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">      setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">let</span> x = onFulfilled(self.value);</span><br><span class="line">          resolvePromise(promise2, x, resolve, reject);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">          reject(e);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (self.status == <span class="string">'rejected'</span>) &#123;</span><br><span class="line">    promise2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">      setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">let</span> x = onRejected(self.value);</span><br><span class="line">          resolvePromise(promise2, x, resolve, reject);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">          reject(e);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (self.status == <span class="string">'pending'</span>) &#123;</span><br><span class="line">    promise2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">      self.onResolvedCallbacks.push(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">let</span> x = onFulfilled(value);</span><br><span class="line">          resolvePromise(promise2, x, resolve, reject);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">          reject(e);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      self.onRejectedCallbacks.push(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">let</span> x = onRejected(value);</span><br><span class="line">          resolvePromise(promise2, x, resolve, reject);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">          reject(e);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> promise2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Promise</span>.prototype.catch = <span class="function"><span class="keyword">function</span> (<span class="params">onRejected</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.then(<span class="literal">null</span>, onRejected);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Promise</span>.all = <span class="function"><span class="keyword">function</span> (<span class="params">promises</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> result = [];</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; promises.length; i++) &#123;</span><br><span class="line">      promises[i].then(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">        result[i] = data;</span><br><span class="line">        <span class="keyword">if</span> (++count == promises.length) &#123;</span><br><span class="line">          resolve(result);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">        reject(err);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.deferred = <span class="built_in">Promise</span>.defer = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> defer = &#123;&#125;;</span><br><span class="line">  defer.promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    defer.resolve = resolve;</span><br><span class="line">    defer.reject = reject;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> defer;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * npm i -g promises-aplus-tests</span></span><br><span class="line"><span class="comment"> * promises-aplus-tests Promise.js</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="built_in">module</span>.exports = <span class="built_in">Promise</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;异步回调&quot;&gt;&lt;a href=&quot;#异步回调&quot; class=&quot;headerlink&quot; title=&quot;异步回调&quot;&gt;&lt;/a&gt;异步回调&lt;/h2&gt;&lt;h2 id=&quot;回调地狱&quot;&gt;&lt;a href=&quot;#回调地狱&quot; class=&quot;headerlink&quot; title=&quot;回调地狱&quot;&gt;&lt;/a
      
    
    </summary>
    
      <category term="ECMAScript 6入门" scheme="http://yoursite.com/categories/ECMAScript-6%E5%85%A5%E9%97%A8/"/>
    
    
      <category term="ECMAScript 6入门" scheme="http://yoursite.com/tags/ECMAScript-6%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>12. JavaScript(ES6) 中条件语句</title>
    <link href="http://yoursite.com/2019/03/03/es6/12.JavaScript(ES6)%20%E4%B8%AD%E6%9D%A1%E4%BB%B6%E8%AF%AD%E5%8F%A5/"/>
    <id>http://yoursite.com/2019/03/03/es6/12.JavaScript(ES6) 中条件语句/</id>
    <published>2019-03-03T07:12:06.000Z</published>
    <updated>2019-06-06T14:23:49.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用-Array-includes-来处理多个条件"><a href="#使用-Array-includes-来处理多个条件" class="headerlink" title="使用 Array.includes 来处理多个条件"></a>使用 Array.includes 来处理多个条件</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">fruit</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (fruit == <span class="string">'apple'</span> || fruit == <span class="string">'strawberry'</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'red'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优化变成 -&gt;&gt;</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">fruit</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 条件提取到数组中</span></span><br><span class="line">  <span class="keyword">const</span> redFruits = [<span class="string">'apple'</span>, <span class="string">'strawberry'</span>, <span class="string">'cherry'</span>, <span class="string">'cranberries'</span>];</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">if</span> (redFruits.includes(fruit)) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'red'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="减少嵌套，提前使用-return-语句"><a href="#减少嵌套，提前使用-return-语句" class="headerlink" title="减少嵌套，提前使用 return 语句"></a>减少嵌套，提前使用 return 语句</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">fruit, quantity</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> redFruits = [<span class="string">'apple'</span>, <span class="string">'strawberry'</span>, <span class="string">'cherry'</span>, <span class="string">'cranberries'</span>];</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// 条件 1：fruit 必须有值</span></span><br><span class="line">  <span class="keyword">if</span> (fruit) &#123;</span><br><span class="line">    <span class="comment">// 条件 2：必须为红色</span></span><br><span class="line">    <span class="keyword">if</span> (redFruits.includes(fruit)) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'red'</span>);</span><br><span class="line"> </span><br><span class="line">      <span class="comment">// 条件 3：数量必须大于 10</span></span><br><span class="line">      <span class="keyword">if</span> (quantity &gt; <span class="number">10</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'big quantity'</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'No fruit!'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 测试结果</span></span><br><span class="line">test(<span class="literal">null</span>); <span class="comment">// 抛出错误：No fruits</span></span><br><span class="line">test(<span class="string">'apple'</span>); <span class="comment">// 打印：red</span></span><br><span class="line">test(<span class="string">'apple'</span>, <span class="number">20</span>); <span class="comment">// 打印：red，big quantity</span></span><br></pre></td></tr></table></figure><p>优化</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 在发现无效条件时提前 return */</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">fruit, quantity</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> redFruits = [<span class="string">'apple'</span>, <span class="string">'strawberry'</span>, <span class="string">'cherry'</span>, <span class="string">'cranberries'</span>];</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// 条件 1：提前抛出错误</span></span><br><span class="line">  <span class="keyword">if</span> (!fruit) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'No fruit!'</span>);</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// 条件2：必须为红色</span></span><br><span class="line">  <span class="keyword">if</span> (redFruits.includes(fruit)) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'red'</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 条件 3：数量必须大于 10</span></span><br><span class="line">    <span class="keyword">if</span> (quantity &gt; <span class="number">10</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'big quantity'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了减少一个嵌套层级，优化编码风格</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 在发现无效条件时提前 return */</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">fruit, quantity</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> redFruits = [<span class="string">'apple'</span>, <span class="string">'strawberry'</span>, <span class="string">'cherry'</span>, <span class="string">'cranberries'</span>];</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">if</span> (!fruit) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'No fruit!'</span>); <span class="comment">// 条件 1：提前抛出错误</span></span><br><span class="line">  <span class="keyword">if</span> (!redFruits.includes(fruit)) <span class="keyword">return</span>;  <span class="comment">// 条件 2：当 fruit 不是红色的时候，提前 return</span></span><br><span class="line"> </span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'red'</span>);</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// 条件 3：必须是大量存在</span></span><br><span class="line">  <span class="keyword">if</span> (quantity &gt; <span class="number">10</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'big quantity'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用函数的默认参数-和-解构"><a href="#使用函数的默认参数-和-解构" class="headerlink" title="使用函数的默认参数 和 解构"></a>使用函数的默认参数 和 解构</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">fruit, quantity</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!fruit) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">const</span> q = quantity || <span class="number">1</span>; <span class="comment">// 如果没有提供 quantity 参数，则默认为 1</span></span><br><span class="line"> </span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`We have <span class="subst">$&#123;q&#125;</span> <span class="subst">$&#123;fruit&#125;</span>!`</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 测试结果</span></span><br><span class="line">test(<span class="string">'banana'</span>); <span class="comment">// We have 1 banana!</span></span><br><span class="line">test(<span class="string">'apple'</span>, <span class="number">2</span>); <span class="comment">// We have 2 apple!</span></span><br></pre></td></tr></table></figure><p>但是q在这边不直观所有优化</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">fruit, quantity = <span class="number">1</span></span>) </span>&#123; <span class="comment">// i如果没有提供 quantity 参数，则默认为 1</span></span><br><span class="line">  <span class="keyword">if</span> (!fruit) <span class="keyword">return</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`We have <span class="subst">$&#123;quantity&#125;</span> <span class="subst">$&#123;fruit&#125;</span>!`</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 测试结果</span></span><br><span class="line">test(<span class="string">'banana'</span>); <span class="comment">// We have 1 banana!</span></span><br><span class="line">test(<span class="string">'apple'</span>, <span class="number">2</span>); <span class="comment">// We have 2 apple!</span></span><br></pre></td></tr></table></figure><p>但是这边 也可能是个对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 解构 —— 只获得 name 属性</span></span><br><span class="line"><span class="comment">// 参数默认分配空对象 &#123;&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">&#123;name&#125; = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log (name || <span class="string">'unknown'</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//测试结果</span></span><br><span class="line">test(<span class="literal">undefined</span>); <span class="comment">// unknown</span></span><br><span class="line">test(&#123; &#125;); <span class="comment">// unknown</span></span><br><span class="line">test(&#123; <span class="attr">name</span>: <span class="string">'apple'</span>, <span class="attr">color</span>: <span class="string">'red'</span> &#125;); <span class="comment">// apple</span></span><br></pre></td></tr></table></figure><h2 id="选择-Map-Object-字面量，而不是Switch语句"><a href="#选择-Map-Object-字面量，而不是Switch语句" class="headerlink" title="选择 Map / Object 字面量，而不是Switch语句"></a>选择 Map / Object 字面量，而不是Switch语句</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">color</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 使用 switch case 语句，根据颜色找出对应的水果</span></span><br><span class="line">  <span class="keyword">switch</span> (color) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'red'</span>:</span><br><span class="line">      <span class="keyword">return</span> [<span class="string">'apple'</span>, <span class="string">'strawberry'</span>];</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'yellow'</span>:</span><br><span class="line">      <span class="keyword">return</span> [<span class="string">'banana'</span>, <span class="string">'pineapple'</span>];</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'purple'</span>:</span><br><span class="line">      <span class="keyword">return</span> [<span class="string">'grape'</span>, <span class="string">'plum'</span>];</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> [];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//测试结果</span></span><br><span class="line">test(<span class="literal">null</span>); <span class="comment">// []</span></span><br><span class="line">test(<span class="string">'yellow'</span>); <span class="comment">// ['banana', 'pineapple']</span></span><br></pre></td></tr></table></figure><p>这边建议使用对象，更加清晰</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用对象字面量，根据颜色找出对应的水果</span></span><br><span class="line">  <span class="keyword">const</span> fruitColor = &#123;</span><br><span class="line">    red: [<span class="string">'apple'</span>, <span class="string">'strawberry'</span>],</span><br><span class="line">    yellow: [<span class="string">'banana'</span>, <span class="string">'pineapple'</span>],</span><br><span class="line">    purple: [<span class="string">'grape'</span>, <span class="string">'plum'</span>]</span><br><span class="line">  &#125;;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">color</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> fruitColor[color] || [];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是这边是很有可能为网络数据，无法判断red这样的变量，那么就用arry.filter 来过滤</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fruits = [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'apple'</span>, <span class="attr">color</span>: <span class="string">'red'</span> &#125;, </span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'strawberry'</span>, <span class="attr">color</span>: <span class="string">'red'</span> &#125;, </span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'banana'</span>, <span class="attr">color</span>: <span class="string">'yellow'</span> &#125;, </span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'pineapple'</span>, <span class="attr">color</span>: <span class="string">'yellow'</span> &#125;, </span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'grape'</span>, <span class="attr">color</span>: <span class="string">'purple'</span> &#125;, </span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'plum'</span>, <span class="attr">color</span>: <span class="string">'purple'</span> &#125;</span><br><span class="line">];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">color</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 使用 Array filter  ，根据颜色找出对应的水果</span></span><br><span class="line"> </span><br><span class="line">  <span class="keyword">return</span> fruits.filter(<span class="function"><span class="params">f</span> =&gt;</span> f.color == color);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用-Array-every-和-Array-some-来处理全部-部分满足条件"><a href="#使用-Array-every-和-Array-some-来处理全部-部分满足条件" class="headerlink" title="使用 Array.every 和 Array.some 来处理全部/部分满足条件"></a>使用 Array.every 和 Array.some 来处理全部/部分满足条件</h2><p>我们想检查所有水果是否都是红色的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fruits = [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'apple'</span>, <span class="attr">color</span>: <span class="string">'red'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'banana'</span>, <span class="attr">color</span>: <span class="string">'yellow'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'grape'</span>, <span class="attr">color</span>: <span class="string">'purple'</span> &#125;</span><br><span class="line">  ];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> isAllRed = <span class="literal">true</span>;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// 条件：所有的水果都必须是红色</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> f <span class="keyword">of</span> fruits) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!isAllRed) <span class="keyword">break</span>;</span><br><span class="line">    isAllRed = (f.color == <span class="string">'red'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="built_in">console</span>.log(isAllRed); <span class="comment">// false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 arry.every来过滤</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fruits = [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'apple'</span>, <span class="attr">color</span>: <span class="string">'red'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'banana'</span>, <span class="attr">color</span>: <span class="string">'yellow'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'grape'</span>, <span class="attr">color</span>: <span class="string">'purple'</span> &#125;</span><br><span class="line">  ];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 条件：简短方式，所有的水果都必须是红色</span></span><br><span class="line">  <span class="keyword">const</span> isAllRed = fruits.every(<span class="function"><span class="params">f</span> =&gt;</span> f.color == <span class="string">'red'</span>);</span><br><span class="line"> </span><br><span class="line">  <span class="built_in">console</span>.log(isAllRed); <span class="comment">// false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果我们想要检查是否有至少一个水果是红色的，我们可以使用 Array.some 仅用一行代码就实现出来</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fruits = [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'apple'</span>, <span class="attr">color</span>: <span class="string">'red'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'banana'</span>, <span class="attr">color</span>: <span class="string">'yellow'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'grape'</span>, <span class="attr">color</span>: <span class="string">'purple'</span> &#125;</span><br><span class="line">];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 条件：是否存在红色的水果</span></span><br><span class="line">  <span class="keyword">const</span> isAnyRed = fruits.some(<span class="function"><span class="params">f</span> =&gt;</span> f.color == <span class="string">'red'</span>);</span><br><span class="line"> </span><br><span class="line">  <span class="built_in">console</span>.log(isAnyRed); <span class="comment">// true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;使用-Array-includes-来处理多个条件&quot;&gt;&lt;a href=&quot;#使用-Array-includes-来处理多个条件&quot; class=&quot;headerlink&quot; title=&quot;使用 Array.includes 来处理多个条件&quot;&gt;&lt;/a&gt;使用 Array.in
      
    
    </summary>
    
      <category term="ECMAScript 6入门" scheme="http://yoursite.com/categories/ECMAScript-6%E5%85%A5%E9%97%A8/"/>
    
    
      <category term="ECMAScript 6入门" scheme="http://yoursite.com/tags/ECMAScript-6%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>10. 集合</title>
    <link href="http://yoursite.com/2019/03/03/es6/10.%E9%9B%86%E5%90%88/"/>
    <id>http://yoursite.com/2019/03/03/es6/10.集合/</id>
    <published>2019-03-03T06:12:06.000Z</published>
    <updated>2019-06-06T14:16:39.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="10-1-Set"><a href="#10-1-Set" class="headerlink" title="10.1 Set"></a>10.1 Set</h2><blockquote><p>一个Set是一堆东西的集合，Set 有点像数组，不过跟数组不一样的是，Set里面不能有重复的内容</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> books = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">books.add(<span class="string">'js'</span>);</span><br><span class="line">books.add(<span class="string">'js'</span>);<span class="comment">//添加重复元素的集合元素个数不会变化</span></span><br><span class="line">books.add(<span class="string">'html'</span>);</span><br><span class="line">books.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">book</span>)</span>&#123; <span class="comment">// 循环集合</span></span><br><span class="line"><span class="built_in">console</span>.log(book);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(book.size);<span class="comment">//集合中元数的个数</span></span><br><span class="line"><span class="built_in">console</span>.log(books.has(<span class="string">'js'</span>));<span class="comment">//判断集合是否有此元素</span></span><br><span class="line">books.delete(<span class="string">'js'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(books.size);</span><br><span class="line"><span class="built_in">console</span>.log(books.has(<span class="string">'js'</span>));</span><br><span class="line">books.clear();<span class="comment">//清空set</span></span><br><span class="line"><span class="built_in">console</span>.log(books.size);</span><br></pre></td></tr></table></figure><h2 id="10-2-Map"><a href="#10-2-Map" class="headerlink" title="10.2 Map"></a>10.2 Map</h2><blockquote><p>可以使用Map来组织这个名值对的数据</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> books = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">books.set(<span class="string">'js'</span>,&#123;<span class="attr">name</span>:<span class="string">'js'</span>&#125;);<span class="comment">//向map中添加元素</span></span><br><span class="line">books.set(<span class="string">'html'</span>,&#123;<span class="attr">name</span>:<span class="string">'html'</span>&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(books.size);<span class="comment">//查看集合中的元素</span></span><br><span class="line"><span class="built_in">console</span>.log(books.get(<span class="string">'js'</span>));<span class="comment">//通过key获取值</span></span><br><span class="line">books.delete(<span class="string">'js'</span>);<span class="comment">//执行key删除元素</span></span><br><span class="line"><span class="built_in">console</span>.log(books.has(<span class="string">'js'</span>));<span class="comment">//判断map中有没有key</span></span><br><span class="line">book.forEach(<span class="function">(<span class="params">value,key</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(key+<span class="string">'='</span>+value);</span><br><span class="line">&#125;)</span><br><span class="line">books.clear();<span class="comment">//清空map</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;10-1-Set&quot;&gt;&lt;a href=&quot;#10-1-Set&quot; class=&quot;headerlink&quot; title=&quot;10.1 Set&quot;&gt;&lt;/a&gt;10.1 Set&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;一个Set是一堆东西的集合，Set 有点像数组，不过跟数组不一样的
      
    
    </summary>
    
      <category term="ECMAScript 6入门" scheme="http://yoursite.com/categories/ECMAScript-6%E5%85%A5%E9%97%A8/"/>
    
    
      <category term="ECMAScript 6入门" scheme="http://yoursite.com/tags/ECMAScript-6%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>11 模块</title>
    <link href="http://yoursite.com/2019/03/03/es6/11.%E6%A8%A1%E5%9D%97/"/>
    <id>http://yoursite.com/2019/03/03/es6/11.模块/</id>
    <published>2019-03-03T06:12:06.000Z</published>
    <updated>2019-06-06T14:17:33.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>可以根据应用的需求吧代码分成不同的模块，每个模块里可以导出它需要让其他模块使用的东西，在其他模块里面可以导入这些模块，导出的东西。</p></blockquote><blockquote><p>在浏览器中使用模块需要借助 导出</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> name = <span class="string">'wjh'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> age = <span class="number">8</span>;</span><br></pre></td></tr></table></figure><p>导入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//import &#123;name,age&#125; from './school.js';</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> school <span class="keyword">from</span> <span class="string">'./school.js'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(school.name,school.age);</span><br></pre></td></tr></table></figure><p>在页面中引用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;https://google.github.io/traceur-compiler/bin/traceur.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;https://google.github.io/traceur-compiler/bin/BrowserSystem.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;https://google.github.io/traceur-compiler/src/bootstrap.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;module&quot; src=&quot;index.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="重命名"><a href="#重命名" class="headerlink" title="重命名"></a>重命名</h2><p>导出时重命名</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">say</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'say'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> &#123;say <span class="keyword">as</span> say2&#125;;</span><br></pre></td></tr></table></figure><p>导入时重命名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123;say2 as say3&#125; from &apos;./school.js&apos;</span><br></pre></td></tr></table></figure><h2 id="11-3-默认导出"><a href="#11-3-默认导出" class="headerlink" title="11.3 默认导出"></a>11.3 默认导出</h2><p>每个模块都可以有一个默认要导出的东西</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">say</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'say'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>导入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> say <span class="keyword">from</span> <span class="string">'./school.js'</span></span><br></pre></td></tr></table></figure><h2 id="11-4-深度克隆"><a href="#11-4-深度克隆" class="headerlink" title="11.4 深度克隆"></a>11.4 深度克隆</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> parent = &#123;</span><br><span class="line">  age: <span class="number">5</span>,</span><br><span class="line">  hobby: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">  home: &#123;<span class="attr">city</span>: <span class="string">'北京'</span>&#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> child = extendDeep(parent);</span><br><span class="line">child.age = <span class="number">6</span>;</span><br><span class="line">child.hobby.push(<span class="string">'4'</span>);</span><br><span class="line">child.home.city = <span class="string">'广东'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'child '</span>, child); <span class="comment">//[1, 2, 3, 4]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'parent '</span>, parent);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">extend</span>(<span class="params">parent</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> child;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Object</span>.prototype.toString.call(parent) == <span class="string">'[object Object]'</span>) &#123;</span><br><span class="line">    child = &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> parent) &#123;</span><br><span class="line">      child[key] = extend(parent[key])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">Object</span>.prototype.toString.call(parent) == <span class="string">'[object Array]'</span>) &#123;</span><br><span class="line">    child = parent.map(<span class="function"><span class="params">item</span> =&gt;</span> extend(item));</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> parent;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> child;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">extendDeep</span>(<span class="params">parent, child</span>) </span>&#123;</span><br><span class="line">  child = child || &#123;&#125;;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> parent) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> parent[key] === <span class="string">"object"</span>) &#123;</span><br><span class="line">      child[key] = (<span class="built_in">Object</span>.prototype.toString.call(parent[key]) === <span class="string">"[object Array]"</span>) ? [] : &#123;&#125;;</span><br><span class="line">      extendDeep(parent[key], child[key]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      child[key] = parent[key];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> child;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;可以根据应用的需求吧代码分成不同的模块，每个模块里可以导出它需要让其他模块使用的东西，在其他模块里面可以导入这些模块，导出的东西。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;在浏览器中使用模块需要借助 导出&lt;/p&gt;
&lt;/b
      
    
    </summary>
    
      <category term="ECMAScript 6入门" scheme="http://yoursite.com/categories/ECMAScript-6%E5%85%A5%E9%97%A8/"/>
    
    
      <category term="ECMAScript 6入门" scheme="http://yoursite.com/tags/ECMAScript-6%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
</feed>
