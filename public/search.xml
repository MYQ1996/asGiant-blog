<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>个人简历</title>
      <link href="/2019/06/05/resume/"/>
      <url>/2019/06/05/resume/</url>
      
        <content type="html"><![CDATA[<p><strong>梅衍青</strong>    <br>男  ︳   23岁  ︳大专 ︳ 2年工作经验  ︳ 上海   <br>17621515830 ︳<a href>954663633@qq.com</a>  <br>上海工商职业技术学院   移动互联网方向</p><blockquote><p><strong>技能</strong></p></blockquote><p>前端：HTML、CSS、JavaScript<br>前端框架: vue、webpack、cordova、react-native，微信小程序<br>后端：php、node<br>后端框架: thinkphp、express、koa2、egg<br>数据库:mysql、mongodb、redis</p><p>版本控制：git、svn</p><blockquote><p><strong>工作经历</strong>   </p></blockquote><p>上海子杰软件有限公司  2017.01-2018-06  <br>快睿登信息科技(上海)有限公司  2018.06-至今<br>** <br><strong><br></strong></p><blockquote><p>  <strong>项目经验</strong>  </p></blockquote><p>一、风驰后台v0.2&amp;小通分期v0.2  2019.2-至今<br>项目内容:风驰后台、小通分期(汇宝通)作为第二期项目的迭代。小通分期，增加分期功能。<br>技术栈:avuex、vue全家桶、cordva、webpack、less<br>项目类型:网页、app<br>项目经验:技术点调用cordva插件，获取手机通讯录、GPS、联系人、电量、极光推送等原生功能。同时迭代风驰后台的页面系统，用户量也大量增加后发现并且处理一些关于手机适配的问题(主要是因为cordva是调用手机中的内核浏览器，出现了css3不兼容的问题)<br><br><br>二、重构风驰后台v0.1  2018年12 – 2019-2<br>项目内容:计划迭代汇宝通后台中，我提出了以下问题。1.前后端有绑定关系，发布后，前后端的这种依赖。2.ui的局限，后台都是使用敏捷开发，那么意味着很多组件是根据技术选型的时候就确定了的。我们现有的框架无法做到ui升级。选择迁回老风驰工程量也会很大(这里的重写包括语法结构都需要重写),选择强行在先有ui框架上修改，工程量无法估计。3.需求其实不是很明确的，只能参照老风驰的样子做，新老风驰经手的人都比较多，都是有什么需求直接加什么需求，但是具体权限和细节根据时间的推移，没有任何文档可以参照，所以建议重构。<br>技术栈:avuex、vue全家桶<br>项目类型:网页<br>项目经验：当时遇到了一个问题，就是这套后台必须兼容手机端的问题，element-ui的缺点也提现出来的，那就是对于手机端的适配，很多插件都会有问题，第二个问题就是前端人手紧缺，原来使用的架构，人手上无法维护。加上时间比较紧张，经过调研，采用了avuex的框架方案，该方案的优势在于json驱动ui的思想理念。以最快的速度，重构了风驰后台。<br> <br>三、黑卡  2018.11-2018-12<br>项目内容:根据个人资质情况，可以进行不同次数的征信洗白，享有最高100，000的额度利率低至银行利率，介绍老铁洗白征信，长期有效，连续签到一年，1000元大奖，三星级会员五星级酒店。<br>技术栈: vue、cordva、webpack、less<br>项目类型：app、网页<br>项目经验：针对于先有公司项目的沉淀，公司决定开启黑卡项目业务，对于vue技术的了解和逐步深入后，公司也对于原生和动态交互提出了更高的要求，针对于目前项目的组件规划和开发。<br> <br>四、汇宝通-后台   2018.08-2018-10<br>项目内容: vue后台贷款系统，引流，贷款模块，用户模块，商品模块，进件模块，风控模块<br>技术栈:vue、webpack、element-ui<br>项目类型：网页<br>项目经验:正对于现在走向组件化的趋势，配合公司领导，进行了后台组件的开发。将原先的贷款系统，引流，贷款模块，用户模块，商品模块，进件模块，风控模块拆分为各个模块，方便与后台页面随时的重构组装，服务与公司将部分模块卖给第三方公司的构想。<br> <br>五、汇宝通-app    2018.07-2018-09<br>项目内容: p2p的线上贷款系统，引流，贷款模块，用户模块，商品模块，进件模块，风控模块为一体的app项目。<br>技术栈:vue、cordva、webpack、less<br>项目类型：app、网页<br>项目经验：离开上一家公司后，我开始了新的征程，这第一次对于node技术进行了了解。前端做到工程和模块的话处理，将人力减少到最小数的敏捷开发。对于项目负责人的架构进行了学习和梳理。了解了关于cordva的插件。对于三个端(网页，安卓，ios)的兼容性，达到最快的试错。对于webpack的改造项目工程目录，达到了，一份代码能兼容三个端，并且还能够调用原生的底层权限。<br> <br>六、梯子网小程序   2018.01-2018-06<br>项目内容: 梯子网为教育局和大型社会培训机构提供一站式多机构管理，其中主要涉及两个难点，一是多机构的管理，不同机构可以定制自己模块下的内容，只有本机构下的人可以看到。二是定制化产生页面，不同的机构可以定制自己的页面栏目，根据自己的需要展示对应的内容，这还涉及到了不同机构、角色的权限问题。<br>项目类型: 微信小程序<br>技术栈: wxml、wxss、js<br>项目经验：冬去春来，公司决定实现一个小程序的工作规划，对于项目探索工作交给了我。对于视频的学习，可能因为有着react-native项目经验，对于新起的mvvm这样的设计思路有着充分的了解。所以上手写小程序，反而觉得比较简单。对于微信组件和api进行了了解和使用。对于wx.request进行了封装，和关于一些常用函数的封装，针对一些常用组件的封装。例如wx.getStorage、清空缓存、分享、弹窗等等。方便对于其他协作的伙伴调用和使用。<br> <br>七、上海天马Portal系统    2017.11-2017.12<br>项目内容: 上海天马Portal管理系统是为了在公司内部整合所有业务系统，规范统一入口，消息通知，业务处理，是业务统一入口，用户无需牢记各个应用系统的地址，降低用户使用时的困难，避免用户来回切换业务系统，提升用户工作效率。<br><br>项目类型: 网页<br>技术栈:layui、jquery、html<br>项目经验:第一次带2个实习生一起工作，心里美滋滋啊(不排除项目比较简单)，关于前端我才用了layui框架，使用过bootstrap后，总觉得layui的页面的美观程度还是比bootstrap框架要优雅很多的。也让我开始了解代码的书写规范，按照美工的设计与后台的配合，完成了项目的进度。<br> <br>八、英语学习-EnglishOnlie   2017.08-2017.10<br>项目内容: 软件分学生端和教师端，学生端主要实现学习功能，学习进度通过闯关和教师操作控制，教师端主要实现管理功能，管理学生帐户，学习资源管理，学习进度管理。<br>项目类型:app、网页、微信网页<br>技术栈：react-native、html、jquery<br>项目经验:这个公司遗留下的一个比较老的项目，不少组件使用的是react-android，不兼容ios的组件，这个工作的主要任务，就是将ios的兼容问题彻底的解决、并且兼容网页与微信网页。这个项目最大的特色应该就是学生读英语的功能，可以经过讯飞系统的语言识别，来判断学生的读音，从而给予评分。第一次了解了网页的录音和微信网页的录音调用是不同的，微信的调用，是不同的，微信有着自己独有的api。<br> <br>九、玖龙移动销售    2017.05-2017.07<br>项目内容: 在前端、管理查看集团的产品、订单、销售统计信息。<br>项目类型:app<br>技术栈:react-native<br>项目经验:经过之前三个月的学习，加入了新的项目组，对于这个项目而言，并没有参加项目的原始的开发计划。当时公司其他的项目比较紧张，与项目组长两个人直接飞往东莞珑石集团技术部门，进行了bug的修复，刚刚参加项目的时候，主要是对于ios的适配问题进行了修复工作(因为我是mac),了解了关于ios的info.list。第一次对于ios白名单有所认识，了解了关于前端调用原生的，最大的问题，是关于一些原生的权限问题。<br> <br>十、中国国际珠宝交易平台  2017.01-2017.04  <br>项目内容: “中国国际珠宝交易平台” APP 具有产品搜索/浏览、商品购买、评价、退换货等功能<br>项目类型:app<br>技术栈:react-native<br>项目经验:这个项目是加入前端组织行列的第一个项目，你知道在2017年，这个react-native在大环境下，其实我认为还不算很成熟，当时项目组没有什么这方面的技术，就自发的组织学习这项技术。几个通宵后的学习，学了基本上的flex布局，对于react-natve的特殊的css处理方法进行了了解，了解了fetch的网络请求方案，让工作的环境中还算能够使用这项技术，因为那时候刚刚入行，代码的稚嫩，如今看来还是有很大的问题。</p><blockquote><p><strong>开源项目</strong></p></blockquote><p>**<br><a href="https://github.com/MYQ1996/asGiant-admin.git" target="_blank" rel="noopener">https://github.com/MYQ1996/asGiant-admin.git</a><br>项目内容:</p><ul><li>基于egg架构的自动生成接口的框架</li><li>你可以这么理解这个框架，就是在你配置完数据后，就生成了增删改查接口，也同时生成了相关的栏目。</li><li>这样即使你是一个不懂后端的同学，你也可以直接调用接口给前端使用</li></ul><p>_<br>在这个项目中，我希望能解决，前端对于后端的不熟悉和了解，但是对于调用接口比较熟悉的业务现状。<br>完成了以下模块。<br>对于表的增删改查操作、增删改字段的信息、短信管理(只需配置短信的key)、邮箱管理(需配置邮箱的key)、人员注册(手机号、用户名、邮箱)、针对于字段添加了人员权限。之后的规划想做个cms，针对于seo的网站排名调优。对于增加之后，直接生成相对应的前端页面，使用node写了一个微信机器人，符合时代需求，达到人工智能，和机器人聊天的过程中，直接操作平台，完成接口的操作。希望之后，技术提升之后，能够够写出一套兼容性比较高的组件，直接配合平台的使用，有考虑过taro，但是感觉对于原生的调用不足，还在思考这部分的工作。最后达到敏捷开发的效果。(因为加班的缘故，所以一直没有做完)。</p><blockquote><p>掘金博客</p></blockquote><p><a href="https://juejin.im/user/5b4e88986fb9a04fba6e752b" target="_blank" rel="noopener">https://juejin.im/user/5b4e88986fb9a04fba6e752b</a></p><blockquote><p><strong>自我描述</strong></p></blockquote><pre><code>对于技术出生，还是个大专。还是受到不少的压力的，现在毕竟都觉得本科生比较好培养嘛。我是15年进的大专。第一年被选中参加了，学校的比赛班，主要就是负责学校对外的比赛参加。大二开始不参加日常课程直接进入培训，大三进入校企合作上班。对于技术不断追求，热衷学习研究新技术，实践在项目中。对于前后端有着一定的理解，希望能达到技术一个新的高度。</code></pre><p>ps: 希望能和贵公司有着合作的机会，也希望能成为你的同事。</p>]]></content>
      
      
      <categories>
          
          <category> 个人简历 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人简历 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>13. promise</title>
      <link href="/2019/03/06/es6/13.promise/"/>
      <url>/2019/03/06/es6/13.promise/</url>
      
        <content type="html"><![CDATA[<h1 id="13-promise"><a href="#13-promise" class="headerlink" title="13. promise"></a>13. promise</h1><p><a name="4f152e8b"></a></p><h3 id="13-1-异步回调"><a href="#13-1-异步回调" class="headerlink" title="13.1 异步回调"></a>13.1 异步回调</h3><p><a name="7aab903b"></a></p><h4 id="13-1-1-回调地狱"><a href="#13-1-1-回调地狱" class="headerlink" title="13.1.1 回调地狱"></a>13.1.1 回调地狱</h4><p>在需要多个操作的时间，会导致多个回调函数嵌套，导致代码不够直观，就常说的回调地域<br><a name="d82a786f"></a></p><h4 id="13-1-2-并行结果"><a href="#13-1-2-并行结果" class="headerlink" title="13.1.2 并行结果"></a>13.1.2 并行结果</h4><p>如果几个异步操作之间并没有前后顺序之分，但需要等多个异步完成操作完成后才能执行后续的任务，无法实现并行节约时间<br><a name="0afb1df7"></a></p><h3 id="13-2-Promise"><a href="#13-2-Promise" class="headerlink" title="13.2 Promise"></a>13.2 Promise</h3><p>promise本意是承诺，在程序中的意思就是承诺我过一段时间后会给你一个结果。什么时间会用到过一段时间？答案是异步操作，异步是指可能比较长时间才有结果的才做，例如网络请求、读取本地文件等<br><a name="b6db77bf"></a></p><h3 id="13-3-Promise的三种状态"><a href="#13-3-Promise的三种状态" class="headerlink" title="13.3 Promise的三种状态"></a>13.3 Promise的三种状态</h3><ul><li>Pending Promise对象势力创建时候的初始化状态</li><li>Fulfilled 可以理解为成功的状态</li><li>Rejected 可以理解为失败的状态<blockquote><p>then方法就是用来指定Promise 对象的状态改变时确定执行的操作，resolve时执行第一个函数（onFulfilled）,reject时执行第二函数（onRejected）</p></blockquote></li></ul><p><a name="6e2b24a8"></a></p><h3 id="13-4-构造一个Promise"><a href="#13-4-构造一个Promise" class="headerlink" title="13.4 构造一个Promise"></a>13.4 构造一个Promise</h3><p><a name="3929aa57"></a></p><h4 id="13-4-1-使用Promise"><a href="#13-4-1-使用Promise" class="headerlink" title="13.4.1 使用Promise"></a>13.4.1 使用Promise</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">Math</span>.random()&gt;<span class="number">0.5</span>)</span><br><span class="line">      resolve(<span class="string">'This is resolve!'</span>)</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      reject(<span class="string">'This is reject'</span>)</span><br><span class="line">    &#125;,<span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line">promise.then(Fulfilled,Rejected)</span><br></pre></td></tr></table></figure><ul><li>构造一个Promise实例需要给Promise构造函数传入一个函数</li><li>传入的函数需要有两个形参，两个形参都是function类型的参数。<ul><li>第一个形参运行后会让Promise实例处于resolve状态，所以我们一般给第一个形参命名为resolve，使 Promise对象的状态改变成成功，同时传递一个参数用于后续成功后的操作</li><li>第一个形参运行后悔让Promise实例处于reject状态，所以我们一般给第一个形参命名为reject，将Promise对象的状态改变为失败，同事将错误的信息传递到后续错误处理的操作</li></ul></li></ul><p><a name="3ef31b35"></a></p><h4 id="13-4-2-es5模拟Promise"><a href="#13-4-2-es5模拟Promise" class="headerlink" title="13.4.2 es5模拟Promise"></a>13.4.2 es5模拟Promise</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Promise</span>(<span class="params">fn</span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.success(data);</span><br><span class="line">&#125;,(error)=&gt;&#123;</span><br><span class="line"><span class="keyword">this</span>.error();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.prtotype.resolve = <span class="function"><span class="keyword">function</span> (<span class="params">data</span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.success(data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.prototype.then = <span class="function"><span class="keyword">function</span> (<span class="params">success,error</span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.success = success;</span><br><span class="line"><span class="keyword">this</span>.error = error;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="d41d8cd9-1"></a></p><p>####<br><a name="83ab08f5"></a></p><h4 id="13-4-3-es5模拟Promise"><a href="#13-4-3-es5模拟Promise" class="headerlink" title="13.4.3 es5模拟Promise"></a>13.4.3 es5模拟Promise</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Promise</span></span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>(fn)&#123;</span><br><span class="line">  fn(<span class="function">(<span class="params">data</span>)=&gt;</span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.success(data);</span><br><span class="line">      &#125;,(error)=&gt;&#123;</span><br><span class="line">      <span class="keyword">this</span>.error();</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  resolve(data)&#123;</span><br><span class="line">  <span class="keyword">this</span>.success(data);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  reject(error)&#123;</span><br><span class="line">  <span class="keyword">this</span>.error(error);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  then(success,error)&#123;</span><br><span class="line">  <span class="keyword">this</span>.success = success;</span><br><span class="line">    <span class="keyword">this</span>.error = error;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="54b4db86"></a></p><h3 id="13-5-promise-做为函数的返回值"><a href="#13-5-promise-做为函数的返回值" class="headerlink" title="13.5 promise 做为函数的返回值"></a>13.5 promise 做为函数的返回值</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajaxPromise</span>(<span class="params">queryUrl</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">  xhr.open(<span class="string">'GET'</span>,queryUrl,ture);</span><br><span class="line">    xhr.send(<span class="literal">null</span>);</span><br><span class="line">    xhr.onreadystatechange = <span class="function"><span class="params">()</span> =&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(xhr.readyState === <span class="number">4</span> )&#123;</span><br><span class="line">        <span class="keyword">if</span>(xhr.status === <span class="number">200</span>)&#123;</span><br><span class="line">          resolve(xhr.responseText);</span><br><span class="line">          &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          reject(xhr.responseText);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ajaxPromise(<span class="string">'http://www.baidu.com'</span>)</span><br><span class="line">.then(<span class="function">(<span class="params">value</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.error(err);</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure><p><a name="39726a91"></a></p><h3 id="13-6-promise的链式调用"><a href="#13-6-promise的链式调用" class="headerlink" title="13.6 promise的链式调用"></a>13.6 promise的链式调用</h3><ul><li>每次调用返回的都是一个新的Promise实例</li><li>链式调用的参数通过返回值传递</li></ul><p>then 可以使用链式调用的写法原因在于，每一次执行该方法时总是会返回一个 Promise 对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">readFile(<span class="string">'1.txt'</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(data);</span><br><span class="line">  <span class="keyword">return</span> readFile(data);</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(err);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><a name="f9ae395a"></a></p><h3 id="13-7-promise-API"><a href="#13-7-promise-API" class="headerlink" title="13.7 promise API"></a>13.7 promise API</h3><p><a name="9d830bcd"></a></p><h4 id="13-7-1-Promise-all"><a href="#13-7-1-Promise-all" class="headerlink" title="13.7.1 Promise.all"></a>13.7.1 Promise.all</h4><ul><li>参数:接受一个数组，数组内都是Promise实例</li><li>返回值: 返回一个 promise 实例，这个promise 实例的状态转移取决于参数的 promise实例的状态变化。当参数处于resolve状态时，返回resolve状态。如果参数中任意一个实例处于reject状态，返回的promise实例变为reject状态。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.all([p1,p2]).then(<span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">//[ '2.txt', '2' ]</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>不管两个promise谁先完成，Promise.all 方法会按照数组里面的顺序将结果返回</p></blockquote><p><a name="7ad9f336"></a></p><h4 id="13-7-2-Promise-race"><a href="#13-7-2-Promise-race" class="headerlink" title="13.7.2 Promise.race"></a>13.7.2 Promise.race</h4><ul><li>参数:接受一个数组，数组内都是Promise实例</li><li>返回值: 返回一个 promise 实例，这个promise 实例的状态转移取决于参数的 promise实例的状态变化。当参数处于resolve状态时，返回resolve状态。如果参数中任意一个实例处于reject状态，返回的promise实例变为reject状态。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.race([p1,p2]).then(<span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">//[ '2.txt', '2' ]</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><a name="a007e556"></a></p><h4 id="13-7-3-Promise-resolve"><a href="#13-7-3-Promise-resolve" class="headerlink" title="13.7.3 Promise.resolve"></a>13.7.3 Promise.resolve</h4><p>返回一个Promise 实例，这个实例处于resolve状态。<br>根据传入的参数不同有不同的功能:</p><ul><li><p>值(对象、数组、字符串等):作为resolve传递出去的值</p></li><li><p>Promise 实例 : 原封不动返回<br><a name="Promise.reject"></a></p><h4 id="Promise-reject"><a href="#Promise-reject" class="headerlink" title="Promise.reject"></a>Promise.reject</h4><p>返回一个Promise实例，这个实例处于reject状态</p></li><li><p>参数一般就是抛出的错误信息。</p></li></ul><p><a name="c5315b70"></a></p><h3 id="13-8-q"><a href="#13-8-q" class="headerlink" title="13.8 q"></a>13.8 q</h3><p>Q是一个在Javascrip中实现promise的模块<br><a name="ad6ccffe"></a></p><h4 id="13-8-1-q的基本用法"><a href="#13-8-1-q的基本用法" class="headerlink" title="13.8.1 q的基本用法"></a>13.8.1 q的基本用法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Q = <span class="built_in">require</span>(<span class="string">'q'</span>);</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">read</span>(<span class="params">filename</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> deferred = Q.defer();</span><br><span class="line">  fs.readFile(filename,<span class="string">'utf8'</span>,<span class="function"><span class="keyword">function</span>)(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(err)&#123;</span><br><span class="line">    deferred.reject(err);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  deferred.resolve(data);</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">read(<span class="string">'1.txt1'</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;,funtcion(error)&#123;</span><br><span class="line"><span class="built_in">console</span>.error(error);                    </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><a name="b3b30623"></a></p><h4 id="13-8-2-q的简单实现"><a href="#13-8-2-q的简单实现" class="headerlink" title="13.8.2 q的简单实现"></a>13.8.2 q的简单实现</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    defer()&#123;</span><br><span class="line">        <span class="keyword">var</span> _success,_error;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            resolve(data)&#123;</span><br><span class="line">                _success(data);</span><br><span class="line">            &#125;,</span><br><span class="line">            reject(err)&#123;</span><br><span class="line">                _error(err);</span><br><span class="line">            &#125;,</span><br><span class="line">            promise:&#123;</span><br><span class="line">                then(success,error)&#123;</span><br><span class="line">                    _success = success;</span><br><span class="line">                    _error = error;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="170dcbc6"></a></p><h4 id="13-8-3-q的实现"><a href="#13-8-3-q的实现" class="headerlink" title="13.8.3 q的实现"></a>13.8.3 q的实现</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> defer = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> pending = [], value;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        resolve: <span class="function"><span class="keyword">function</span> (<span class="params">_value</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (pending) &#123;</span><br><span class="line">                value = _value;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, ii = pending.length; i &lt; ii; i++) &#123;</span><br><span class="line">                    <span class="keyword">var</span> callback = pending[i];</span><br><span class="line">                    callback(value);</span><br><span class="line">                &#125;</span><br><span class="line">                pending = <span class="literal">undefined</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        promise: &#123;</span><br><span class="line">            then: <span class="function"><span class="keyword">function</span> (<span class="params">callback</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (pending) &#123;</span><br><span class="line">                    pending.push(callback);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    callback(value);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><a name="fd0c93ac"></a></p><h3 id="13-9-bluebird"><a href="#13-9-bluebird" class="headerlink" title="13.9 bluebird"></a>13.9 bluebird</h3><blockquote><p>实现 promise 标准的库是功能最全，速度最快的一个库</p></blockquote><p><a name="9aa0ad9c"></a></p><h4 id="13-9-1-bluebird经典使用"><a href="#13-9-1-bluebird经典使用" class="headerlink" title="13.9.1 bluebird经典使用"></a>13.9.1 bluebird经典使用</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="built_in">Promise</span> = <span class="built_in">require</span>(<span class="string">'./bluebird'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> readFile = <span class="built_in">Promise</span>.promisify(<span class="built_in">require</span>(<span class="string">"fs"</span>).readFile);</span><br><span class="line">readFile(<span class="string">"1.txt"</span>, <span class="string">"utf8"</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">contents</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(contents);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">Promise</span>.promisifyAll(<span class="built_in">require</span>(<span class="string">"fs"</span>));</span><br><span class="line"></span><br><span class="line">fs.readFileAsync(<span class="string">"1.txt"</span>, <span class="string">"utf8"</span>).then(<span class="function"><span class="keyword">function</span> (<span class="params">contents</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(contents);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><a name="86eaf89e"></a></p><h4 id="13-9-2-bluebird简单实现"><a href="#13-9-2-bluebird简单实现" class="headerlink" title="13.9.2 bluebird简单实现"></a>13.9.2 bluebird简单实现</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    promisify(fn)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> args = <span class="built_in">Array</span>.from(<span class="built_in">arguments</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">                fn.apply(<span class="literal">null</span>, args.concat(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                        reject(err);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        resolve(<span class="built_in">arguments</span>[<span class="number">1</span>])</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;));</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    promisifyAll(obj)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> attr <span class="keyword">in</span> obj)&#123;</span><br><span class="line">            <span class="keyword">if</span>(obj.hasOwnProperty(attr) &amp;&amp; <span class="keyword">typeof</span> obj[attr] ==<span class="string">'function'</span>)&#123;</span><br><span class="line">                obj[attr+<span class="string">'Async'</span>] = <span class="keyword">this</span>.promisify(obj[attr]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="59ff5e64"></a></p><h3 id="13-10-动画"><a href="#13-10-动画" class="headerlink" title="13.10 动画"></a>13.10 动画</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;move&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">    &lt;style&gt;</span></span><br><span class="line"><span class="regexp">        .square&#123;</span></span><br><span class="line"><span class="regexp">            width:40px;</span></span><br><span class="line"><span class="regexp">            height:40px;</span></span><br><span class="line"><span class="regexp">            border-radius: 50%;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        .square1&#123;</span></span><br><span class="line"><span class="regexp">            background-color: red;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        .square2&#123;</span></span><br><span class="line"><span class="regexp">            background-color: yellow;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        .square3&#123;</span></span><br><span class="line"><span class="regexp">            background-color: blue;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>style&gt;</span><br><span class="line">&lt;<span class="regexp">/head&gt;</span></span><br><span class="line"><span class="regexp">&lt;body&gt;</span></span><br><span class="line"><span class="regexp">&lt;div class="square square1" style="margin-left: 0"&gt;&lt;/</span>div&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"square square2"</span> style=<span class="string">"margin-left: 0"</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"square square3"</span> style=<span class="string">"margin-left: 0"</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">  var square1 = document.querySelector('.square1');</span></span><br><span class="line"><span class="regexp">  var square2 = document.querySelector('.square2');</span></span><br><span class="line"><span class="regexp">  var square3 = document.querySelector('.square3');</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  /</span>*<span class="function"><span class="keyword">function</span> <span class="title">move</span>(<span class="params">element,target,resolve</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> timer = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> marginLeft = <span class="built_in">parseInt</span>(element.style.marginLeft, <span class="number">10</span>);</span><br><span class="line">      <span class="keyword">if</span>(marginLeft == target)&#123;</span><br><span class="line">        resolve();</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        element.style.marginLeft = ++marginLeft+<span class="string">'px'</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,<span class="number">13</span>);</span><br><span class="line">  &#125;*<span class="regexp">/</span></span><br><span class="line"><span class="regexp">  function move(element,target,resolve)&#123;</span></span><br><span class="line"><span class="regexp">    let current = 0;</span></span><br><span class="line"><span class="regexp">    let timer = setInterval(function()&#123;</span></span><br><span class="line"><span class="regexp">      element.style.transform=`translateX($&#123;++current&#125;px)`;</span></span><br><span class="line"><span class="regexp">      if(current&gt;target)&#123;</span></span><br><span class="line"><span class="regexp">        clearInterval(timer);</span></span><br><span class="line"><span class="regexp">        resolve();</span></span><br><span class="line"><span class="regexp">      &#125;;</span></span><br><span class="line"><span class="regexp">    &#125;,13);</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">  function animate(element,target)&#123;</span></span><br><span class="line"><span class="regexp">    return new Promise(function(resolve,reject)&#123;</span></span><br><span class="line"><span class="regexp">      move(element,target,resolve);</span></span><br><span class="line"><span class="regexp">    &#125;);</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">  animate(square1,100)</span></span><br><span class="line"><span class="regexp">    .then(function()&#123;</span></span><br><span class="line"><span class="regexp">      return animate(square2,100);</span></span><br><span class="line"><span class="regexp">    &#125;)</span></span><br><span class="line"><span class="regexp">    .then(function()&#123;</span></span><br><span class="line"><span class="regexp">      return animate(square3,100);</span></span><br><span class="line"><span class="regexp">    &#125;);</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><p><a name="c6923f5a"></a></p><h3 id="13-11-co"><a href="#13-11-co" class="headerlink" title="13.11. co"></a>13.11. co</h3><p><a name="d65c4d2f"></a></p><h4 id="13-11-1-co初体验"><a href="#13-11-1-co初体验" class="headerlink" title="13.11.1 co初体验"></a>13.11.1 co初体验</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getNumber</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve,reject</span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">let</span> number = <span class="built_in">Math</span>.random();</span><br><span class="line">      <span class="keyword">if</span>(number &gt;<span class="number">.5</span>)&#123;</span><br><span class="line">        resolve(number);</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        reject(<span class="string">'数字太小'</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,<span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> *<span class="title">read</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="keyword">yield</span> getNumber();</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">  <span class="keyword">let</span> b = <span class="keyword">yield</span> <span class="string">'b'</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(b);</span><br><span class="line">  <span class="keyword">let</span> c = <span class="keyword">yield</span> getNumber();</span><br><span class="line">  <span class="built_in">console</span>.log(c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">co</span>(<span class="params">gen</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> g = gen();</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">next</span>(<span class="params">lastValue</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">let</span> &#123;done,value&#125; = g.next(lastValue);</span><br><span class="line">      <span class="keyword">if</span>(done)&#123;</span><br><span class="line">         resolve(lastValue);</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(value <span class="keyword">instanceof</span> <span class="built_in">Promise</span>)&#123;</span><br><span class="line">          value.then(next,<span class="function"><span class="keyword">function</span>(<span class="params">val</span>)</span>&#123;</span><br><span class="line">            reject(val);</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          next(value);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    next();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line">co(read).then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">reason</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(reason);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><a name="fb5ae0eb"></a></p><h4 id="13-11-2-co连续读文件"><a href="#13-11-2-co连续读文件" class="headerlink" title="13.11.2 co连续读文件"></a>13.11.2 co连续读文件</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readFile</span>(<span class="params">filename</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve,reject</span>) </span>&#123;</span><br><span class="line">    fs.readFile(filename,<span class="string">'utf8'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(err)</span><br><span class="line">        reject(err);</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        resolve(data);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> *<span class="title">read</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="keyword">yield</span> readFile(<span class="string">'./1.txt'</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">  <span class="keyword">let</span> b = <span class="keyword">yield</span> readFile(<span class="string">'./2.txt'</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">co</span>(<span class="params">gen</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> g = gen();</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">next</span>(<span class="params">val</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> &#123;done,value&#125; = g.next(val);</span><br><span class="line">    <span class="keyword">if</span>(!done)&#123;</span><br><span class="line">      value.then(next);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  next();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="118b50d1"></a></p><h3 id="13-12-Promise-A-完整实现"><a href="#13-12-Promise-A-完整实现" class="headerlink" title="13.12 Promise/A+完整实现"></a>13.12 Promise/A+完整实现</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Promise</span>(<span class="params">executor</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> self = <span class="keyword">this</span>;</span><br><span class="line">  <span class="comment">// 默认状态pending</span></span><br><span class="line">  self.status = <span class="string">"pending"</span>;</span><br><span class="line">  <span class="comment">// 此变量里放着此promise的结果</span></span><br><span class="line">  self.value = <span class="literal">undefined</span>;</span><br><span class="line">  <span class="comment">// 存放所有成功的回调函数</span></span><br><span class="line">  self.onResolvedCallbacks = [];</span><br><span class="line">  <span class="comment">// 存放所有的失败的回调函数</span></span><br><span class="line">  self.onRejectedCallbacks = [];</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 调用方法promise 变成成功状态</span></span><br><span class="line">  <span class="comment">// resolve的时候你把值传过来</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (value <span class="keyword">instanceof</span> <span class="built_in">Promise</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> value.then(resolve, reject)</span><br><span class="line">    &#125;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// 异步执行所有的回调函数</span></span><br><span class="line">      <span class="keyword">if</span> (self.status == <span class="string">'pending'</span>) &#123;</span><br><span class="line">        self.value = value;</span><br><span class="line">        self.status = <span class="string">'resolved'</span>;</span><br><span class="line">        self.onResolvedCallbacks.forEach(<span class="function"><span class="params">item</span> =&gt;</span> item(value));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 调用方法把当前promise变成失败</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">reject</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (self.status == <span class="string">'pending'</span>) &#123;</span><br><span class="line">        self.value = value;</span><br><span class="line">        self.status = <span class="string">'rejected'</span>;</span><br><span class="line">        self.onRejectedCallbacks.forEach(<span class="function"><span class="params">item</span> =&gt;</span> item(value));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    executor(resolve, reject);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    reject(e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolvePromise</span>(<span class="params">promise2, x, resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (promise2 === x) &#123;</span><br><span class="line">    <span class="keyword">return</span> reject(<span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'循环引用'</span>));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> then, called;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (x != <span class="literal">null</span> &amp;&amp; ((<span class="keyword">typeof</span> x == <span class="string">'object'</span> || <span class="keyword">typeof</span> x == <span class="string">'function'</span>))) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      then = x.then;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> then == <span class="string">'function'</span>) &#123;</span><br><span class="line">        then.call(x, <span class="function"><span class="keyword">function</span> (<span class="params">y</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">if</span> (called)<span class="keyword">return</span>;</span><br><span class="line">          called = <span class="literal">true</span>;</span><br><span class="line">          resolvePromise(promise2, y, resolve, reject);</span><br><span class="line">        &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">r</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">if</span> (called)<span class="keyword">return</span>;</span><br><span class="line">          called = <span class="literal">true</span>;</span><br><span class="line">          reject(r);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        resolve(x);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="keyword">if</span> (called)<span class="keyword">return</span>;</span><br><span class="line">      called = <span class="literal">true</span>;</span><br><span class="line">      reject(e);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    resolve(x);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// onFullfilled成功的回调,onReject失败的回调</span></span><br><span class="line"><span class="built_in">Promise</span>.prototype.then = <span class="function"><span class="keyword">function</span> (<span class="params">onFulfilled, onRejected</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> self = <span class="keyword">this</span>;</span><br><span class="line">  onFulfilled = <span class="keyword">typeof</span> onFulfilled == <span class="string">'function'</span> ? onFulfilled : <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line">  &#125;;</span><br><span class="line">  onRejected = <span class="keyword">typeof</span> onRejected == <span class="string">'function'</span> ? onRejected : <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> value</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">let</span> promise2;</span><br><span class="line">  <span class="keyword">if</span> (self.status == <span class="string">'resolved'</span>) &#123;</span><br><span class="line">    promise2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">      setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">let</span> x = onFulfilled(self.value);</span><br><span class="line">          resolvePromise(promise2, x, resolve, reject);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">          reject(e);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (self.status == <span class="string">'rejected'</span>) &#123;</span><br><span class="line">    promise2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">      setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">let</span> x = onRejected(self.value);</span><br><span class="line">          resolvePromise(promise2, x, resolve, reject);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">          reject(e);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (self.status == <span class="string">'pending'</span>) &#123;</span><br><span class="line">    promise2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">      self.onResolvedCallbacks.push(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">let</span> x = onFulfilled(value);</span><br><span class="line">          resolvePromise(promise2, x, resolve, reject);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">          reject(e);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      self.onRejectedCallbacks.push(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">let</span> x = onRejected(value);</span><br><span class="line">          resolvePromise(promise2, x, resolve, reject);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">          reject(e);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> promise2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Promise</span>.prototype.catch = <span class="function"><span class="keyword">function</span> (<span class="params">onRejected</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.then(<span class="literal">null</span>, onRejected);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Promise</span>.all = <span class="function"><span class="keyword">function</span> (<span class="params">promises</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> result = [];</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; promises.length; i++) &#123;</span><br><span class="line">      promises[i].then(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">        result[i] = data;</span><br><span class="line">        <span class="keyword">if</span> (++count == promises.length) &#123;</span><br><span class="line">          resolve(result);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">        reject(err);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.deferred = <span class="built_in">Promise</span>.defer = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> defer = &#123;&#125;;</span><br><span class="line">  defer.promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    defer.resolve = resolve;</span><br><span class="line">    defer.reject = reject;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> defer;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * npm i -g promises-aplus-tests</span></span><br><span class="line"><span class="comment"> * promises-aplus-tests Promise.js</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="built_in">module</span>.exports = <span class="built_in">Promise</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ECMAScript 6入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ECMAScript 6入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>12. JavaScript(ES6) 中条件语句.md</title>
      <link href="/2019/03/03/es6/12.JavaScript(ES6)%20%E4%B8%AD%E6%9D%A1%E4%BB%B6%E8%AF%AD%E5%8F%A5/"/>
      <url>/2019/03/03/es6/12.JavaScript(ES6)%20%E4%B8%AD%E6%9D%A1%E4%BB%B6%E8%AF%AD%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<h3 id="12-1-使用-Array-includes-来处理多个条件"><a href="#12-1-使用-Array-includes-来处理多个条件" class="headerlink" title="12.1 使用 Array.includes 来处理多个条件"></a>12.1 使用 Array.includes 来处理多个条件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">fruit</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (fruit == <span class="string">'apple'</span> || fruit == <span class="string">'strawberry'</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'red'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优化变成 -&gt;&gt;</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">fruit</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 条件提取到数组中</span></span><br><span class="line">  <span class="keyword">const</span> redFruits = [<span class="string">'apple'</span>, <span class="string">'strawberry'</span>, <span class="string">'cherry'</span>, <span class="string">'cranberries'</span>];</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">if</span> (redFruits.includes(fruit)) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'red'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="5bae05e6"></a></p><h3 id="12-2-减少嵌套，提前使用-return-语句"><a href="#12-2-减少嵌套，提前使用-return-语句" class="headerlink" title="12.2 减少嵌套，提前使用 return 语句"></a>12.2 减少嵌套，提前使用 return 语句</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">fruit, quantity</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> redFruits = [<span class="string">'apple'</span>, <span class="string">'strawberry'</span>, <span class="string">'cherry'</span>, <span class="string">'cranberries'</span>];</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// 条件 1：fruit 必须有值</span></span><br><span class="line">  <span class="keyword">if</span> (fruit) &#123;</span><br><span class="line">    <span class="comment">// 条件 2：必须为红色</span></span><br><span class="line">    <span class="keyword">if</span> (redFruits.includes(fruit)) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'red'</span>);</span><br><span class="line"> </span><br><span class="line">      <span class="comment">// 条件 3：数量必须大于 10</span></span><br><span class="line">      <span class="keyword">if</span> (quantity &gt; <span class="number">10</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'big quantity'</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'No fruit!'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 测试结果</span></span><br><span class="line">test(<span class="literal">null</span>); <span class="comment">// 抛出错误：No fruits</span></span><br><span class="line">test(<span class="string">'apple'</span>); <span class="comment">// 打印：red</span></span><br><span class="line">test(<span class="string">'apple'</span>, <span class="number">20</span>); <span class="comment">// 打印：red，big quantity</span></span><br></pre></td></tr></table></figure><p>优化</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 在发现无效条件时提前 return */</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">fruit, quantity</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> redFruits = [<span class="string">'apple'</span>, <span class="string">'strawberry'</span>, <span class="string">'cherry'</span>, <span class="string">'cranberries'</span>];</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// 条件 1：提前抛出错误</span></span><br><span class="line">  <span class="keyword">if</span> (!fruit) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'No fruit!'</span>);</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// 条件2：必须为红色</span></span><br><span class="line">  <span class="keyword">if</span> (redFruits.includes(fruit)) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'red'</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 条件 3：数量必须大于 10</span></span><br><span class="line">    <span class="keyword">if</span> (quantity &gt; <span class="number">10</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'big quantity'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了减少一个嵌套层级，优化编码风格</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 在发现无效条件时提前 return */</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">fruit, quantity</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> redFruits = [<span class="string">'apple'</span>, <span class="string">'strawberry'</span>, <span class="string">'cherry'</span>, <span class="string">'cranberries'</span>];</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">if</span> (!fruit) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'No fruit!'</span>); <span class="comment">// 条件 1：提前抛出错误</span></span><br><span class="line">  <span class="keyword">if</span> (!redFruits.includes(fruit)) <span class="keyword">return</span>;  <span class="comment">// 条件 2：当 fruit 不是红色的时候，提前 return</span></span><br><span class="line"> </span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'red'</span>);</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// 条件 3：必须是大量存在</span></span><br><span class="line">  <span class="keyword">if</span> (quantity &gt; <span class="number">10</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'big quantity'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="94b57cfd"></a></p><h3 id="12-3-使用函数的默认参数-和-解构"><a href="#12-3-使用函数的默认参数-和-解构" class="headerlink" title="12.3 使用函数的默认参数 和 解构"></a>12.3 使用函数的默认参数 和 解构</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">fruit, quantity</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!fruit) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">const</span> q = quantity || <span class="number">1</span>; <span class="comment">// 如果没有提供 quantity 参数，则默认为 1</span></span><br><span class="line"> </span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`We have <span class="subst">$&#123;q&#125;</span> <span class="subst">$&#123;fruit&#125;</span>!`</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 测试结果</span></span><br><span class="line">test(<span class="string">'banana'</span>); <span class="comment">// We have 1 banana!</span></span><br><span class="line">test(<span class="string">'apple'</span>, <span class="number">2</span>); <span class="comment">// We have 2 apple!</span></span><br></pre></td></tr></table></figure><p>但是q在这边不直观所有优化</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">fruit, quantity = <span class="number">1</span></span>) </span>&#123; <span class="comment">// i如果没有提供 quantity 参数，则默认为 1</span></span><br><span class="line">  <span class="keyword">if</span> (!fruit) <span class="keyword">return</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`We have <span class="subst">$&#123;quantity&#125;</span> <span class="subst">$&#123;fruit&#125;</span>!`</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 测试结果</span></span><br><span class="line">test(<span class="string">'banana'</span>); <span class="comment">// We have 1 banana!</span></span><br><span class="line">test(<span class="string">'apple'</span>, <span class="number">2</span>); <span class="comment">// We have 2 apple!</span></span><br></pre></td></tr></table></figure><p>但是这边 也可能是个对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 解构 —— 只获得 name 属性</span></span><br><span class="line"><span class="comment">// 参数默认分配空对象 &#123;&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">&#123;name&#125; = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log (name || <span class="string">'unknown'</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//测试结果</span></span><br><span class="line">test(<span class="literal">undefined</span>); <span class="comment">// unknown</span></span><br><span class="line">test(&#123; &#125;); <span class="comment">// unknown</span></span><br><span class="line">test(&#123; <span class="attr">name</span>: <span class="string">'apple'</span>, <span class="attr">color</span>: <span class="string">'red'</span> &#125;); <span class="comment">// apple</span></span><br></pre></td></tr></table></figure><p><a name="2d62cb6a"></a></p><h3 id="12-4-选择-Map-Object-字面量，而不是Switch语句"><a href="#12-4-选择-Map-Object-字面量，而不是Switch语句" class="headerlink" title="12.4 选择 Map / Object 字面量，而不是Switch语句"></a>12.4 选择 Map / Object 字面量，而不是Switch语句</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">color</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 使用 switch case 语句，根据颜色找出对应的水果</span></span><br><span class="line">  <span class="keyword">switch</span> (color) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'red'</span>:</span><br><span class="line">      <span class="keyword">return</span> [<span class="string">'apple'</span>, <span class="string">'strawberry'</span>];</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'yellow'</span>:</span><br><span class="line">      <span class="keyword">return</span> [<span class="string">'banana'</span>, <span class="string">'pineapple'</span>];</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'purple'</span>:</span><br><span class="line">      <span class="keyword">return</span> [<span class="string">'grape'</span>, <span class="string">'plum'</span>];</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> [];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//测试结果</span></span><br><span class="line">test(<span class="literal">null</span>); <span class="comment">// []</span></span><br><span class="line">test(<span class="string">'yellow'</span>); <span class="comment">// ['banana', 'pineapple']</span></span><br></pre></td></tr></table></figure><p>这边建议使用对象，更加清晰</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用对象字面量，根据颜色找出对应的水果</span></span><br><span class="line">  <span class="keyword">const</span> fruitColor = &#123;</span><br><span class="line">    red: [<span class="string">'apple'</span>, <span class="string">'strawberry'</span>],</span><br><span class="line">    yellow: [<span class="string">'banana'</span>, <span class="string">'pineapple'</span>],</span><br><span class="line">    purple: [<span class="string">'grape'</span>, <span class="string">'plum'</span>]</span><br><span class="line">  &#125;;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">color</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> fruitColor[color] || [];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是这边是很有可能为网络数据，无法判断red这样的变量，那么就用arry.filter 来过滤</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fruits = [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'apple'</span>, <span class="attr">color</span>: <span class="string">'red'</span> &#125;, </span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'strawberry'</span>, <span class="attr">color</span>: <span class="string">'red'</span> &#125;, </span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'banana'</span>, <span class="attr">color</span>: <span class="string">'yellow'</span> &#125;, </span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'pineapple'</span>, <span class="attr">color</span>: <span class="string">'yellow'</span> &#125;, </span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'grape'</span>, <span class="attr">color</span>: <span class="string">'purple'</span> &#125;, </span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'plum'</span>, <span class="attr">color</span>: <span class="string">'purple'</span> &#125;</span><br><span class="line">];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">color</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 使用 Array filter  ，根据颜色找出对应的水果</span></span><br><span class="line"> </span><br><span class="line">  <span class="keyword">return</span> fruits.filter(<span class="function"><span class="params">f</span> =&gt;</span> f.color == color);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="2c32c249"></a></p><h3 id="12-5-使用-Array-every-和-Array-some-来处理全部-部分满足条件"><a href="#12-5-使用-Array-every-和-Array-some-来处理全部-部分满足条件" class="headerlink" title="12.5 使用 Array.every 和 Array.some 来处理全部/部分满足条件"></a>12.5 使用 Array.every 和 Array.some 来处理全部/部分满足条件</h3><p>我们想检查所有水果是否都是红色的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fruits = [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'apple'</span>, <span class="attr">color</span>: <span class="string">'red'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'banana'</span>, <span class="attr">color</span>: <span class="string">'yellow'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'grape'</span>, <span class="attr">color</span>: <span class="string">'purple'</span> &#125;</span><br><span class="line">  ];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> isAllRed = <span class="literal">true</span>;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// 条件：所有的水果都必须是红色</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> f <span class="keyword">of</span> fruits) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!isAllRed) <span class="keyword">break</span>;</span><br><span class="line">    isAllRed = (f.color == <span class="string">'red'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="built_in">console</span>.log(isAllRed); <span class="comment">// false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 arry.every来过滤</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fruits = [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'apple'</span>, <span class="attr">color</span>: <span class="string">'red'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'banana'</span>, <span class="attr">color</span>: <span class="string">'yellow'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'grape'</span>, <span class="attr">color</span>: <span class="string">'purple'</span> &#125;</span><br><span class="line">  ];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 条件：简短方式，所有的水果都必须是红色</span></span><br><span class="line">  <span class="keyword">const</span> isAllRed = fruits.every(<span class="function"><span class="params">f</span> =&gt;</span> f.color == <span class="string">'red'</span>);</span><br><span class="line"> </span><br><span class="line">  <span class="built_in">console</span>.log(isAllRed); <span class="comment">// false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果我们想要检查是否有至少一个水果是红色的，我们可以使用 Array.some 仅用一行代码就实现出来</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fruits = [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'apple'</span>, <span class="attr">color</span>: <span class="string">'red'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'banana'</span>, <span class="attr">color</span>: <span class="string">'yellow'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'grape'</span>, <span class="attr">color</span>: <span class="string">'purple'</span> &#125;</span><br><span class="line">];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 条件：是否存在红色的水果</span></span><br><span class="line">  <span class="keyword">const</span> isAnyRed = fruits.some(<span class="function"><span class="params">f</span> =&gt;</span> f.color == <span class="string">'red'</span>);</span><br><span class="line"> </span><br><span class="line">  <span class="built_in">console</span>.log(isAnyRed); <span class="comment">// true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ECMAScript 6入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ECMAScript 6入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>10. 集合</title>
      <link href="/2019/03/03/es6/10.%E9%9B%86%E5%90%88/"/>
      <url>/2019/03/03/es6/10.%E9%9B%86%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h3 id="10-1-Set"><a href="#10-1-Set" class="headerlink" title="10.1 Set"></a>10.1 Set</h3><blockquote><p>一个Set是一堆东西的集合，Set 有点像数组，不过跟数组不一样的是，Set里面不能有重复的内容</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> books = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">books.add(<span class="string">'js'</span>);</span><br><span class="line">books.add(<span class="string">'js'</span>);<span class="comment">//添加重复元素的集合元素个数不会变化</span></span><br><span class="line">books.add(<span class="string">'html'</span>);</span><br><span class="line">books.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">book</span>)</span>&#123; <span class="comment">// 循环集合</span></span><br><span class="line"><span class="built_in">console</span>.log(book);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(book.size);<span class="comment">//集合中元数的个数</span></span><br><span class="line"><span class="built_in">console</span>.log(books.has(<span class="string">'js'</span>));<span class="comment">//判断集合是否有此元素</span></span><br><span class="line">books.delete(<span class="string">'js'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(books.size);</span><br><span class="line"><span class="built_in">console</span>.log(books.has(<span class="string">'js'</span>));</span><br><span class="line">books.clear();<span class="comment">//清空set</span></span><br><span class="line"><span class="built_in">console</span>.log(books.size);</span><br></pre></td></tr></table></figure><p><a name="98c31ab8"></a></p><h3 id="10-2-Map"><a href="#10-2-Map" class="headerlink" title="10.2 Map"></a>10.2 Map</h3><blockquote><p>可以使用Map来组织这个名值对的数据</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> books = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">books.set(<span class="string">'js'</span>,&#123;<span class="attr">name</span>:<span class="string">'js'</span>&#125;);<span class="comment">//向map中添加元素</span></span><br><span class="line">books.set(<span class="string">'html'</span>,&#123;<span class="attr">name</span>:<span class="string">'html'</span>&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(books.size);<span class="comment">//查看集合中的元素</span></span><br><span class="line"><span class="built_in">console</span>.log(books.get(<span class="string">'js'</span>));<span class="comment">//通过key获取值</span></span><br><span class="line">books.delete(<span class="string">'js'</span>);<span class="comment">//执行key删除元素</span></span><br><span class="line"><span class="built_in">console</span>.log(books.has(<span class="string">'js'</span>));<span class="comment">//判断map中有没有key</span></span><br><span class="line">book.forEach(<span class="function">(<span class="params">value,key</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(key+<span class="string">'='</span>+value);</span><br><span class="line">&#125;)</span><br><span class="line">books.clear();<span class="comment">//清空map</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ECMAScript 6入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ECMAScript 6入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>11 模块</title>
      <link href="/2019/03/03/es6/11.%E6%A8%A1%E5%9D%97/"/>
      <url>/2019/03/03/es6/11.%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<blockquote><p>可以根据应用的需求吧代码分成不同的模块，每个模块里可以导出它需要让其他模块使用的东西，在其他模块里面可以导入这些模块，导出的东西。</p></blockquote><p><a name="19e03a1f"></a></p><blockquote><p>在浏览器中使用模块需要借助 导出</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> name = <span class="string">'wjh'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> age = <span class="number">8</span>;</span><br></pre></td></tr></table></figure><p>导入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//import &#123;name,age&#125; from './school.js';</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> school <span class="keyword">from</span> <span class="string">'./school.js'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(school.name,school.age);</span><br></pre></td></tr></table></figure><p>在页面中引用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;https://google.github.io/traceur-compiler/bin/traceur.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;https://google.github.io/traceur-compiler/bin/BrowserSystem.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;https://google.github.io/traceur-compiler/src/bootstrap.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;module&quot; src=&quot;index.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><a name="a0b3b60b"></a></p><h3 id="11-2-重命名"><a href="#11-2-重命名" class="headerlink" title="11.2 重命名"></a>11.2 重命名</h3><p>导出时重命名</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">say</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'say'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> &#123;say <span class="keyword">as</span> say2&#125;;</span><br></pre></td></tr></table></figure><p>导入时重命名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123;say2 as say3&#125; from &apos;./school.js&apos;</span><br></pre></td></tr></table></figure><p><a name="afd9a67f"></a></p><h3 id="11-3-默认导出"><a href="#11-3-默认导出" class="headerlink" title="11.3 默认导出"></a>11.3 默认导出</h3><p>每个模块都可以有一个默认要导出的东西</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">say</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'say'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>导入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> say <span class="keyword">from</span> <span class="string">'./school.js'</span></span><br></pre></td></tr></table></figure><p><a name="432ccdbd"></a></p><h3 id="11-4-深度克隆"><a href="#11-4-深度克隆" class="headerlink" title="11.4 深度克隆"></a>11.4 深度克隆</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> parent = &#123;</span><br><span class="line">  age: <span class="number">5</span>,</span><br><span class="line">  hobby: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">  home: &#123;<span class="attr">city</span>: <span class="string">'北京'</span>&#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> child = extendDeep(parent);</span><br><span class="line">child.age = <span class="number">6</span>;</span><br><span class="line">child.hobby.push(<span class="string">'4'</span>);</span><br><span class="line">child.home.city = <span class="string">'广东'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'child '</span>, child); <span class="comment">//[1, 2, 3, 4]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'parent '</span>, parent);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">extend</span>(<span class="params">parent</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> child;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Object</span>.prototype.toString.call(parent) == <span class="string">'[object Object]'</span>) &#123;</span><br><span class="line">    child = &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> parent) &#123;</span><br><span class="line">      child[key] = extend(parent[key])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">Object</span>.prototype.toString.call(parent) == <span class="string">'[object Array]'</span>) &#123;</span><br><span class="line">    child = parent.map(<span class="function"><span class="params">item</span> =&gt;</span> extend(item));</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> parent;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> child;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">extendDeep</span>(<span class="params">parent, child</span>) </span>&#123;</span><br><span class="line">  child = child || &#123;&#125;;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> parent) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> parent[key] === <span class="string">"object"</span>) &#123;</span><br><span class="line">      child[key] = (<span class="built_in">Object</span>.prototype.toString.call(parent[key]) === <span class="string">"[object Array]"</span>) ? [] : &#123;&#125;;</span><br><span class="line">      extendDeep(parent[key], child[key]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      child[key] = parent[key];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> child;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ECMAScript 6入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ECMAScript 6入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>9. 生成器(Generator)与迭代器(Iterator)</title>
      <link href="/2019/03/03/es6/9.%E7%94%9F%E6%88%90%E5%99%A8(Generator)%E4%B8%8E%E8%BF%AD%E4%BB%A3%E5%99%A8(Iterator)/"/>
      <url>/2019/03/03/es6/9.%E7%94%9F%E6%88%90%E5%99%A8(Generator)%E4%B8%8E%E8%BF%AD%E4%BB%A3%E5%99%A8(Iterator)/</url>
      
        <content type="html"><![CDATA[<p>Generator 是一个特殊的函数，执行它会返回一个Iterator对象。通过遍历迭代器，Generator函数运行后悔返回遍历器对象，而不是函数的返回值。<br><a name="ca36116a"></a></p><h3 id="9-1-Iterators模拟"><a href="#9-1-Iterators模拟" class="headerlink" title="9.1 Iterators模拟"></a>9.1 Iterators模拟</h3><p>迭代器有一个next方法，每次执行的时候会返回一个对象 对象里面有两个函数，一个是value表示返回的值，还有就是布尔值done，表示是迭代完成</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buy</span>(<span class="params">books</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span>&#123;</span><br><span class="line">    next()&#123;</span><br><span class="line">      <span class="keyword">let</span> done = i ===books.length;</span><br><span class="line">      <span class="keyword">let</span> value = !done ? books[i++]:<span class="literal">undefined</span>;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">      value:value,</span><br><span class="line">        done:done</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> iterators = buy([<span class="string">'js'</span>,<span class="string">'html'</span>]);</span><br><span class="line"><span class="keyword">var</span> curr;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">curr = iterators.next();</span><br><span class="line">  <span class="built_in">console</span>.log(curr);</span><br><span class="line">&#125;<span class="keyword">while</span>(!curr.done);</span><br></pre></td></tr></table></figure><p><a name="18f675e5"></a></p><h3 id="9-3-Generators"><a href="#9-3-Generators" class="headerlink" title="9.3 Generators"></a>9.3 Generators</h3><p>生成器用于创建迭代器</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">buy</span>(<span class="params">boos</span>)</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;boos.length;i++)&#123;</span><br><span class="line">  <span class="keyword">yield</span> books[i];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> buying = buy([<span class="string">'js'</span>,<span class="string">'html]);</span></span><br><span class="line"><span class="string">var curr;</span></span><br><span class="line"><span class="string">do &#123;</span></span><br><span class="line"><span class="string">curr = buying.next();</span></span><br><span class="line"><span class="string">  console.log(curr);</span></span><br><span class="line"><span class="string">&#125;while(!curr.done);</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ECMAScript 6入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ECMAScript 6入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8. 类</title>
      <link href="/2019/03/03/es6/8.%E7%B1%BB/"/>
      <url>/2019/03/03/es6/8.%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<blockquote><p>8.1 class</p></blockquote><p>使用 class 这个关键词定义一个类，基于这个创建实例以后就会创建 constructor 方法，此方法可以用来初始化</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>(name)&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  getName()&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.name)  </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> Person(<span class="string">'wjh'</span>);</span><br><span class="line">person.getName();</span><br></pre></td></tr></table></figure><blockquote><p>8.2 get与set</p></blockquote><p>getter 可以用来获取属性,setter 可以去设置属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>()&#123;</span><br><span class="line">  <span class="keyword">this</span>.hobbies = [];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">set</span> hobby(hobby)&#123;</span><br><span class="line">  <span class="keyword">this</span>.hobbies.push(hobby);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">get</span> hobby()&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.hobbies;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> Person();</span><br><span class="line">person.hobby = <span class="string">'aa'</span>;</span><br><span class="line">person.hobby = <span class="string">'bb'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(person.hobby)</span><br></pre></td></tr></table></figure><blockquote><p>8.3 静态方法-static</p></blockquote><p>在类里面添加静态的方法可以使用static 这个关键词，静态方法就是不需要实例化类就能使用的方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"><span class="keyword">static</span> add(a,b)&#123;</span><br><span class="line">  <span class="keyword">return</span> a+b;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(Person.add(<span class="number">1</span>,x));</span><br></pre></td></tr></table></figure><blockquote><p>8.4 继承extends</p></blockquote><p>一个类可以继承其他的类里的东西</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>(name)&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>(name,age)&#123;</span><br><span class="line">  <span class="keyword">super</span>(name);</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> teacher = Teacher(<span class="string">'wjh'</span>,<span class="number">8</span>);</span><br><span class="line"><span class="built_in">console</span>.log(teacher.name,teacher.age)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ECMAScript 6入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ECMAScript 6入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7. 对象</title>
      <link href="/2019/03/02/es6/7.%E5%AF%B9%E8%B1%A1/"/>
      <url>/2019/03/02/es6/7.%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>7.1 对象字面量</p></blockquote><p>如果你想在对象里添加跟变量名一样的属性，并且属性的值就是变量表示的值就可以直接在对象里加上这些属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">'wjh'</span>;</span><br><span class="line"><span class="keyword">let</span> age = <span class="number">8</span>;</span><br><span class="line"><span class="keyword">let</span> getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> person =&#123;</span><br><span class="line">name,</span><br><span class="line">    age,</span><br><span class="line">    getName</span><br><span class="line">&#125;</span><br><span class="line">person.getName();</span><br></pre></td></tr></table></figure><blockquote><p>7.2 Object.is</p></blockquote><p>对比两个值是否相等</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.is(<span class="literal">NaN</span>,<span class="literal">NaN</span>));</span><br></pre></td></tr></table></figure><blockquote><p>7.3 Object.assign</p></blockquote><p>把多个对象的属性复制到一个对象中，第一个参数是复制的对象，从第二个参数开始往后，都是复制的源对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> nameObj = &#123;<span class="attr">name</span>:<span class="string">'wjh'</span>&#125;</span><br><span class="line"><span class="keyword">var</span> ageObj = &#123;<span class="attr">age</span>:<span class="number">8</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.assign(obj,nameObj,ageObj);</span><br><span class="line"><span class="built_in">console</span>.log(obj);</span><br><span class="line"></span><br><span class="line"><span class="comment">//克隆对象</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clone</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Object</span>.assgin(&#123;&#125;,obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>7.4 Object.setPrototypeOf</p></blockquote><p>将一个指定的对象原型设置为另一个对象或者null</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123;<span class="attr">name</span>:<span class="string">'wjh1'</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;<span class="attr">name</span>:<span class="string">'wjh2'</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf(obj,obj1);</span><br><span class="line"><span class="built_in">console</span>.log(obj.name);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getPrototypeOf(obj));</span><br><span class="line"><span class="built_in">Object</span>.setProtoypeOF(obj,obj2);</span><br><span class="line"><span class="built_in">console</span>.log(obj.name);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getPrototypeOf(obj));</span><br></pre></td></tr></table></figure><blockquote><p>7.5 proto</p></blockquote><p>直接对象表达式中设置prototype</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var obj1 = &#123;name:&apos;wjh&apos;&#125;;</span><br><span class="line">var obj3 = &#123;</span><br><span class="line">_proto_:obj1</span><br><span class="line">&#125; </span><br><span class="line">console.log(obj3.name);</span><br><span class="line">console.log(Object.getPrototypeOf(obj3));</span><br></pre></td></tr></table></figure><blockquote><p>7.6 super</p></blockquote><p>通过super可以调用protype上的属性或方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person =&#123;</span><br><span class="line">eat()&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'milk'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> student = &#123;</span><br><span class="line">_proto_:person,</span><br><span class="line">  eat()&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">super</span>.eat()+<span class="string">'bead'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(student.eat());</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ECMAScript 6入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ECMAScript 6入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6. 数组的新方法</title>
      <link href="/2019/03/02/es6/6.%E6%95%B0%E7%BB%84%E7%9A%84%E6%96%B0%E6%96%B9%E6%B3%95/"/>
      <url>/2019/03/02/es6/6.%E6%95%B0%E7%BB%84%E7%9A%84%E6%96%B0%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 相同的阵列</span></span><br><span class="line"><span class="keyword">var</span> people = [</span><br><span class="line">  &#123;</span><br><span class="line">    name : <span class="string">'Casper'</span> ,</span><br><span class="line">    like : <span class="string">'锅烧意面'</span> ,</span><br><span class="line">    age : <span class="number">18</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name : <span class="string">'Wang'</span> ,</span><br><span class="line">    like : <span class="string">'炒面'</span> ,</span><br><span class="line">    age : <span class="number">24</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name : <span class="string">'Bobo'</span> ,</span><br><span class="line">    like : <span class="string">'萝卜泥'</span> ,</span><br><span class="line">    age : <span class="number">1</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name : <span class="string">'卤蛋'</span> ,</span><br><span class="line">    like : <span class="string">'萝卜泥'</span> ,</span><br><span class="line">    age : <span class="number">3</span></span><br><span class="line">  &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p><a name="0579250f"></a></p><h3 id="6-1-Array-prototype-filter"><a href="#6-1-Array-prototype-filter" class="headerlink" title="6.1.Array.prototype.filter()"></a>6.1.Array.prototype.filter()</h3><blockquote><p>filter() 会回传一个阵列，其条件是return 后方为true 的物件，很适合用在搜寻符合条件的资料。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var filterEmpty = people.filter( function ( item, index, array ) &#123;</span><br><span class="line">&#125;);</span><br><span class="line">console .log(filterEmpty);     //没有条件，会是一个空阵列</span><br><span class="line"></span><br><span class="line">var filterAgeThan5 = people.filter( function ( item, index, array ) &#123;</span><br><span class="line">  return item.age &gt; 5 ;        //取得大于五岁的   如果这边符合条件 只要为ture即可</span><br><span class="line">&#125;);</span><br><span class="line">console .log(filterAgeThan5);    // Casper, Wang这两个物件</span><br></pre></td></tr></table></figure><p><a name="ef645e86"></a></p><h3 id="6-2-Array-prototype-find"><a href="#6-2-Array-prototype-find" class="headerlink" title="6.2.Array.prototype.find()"></a>6.2.Array.prototype.find()</h3><blockquote><p>find()与filter()很像，但find() 只会回传一次值，且是第一次为true的值。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> findEmpty = people.find( <span class="function"><span class="keyword">function</span> (<span class="params"> item, index, array </span>) </span>&#123;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span> .log(findEmpty);           <span class="comment">//没有条件，会是undefined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> findAgeThan5 = people.find( <span class="function"><span class="keyword">function</span> (<span class="params"> item, index, array </span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> item.age &gt; <span class="number">5</span> ;            <span class="comment">//取得大于五岁的</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span> .log(findAgeThan5);        <span class="comment">//虽然答案有两个，但只会回传Casper这一个物件</span></span><br><span class="line"><span class="keyword">var</span> findLike = people.find( <span class="function"><span class="keyword">function</span> (<span class="params"> item, index, array </span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> item.like === <span class="string">'萝卜泥'</span> ;   <span class="comment">//取得阵列like === '萝卜泥'</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span> .log(findLike);            <span class="comment">//虽然答案有两个，但只会回传第一个Bobo物件</span></span><br></pre></td></tr></table></figure><p><a name="1e4a53ab"></a></p><h3 id="6-3-Array-prototype-forEach"><a href="#6-3-Array-prototype-forEach" class="headerlink" title="6.3.Array.prototype.forEach()"></a>6.3.Array.prototype.forEach()</h3><blockquote><p>forEach 是这几个阵列函式最单纯的一个，不会额外回传值，只单纯执行每个阵列内的物件或值。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> forEachIt = people.forEach( <span class="function"><span class="keyword">function</span> (<span class="params"> item, index, array </span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span> .log(item, index, array); <span class="comment">//物件,索引,全部阵列</span></span><br><span class="line">  <span class="keyword">return</span> item;                      <span class="comment">// forEach没在return的，所以这边写了也没用</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span> .log(forEachIt);             <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line">people.forEach( <span class="function"><span class="keyword">function</span> (<span class="params"> item, index, array </span>) </span>&#123;</span><br><span class="line">  item.age = item.age + <span class="number">1</span> ;          <span class="comment">// forEach就如同for，不过写法更容易</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span> .log(people);                <span class="comment">//全部age + 1</span></span><br></pre></td></tr></table></figure><p><a name="1707e3d2"></a></p><h3 id="6-4-Array-prototype-map"><a href="#6-4-Array-prototype-map" class="headerlink" title="6.4 Array.prototype.map()"></a>6.4 Array.prototype.map()</h3><blockquote><p>使用map() 时他需要回传一个值，他会透过函式内所回传的值组合成一个阵列。<br>如果不回传则是 undefined<br>回传数量等于原始阵列的长度<br>这很适合将原始的变数运算后重新组合一个新的阵列。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mapEmpty = people.map( <span class="function"><span class="keyword">function</span> (<span class="params"> item, index, array </span>) </span>&#123;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span> .log(mapEmpty);     <span class="comment">// [undefined, undefined, undefined, undefined]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> mapAgeThan5 = people.map( <span class="function"><span class="keyword">function</span> (<span class="params"> item, index, array </span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> item.age &gt; <span class="number">5</span> ;     <span class="comment">//比较大于五岁的</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span> .log(mapAgeThan5); <span class="comment">// [true, true, false, false]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> mapAgeThan5_2 = people.map( <span class="function"><span class="keyword">function</span> (<span class="params"> item, index, array </span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 错误示范</span></span><br><span class="line">  <span class="keyword">if</span> (item.age &gt; <span class="number">5</span> ) &#123;</span><br><span class="line">    <span class="keyword">return</span> item;               <span class="comment">//回传大于五岁的</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span>  <span class="literal">false</span> ;                <span class="comment">//别以为空的或是false就不会回传</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span> .log(mapAgeThan5_2);    <span class="comment">// [&#123;name: 'Casper'...&#125;, &#123;name: 'Wang'...&#125;, false, false]</span></span><br><span class="line"><span class="keyword">var</span> mapEat = people.map( <span class="function"><span class="keyword">function</span> (<span class="params"> item, index, array </span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (item.like !== <span class="string">'萝卜泥'</span> ) &#123;</span><br><span class="line">    <span class="keyword">return</span>  <span class="string">` <span class="subst">$&#123;item.like&#125;</span>好吃`</span> ;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span>  <span class="string">` <span class="subst">$&#123;item.like&#125;</span>不好吃`</span> ;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span> .log(mapEat);           <span class="comment">// ["锅烧意面好吃", "炒面好吃", "萝卜泥不好吃", "萝卜泥不好吃"]</span></span><br></pre></td></tr></table></figure><p><a name="023b7c41"></a></p><h3 id="6-5-Array-prototype-every"><a href="#6-5-Array-prototype-every" class="headerlink" title="6.5 Array.prototype.every()"></a>6.5 Array.prototype.every()</h3><blockquote><p>every()可以检查所有的阵列是否符合条件，这仅会回传一个值trueor false，可以用来检查阵列中的内容是否符合特定条件。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ans = array.every( <span class="function"><span class="keyword">function</span> (<span class="params"> item, index, array </span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span> .log(item, index, array); <span class="comment">//物件,索引,全部阵列</span></span><br><span class="line">  <span class="keyword">return</span> item.age &gt; <span class="number">10</span>  <span class="comment">//当全部age大于10才能回传true</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span> .log(ans); <span class="comment">// false:只要有部分不符合，则为false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ans2 = array.every( <span class="function"><span class="keyword">function</span> (<span class="params"> item, index, array </span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> item.age &lt; <span class="number">25</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span> .log(ans2); <span class="comment">// true:全部age都小于25</span></span><br></pre></td></tr></table></figure><p><a name="1c79936c"></a></p><h3 id="6-6-Array-prototype-some"><a href="#6-6-Array-prototype-some" class="headerlink" title="6.6 Array.prototype.some()"></a>6.6 Array.prototype.some()</h3><blockquote><p>some() 与every() 非常接近，都是回传true or false，差异仅在every() 需完全符合，some() 仅需要部分符合。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ans = people.some( <span class="function"><span class="keyword">function</span> (<span class="params"> item, index, array </span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> item.age &gt; <span class="number">10</span>  <span class="comment">//当全部age大于10才能回传true</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span> .log(ans);   <span class="comment">// true:只要有部分符合，则为true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ans2 = people.some( <span class="function"><span class="keyword">function</span> (<span class="params"> item, index, array </span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> item.age &lt; <span class="number">25</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span> .log(ans2); <span class="comment">// true:只要有部分符合，则为true  </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ans2 = people.some( <span class="function"><span class="keyword">function</span> (<span class="params"> item, index, array </span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> item.age &gt; <span class="number">25</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span> .log(ans2); <span class="comment">// false:全部都不符合则为false</span></span><br></pre></td></tr></table></figure><p><a name="aecbdfe3"></a></p><h3 id="6-7-Array-prototype-reduce"><a href="#6-7-Array-prototype-reduce" class="headerlink" title="6.7 Array.prototype.reduce()"></a>6.7 Array.prototype.reduce()</h3><blockquote><p>reduce() 和其他几个差异就很大了，他可以与前一个回传的值再次作运算，参数包含以下：<br>accumulator: 前一个参数，如果是第一个阵列的话，值是以另外传入或初始化的值<br>currentValue: 当前变数<br>currentIndex: 当前索引<br>array: 全部阵列</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reduceEmpty = people.reduce( <span class="function"><span class="keyword">function</span> (<span class="params"> accumulator, currentValue, currentIndex, array </span>) </span>&#123;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span> .log(reduceEmpty);                  <span class="comment">//没有条件，会是undefined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reducePlus = people.reduce( <span class="function"><span class="keyword">function</span> (<span class="params"> accumulator, currentValue, currentIndex, array </span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 分别为前一个回传值, 目前值, 当前索引值</span></span><br><span class="line">  <span class="built_in">console</span> .log(accumulator, currentValue, currentIndex);</span><br><span class="line">  <span class="keyword">return</span> accumulator + currentValue.age;   <span class="comment">//与前一个值相加</span></span><br><span class="line">&#125;, <span class="number">0</span> );                                     <span class="comment">//传入初始化值为0</span></span><br><span class="line"><span class="built_in">console</span> .log(reducePlus);                   <span class="comment">//总和为46</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reducePlus = people.reduce( <span class="function"><span class="keyword">function</span> (<span class="params"> accumulator, currentValue, currentIndex, array </span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span> .log( <span class="string">'reduce'</span> , accumulator, currentValue, currentIndex)</span><br><span class="line">  <span class="keyword">return</span>  <span class="built_in">Math</span> .max( accumulator, currentValue.age ); <span class="comment">//与前一个值比较哪个大</span></span><br><span class="line">&#125;, <span class="number">0</span> );</span><br><span class="line"><span class="built_in">console</span> .log(reducePlus);                   <span class="comment">//最大值为24</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ECMAScript 6入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ECMAScript 6入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5. 函数</title>
      <link href="/2019/03/02/es6/5.%E5%87%BD%E6%95%B0/"/>
      <url>/2019/03/02/es6/5.%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p><a name="cd7c34ab"></a></p><h3 id="5-1-默认参数"><a href="#5-1-默认参数" class="headerlink" title="5.1 默认参数"></a>5.1 默认参数</h3><p>可以给定义的函数接收的参数设置默认的值 在执行这个函数的时候，如果不指定函数的参数的值，就会使用参数的这些默认的值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params">url,method=<span class="string">'GET'</span>,dataType=<span class="string">"json"</span></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(url);</span><br><span class="line">  <span class="built_in">console</span>.log(method);</span><br><span class="line">  <span class="built_in">console</span>.log(dataType);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="4c1e6d07"></a></p><h3 id="5-2-展开操作符"><a href="#5-2-展开操作符" class="headerlink" title="5.2 展开操作符"></a>5.2 展开操作符</h3><p>把…放在数组前面可以把一个数组进行展开，可以把一个函数而不需要使用<code>apply</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//传入参数</span></span><br><span class="line"><span class="keyword">let</span> print = <span class="function"><span class="keyword">function</span>(<span class="params">a,b,c</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a,b,c);</span><br><span class="line">&#125;</span><br><span class="line">print([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]);</span><br><span class="line">print(...[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以替代apply</span></span><br><span class="line"><span class="keyword">var</span> m1 = <span class="built_in">Math</span>.max.apply(<span class="literal">null</span>, [<span class="number">8</span>, <span class="number">9</span>, <span class="number">4</span>, <span class="number">1</span>]);</span><br><span class="line"><span class="keyword">var</span> m2 = <span class="built_in">Math</span>.max(...[<span class="number">8</span>, <span class="number">9</span>, <span class="number">4</span>, <span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以替代concat</span></span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">3</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> arr3 = arr1.concat(arr2);</span><br><span class="line"><span class="keyword">var</span> arr4 = [...arr1, ...arr2];</span><br><span class="line"><span class="built_in">console</span>.log(arr3,arr4);</span><br><span class="line"></span><br><span class="line"><span class="comment">//类数组的转数组</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">max</span>(<span class="params">a,b,c</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">Math</span>.max(...arguments));</span><br><span class="line">&#125;</span><br><span class="line">max(<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br></pre></td></tr></table></figure><p><a name="2e240cbd"></a></p><h3 id="5-3-剩余操作符"><a href="#5-3-剩余操作符" class="headerlink" title="5.3 剩余操作符"></a>5.3 剩余操作符</h3><p>剩余操作符可以把其余参数的值放在一个叫做b的数组里</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> rest = <span class="function"><span class="keyword">function</span>(<span class="params">a,...rest</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a,rest);</span><br><span class="line">&#125;</span><br><span class="line">rest(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br></pre></td></tr></table></figure><p><a name="15af98a3"></a></p><h3 id="5-4-解构参数"><a href="#5-4-解构参数" class="headerlink" title="5.4 解构参数"></a>5.4 解构参数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> destruct = <span class="function"><span class="keyword">function</span>(<span class="params">&#123;name,age&#125;</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(name,age);</span><br><span class="line">&#125;</span><br><span class="line">destruct(&#123;<span class="attr">name</span>:<span class="string">'wjh'</span>,<span class="attr">age</span>:<span class="number">10</span>&#125;)</span><br></pre></td></tr></table></figure><p><a name="b3120037"></a></p><h3 id="5-6-箭头函数"><a href="#5-6-箭头函数" class="headerlink" title="5.6 箭头函数"></a>5.6 箭头函数</h3><p>箭头函数简化了函数的定义方式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].forEach(<span class="function"><span class="params">val</span>=&gt;</span><span class="built_in">console</span>.log(val));</span><br></pre></td></tr></table></figure><p>输入参数如果多于一个要用()包含，函数体如果有多条语句需要用{}包起来</p><p>箭头函数根本没有自己的this，导致内部的this就是外层代码块的this。 正是因为它没有this，从而避免了this指向的问题。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    name:<span class="string">'wjh'</span>,</span><br><span class="line">    getName:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">-        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="keyword">this</span>);&#125;,<span class="number">1000</span>); <span class="comment">//在浏览器执行的话this指向window</span></span><br><span class="line">+        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="keyword">this</span>),<span class="number">1000</span>);<span class="comment">//在浏览器执行的话this指向person</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">person.getName();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ECMAScript 6入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ECMAScript 6入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4. 字符串</title>
      <link href="/2019/03/02/es6/4.%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>/2019/03/02/es6/4.%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<h3 id="4-1-模板字符串"><a href="#4-1-模板字符串" class="headerlink" title="4.1 模板字符串"></a>4.1 模板字符串</h3><p>模板字符串用反应号(数字1左边的那个建)包含，用<code>${}</code>括起来</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">'zfpx'</span>,age = <span class="number">8</span>;</span><br><span class="line"><span class="keyword">let</span> desc = <span class="string">`<span class="subst">$&#123;name&#125;</span> is <span class="subst">$&#123;age&#125;</span> old!`</span>;</span><br><span class="line"><span class="built_in">console</span>.log(desc);</span><br><span class="line"></span><br><span class="line"><span class="comment">//所有模板字符串的空格和换行，都是被保留的</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">`&lt;ul&gt;</span></span><br><span class="line"><span class="string">&lt;li&gt;a&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;li&gt;b&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;/ul&gt;`</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br></pre></td></tr></table></figure><blockquote><p>其中的变量会用变量的值替换掉</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">replace</span>(<span class="params">desc</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> desc.replace(<span class="regexp">/\$\&#123;([^&#125;]+)\&#125;/g</span>,<span class="function"><span class="keyword">function</span>(<span class="params">matched,key</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">eval</span>(key);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="f7d0bf63"></a></p><h3 id="4-2-带标签的模板字符串"><a href="#4-2-带标签的模板字符串" class="headerlink" title="4.2 带标签的模板字符串"></a>4.2 带标签的模板字符串</h3><p>可以在模板字符串的前面添加一个标签，这个标签可以去处理模板字符串 标签其实就是一个函数,函数可以接收两个参数,一个是 strings 就是模板字符串里的每个部分的字符 还有一个参数可以使用rest的形式values,这个参数里面是模板字符串里的值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">'wjh'</span>,age = <span class="number">8</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">desc</span>(<span class="params">strings,...values</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(strings,values);</span><br><span class="line">&#125;</span><br><span class="line">desc<span class="string">`<span class="subst">$&#123;name&#125;</span> is <span class="subst">$&#123;age&#125;</span> old!`</span>;</span><br></pre></td></tr></table></figure><blockquote><p>字符串新方法</p></blockquote><ul><li>includes()：返回布尔值，表示是否找到了参数字符串。</li><li>startsWith()：返回布尔值，表示参数字符串是否在源字符串的头部。</li><li>endsWith()：返回布尔值，表示参数字符串是否在源字符串的尾部。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">'wjh'</span>;</span><br><span class="line">s.startsWith(<span class="string">'w'</span>) <span class="comment">// true</span></span><br><span class="line">s.endsWith(<span class="string">'h'</span>) <span class="comment">// true</span></span><br><span class="line">s.includes(<span class="string">'j'</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>第二个参数，表示开始搜索的位置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var s = &apos;wjh&apos;;</span><br><span class="line">console.log(s.startsWith(&apos;j&apos;,2)); // true</span><br><span class="line">console.log(s.endsWith(&apos;j&apos;,2)); // true</span><br><span class="line">console.log(s.includes(&apos;j&apos;,2)); // false</span><br></pre></td></tr></table></figure><blockquote><p>endsWith的行为与其他其他方法有所不同。它针对前n个字符，而其他方法是从第几位开始到字符串结束</p></blockquote><p><a name="4da26836"></a></p><h3 id="4-4-repeat"><a href="#4-4-repeat" class="headerlink" title="4.4 repeat"></a>4.4 repeat</h3><p>repeat 方法返回一个新字符串，表示将原字符串重复n次。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&apos;x&apos;.repeat(3);</span><br><span class="line">&apos;x&apos;.repeat(0);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ECMAScript 6入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ECMAScript 6入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3. 解构</title>
      <link href="/2019/03/02/es6/3.%E8%A7%A3%E6%9E%84/"/>
      <url>/2019/03/02/es6/3.%E8%A7%A3%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<p>解构意思就是分解一个东西的结构,可以用一种类似数组的方式定义N个变量，可以将一个数组中的值按照规则赋值过去。<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> [name,age]=[<span class="string">'wjh'</span>,<span class="number">8</span>];</span><br><span class="line"><span class="built_in">console</span>.log(name,age);</span><br></pre></td></tr></table></figure><h2 id="嵌套赋值"><a href="#嵌套赋值" class="headerlink" title="嵌套赋值"></a>嵌套赋值</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [x,[y],z]=[<span class="number">1</span>,[<span class="number">2.1</span>]];</span><br><span class="line"><span class="built_in">console</span>.log(x,y,z);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [x,[y,z]] = [<span class="number">1</span>,[<span class="number">2.1</span>,<span class="number">2.2</span>]];</span><br><span class="line"><span class="built_in">console</span>.log(x,y,z);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [json,arr,num] = [&#123;<span class="attr">name</span>:<span class="string">'wjw'</span>&#125;,[<span class="number">1</span>,<span class="number">2</span>],<span class="number">3</span>];</span><br><span class="line"><span class="built_in">console</span>.log(json,arr,num);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1 2.1 undefined 1 2.1 2.2 &#123; name: 'wjw' &#125; [ 1, 2 ] 3</span></span><br></pre></td></tr></table></figure><h2 id="省略赋值"><a href="#省略赋值" class="headerlink" title="省略赋值"></a>省略赋值</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [,,x]=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="built_in">console</span>.log(x);</span><br></pre></td></tr></table></figure><h2 id="解构对象"><a href="#解构对象" class="headerlink" title="解构对象"></a>解构对象</h2><p>对象也可以被解构</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">name</span>:<span class="string">'zfpx'</span>,<span class="attr">age</span>:<span class="number">8</span>&#125;;</span><br><span class="line"><span class="comment">//对象里的name属性的值会交给name这个变量，age的值会交给age这个变量</span></span><br><span class="line"><span class="keyword">var</span> &#123;name,age&#125; = obj</span><br><span class="line"><span class="comment">//对象里的name属性的值会交给myname这个变量，age的值会交给myage这个变量</span></span><br><span class="line"><span class="keyword">let</span> &#123;<span class="attr">name</span>: myname, <span class="attr">age</span>: myage&#125; = obj;</span><br><span class="line"><span class="built_in">console</span>.log(name,age,myname,myage);</span><br></pre></td></tr></table></figure><h2 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h2><p>在赋值和传参的时候可以使用默认值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a=<span class="string">'a'</span>,b=<span class="string">'b'</span>,c=<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'C必须指定'</span>)] = [<span class="number">1</span>, , <span class="number">3</span>];</span><br><span class="line"><span class="built_in">console</span>.log(a,b,c);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params">options</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> method = options.method || <span class="string">"get"</span>;</span><br><span class="line">  <span class="keyword">var</span> data = options.data || &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params">method=<span class="string">'get'</span>,data</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ajax(&#123;</span><br><span class="line">method:<span class="string">'post'</span>,</span><br><span class="line">  data:&#123;<span class="string">'name'</span>:<span class="string">'wjh'</span>&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ECMAScript 6入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ECMAScript 6入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2. 常量</title>
      <link href="/2019/03/02/es6/2.%E5%B8%B8%E9%87%8F/"/>
      <url>/2019/03/02/es6/2.%E5%B8%B8%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<blockquote><p>使用 const 我们可以声明一个常量，一旦声明之后，就不可以更改。</p></blockquote><h2 id="常量不能重新赋值"><a href="#常量不能重新赋值" class="headerlink" title="常量不能重新赋值"></a>常量不能重新赋值</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> MY_NAME = <span class="string">'zfpx'</span>;</span><br><span class="line">MY_NAME = <span class="string">'zfpx2'</span>;<span class="comment">//Assignment to constant variable</span></span><br></pre></td></tr></table></figure><h2 id="变量可以改变"><a href="#变量可以改变" class="headerlink" title="变量可以改变"></a>变量可以改变</h2><blockquote><p>注意const限制的是不能给变量重新赋值，而变量的值本身是可以改变的,下面的操作是可以的</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> names = [<span class="string">'zfpx1'</span>];</span><br><span class="line">names.push(<span class="string">'zfpx2'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(names);</span><br></pre></td></tr></table></figure><h2 id="不同的块级作用域可以多次定义"><a href="#不同的块级作用域可以多次定义" class="headerlink" title="不同的块级作用域可以多次定义"></a>不同的块级作用域可以多次定义</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> A = <span class="string">"0"</span>;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">const</span> A = <span class="string">"A"</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(A)</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">const</span> A = <span class="string">"B"</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(A)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(A)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果 A B 0</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ECMAScript 6入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ECMAScript 6入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1. 作用域变量</title>
      <link href="/2019/03/01/es6/1.%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%8F%98%E9%87%8F/"/>
      <url>/2019/03/01/es6/1.%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%8F%98%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<p>作用域就是变量的作用范围。也就是你声明一个变量以后，这个变量可以在什么场合下使用。以前的JavaScript只有全局作用域，和函数作用域。</p><a id="more"></a><blockquote><p>作用域就是变量的作用范围。也就是你声明一个变量以后，这个变量可以在什么场合下使用。以前的JavaScript只有全局作用域，和函数作用域。</p></blockquote><h2 id="var的问题"><a href="#var的问题" class="headerlink" title="var的问题"></a>var的问题</h2><p>1.var 没有块级作用域，定义后在当前包中都都可以访问，如果变量名重复，就会覆盖前面定义的变量，并且很可以被他人修改。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if(true)&#123;</span><br><span class="line">var a = &quot;a&quot;; //期望a是某一个值</span><br><span class="line">&#125;</span><br><span class="line">console.log(a);</span><br></pre></td></tr></table></figure><p><br>2.var 在for循环标记变量共享，一般在循环中会使用的i会被共享，其本质也是由于没有块级作用域造成的<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">for (var i = 0; i &lt; 3; i++) &#123;</span><br><span class="line">     setTimeout(function () &#123;</span><br><span class="line">         alert(i);</span><br><span class="line">     &#125;, 0);</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> // 结果就是 弹窗三次 3</span><br><span class="line"> </span><br><span class="line"> for ( i = 0; i &lt; 3; i++) &#123;</span><br><span class="line">     setTimeout(function () &#123;</span><br><span class="line">         alert(i);</span><br><span class="line">     &#125;, 0);</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> // 结果就是 弹窗三次 0-2</span><br></pre></td></tr></table></figure><h2 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h2><p>在用var定义变量的时候，变量通过闭包进行隔离的，现在用了let，不仅仅可以通过闭包隔离，还可以增加了一些块级作用域隔离。块级作用用一组大括号定义一个快，使用let定义的变量字啊大括号的外面是访问不到的。</p><h3 id="实现会计作用域"><a href="#实现会计作用域" class="headerlink" title="实现会计作用域"></a>实现会计作用域</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if(ture)&#123;</span><br><span class="line">let name = &apos;wjh&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">consloe.log(&apos;name&apos;); // ReferenceError: name is not defined</span><br></pre></td></tr></table></figure><h3 id="不会污染全局对象"><a href="#不会污染全局对象" class="headerlink" title="不会污染全局对象"></a>不会污染全局对象</h3><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if(ture)&#123;</span><br><span class="line">let name = &apos;wjh&apos;</span><br><span class="line">&#125;</span><br><span class="line">console.log(window.name); // undefined</span><br></pre></td></tr></table></figure><h3 id="for-循环中也可以使用i"><a href="#for-循环中也可以使用i" class="headerlink" title="for 循环中也可以使用i"></a>for 循环中也可以使用i</h3><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 嵌套循环不会相互影响</span><br><span class="line">for (let i = 0; i &lt; 3; i++) &#123;</span><br><span class="line">   console.log(&quot;out&quot;, i);</span><br><span class="line">   for (let i = 0; i &lt; 2; i++) &#123;</span><br><span class="line">   console.log(&quot;in&quot;, i);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 结果 out 0 in 0 in 1 out 1 in 0 in 1 out 2 in 0 in 1</span><br></pre></td></tr></table></figure><h3 id="重复定义会报错"><a href="#重复定义会报错" class="headerlink" title="重复定义会报错"></a>重复定义会报错</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if(ture)&#123;</span><br><span class="line">let a = 1;</span><br><span class="line">  let a = 2; //Identifier &apos;a&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="不存在变量的预解释"><a href="#不存在变量的预解释" class="headerlink" title="不存在变量的预解释"></a>不存在变量的预解释</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">for(let i = 0;i&lt;2;i++)&#123;</span><br><span class="line">console.log(&apos;inner&apos;,i);</span><br><span class="line">  let i =100;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 结果 i is not defined</span><br></pre></td></tr></table></figure><h3 id="闭包的新写法"><a href="#闭包的新写法" class="headerlink" title="闭包的新写法"></a>闭包的新写法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">;(function()&#123;</span><br><span class="line"></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>现在</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ECMAScript 6入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ECMAScript 6入门 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
