<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>2 axios在项目中的运用</title>
      <link href="/2019/06/11/axios/2%20axios%E5%9C%A8%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84%E8%BF%90%E7%94%A8/"/>
      <url>/2019/06/11/axios/2%20axios%E5%9C%A8%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84%E8%BF%90%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 全站http配置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * axios参数说明</span></span><br><span class="line"><span class="comment"> * isSerialize是否开启form表单提交</span></span><br><span class="line"><span class="comment"> * isToken是否需要token</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'@/store/'</span>;</span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'@/router/router'</span></span><br><span class="line"><span class="keyword">import</span> &#123; serialize &#125; <span class="keyword">from</span> <span class="string">'@/util/util'</span></span><br><span class="line"><span class="keyword">import</span> &#123;getToken,getRoleTitle&#125; <span class="keyword">from</span> <span class="string">'@/util/auth'</span> <span class="comment">// 获取相对应的权限</span></span><br><span class="line"><span class="keyword">import</span> &#123;Message&#125; <span class="keyword">from</span> <span class="string">'element-ui'</span> <span class="comment">// 调用弹窗组件</span></span><br><span class="line"><span class="keyword">import</span> website <span class="keyword">from</span> <span class="string">'@/config/website'</span>; <span class="comment">// statusWhiteList 通过此处，获取白名单，默认[400]</span></span><br><span class="line"><span class="keyword">import</span> NProgress <span class="keyword">from</span> <span class="string">'nprogress'</span> <span class="comment">// progress bar vue中的进度条</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'nprogress/nprogress.css'</span> <span class="comment">// progress bar style</span></span><br><span class="line"><span class="keyword">import</span> Cookies <span class="keyword">from</span> <span class="string">'js-cookie'</span></span><br><span class="line"></span><br><span class="line">axios.defaults.timeout = <span class="number">20000</span>; <span class="comment">// 设置超时时间</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回其他状态吗</span></span><br><span class="line"><span class="comment">// 定义对于给定的HTTP 响应状态码是 resolve 或 reject  promise 。</span></span><br><span class="line"><span class="comment">// 如果 `validateStatus` 返回 `true` (或者设置为 `null` 或 `undefined`)，</span></span><br><span class="line"><span class="comment">// promise 将被 resolve; 否则，promise 将被 rejecte</span></span><br><span class="line"></span><br><span class="line">axios.defaults.validateStatus = <span class="function"><span class="keyword">function</span> (<span class="params">status</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> status &gt;= <span class="number">200</span> &amp;&amp; status &lt;= <span class="number">500</span>; <span class="comment">// 默认的</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//跨域请求，允许保存cookie</span></span><br><span class="line">axios.defaults.withCredentials = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NProgress Configuration</span></span><br><span class="line"><span class="comment">// 通过设置为false关闭加载旋转器。(默认值是ture)</span></span><br><span class="line">NProgress.configure(&#123;</span><br><span class="line">    showSpinner: <span class="literal">false</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//HTTPrequest拦截-添加请求拦截器</span></span><br><span class="line">axios.interceptors.request.use(<span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    </span><br><span class="line">    NProgress.start() <span class="comment">// start progress bar  加载器开始加载</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> meta = (config.meta || &#123;&#125;); <span class="comment">// </span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> isToken = meta.isToken === <span class="literal">false</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (getToken() &amp;&amp; !isToken) &#123;</span><br><span class="line">        config.headers[<span class="string">'Admin.Authority.Token.cashloan'</span>] = getToken();</span><br><span class="line">        <span class="comment">// 'Bearer ' + getToken() // 让每个请求携带token--['Authorization']为自定义key 请根据实际情况自行修改</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//headers中配置serialize为true开启序列化    是否开启form表单提交</span></span><br><span class="line">    <span class="keyword">if</span> (config.methods === <span class="string">'post'</span> &amp;&amp; meta.isSerialize === <span class="literal">true</span>) &#123;</span><br><span class="line">        config.data =config.data =&gt; &#123;</span><br><span class="line">            <span class="keyword">let</span> list = [];</span><br><span class="line">            <span class="built_in">Object</span>.keys(data).forEach(<span class="function"><span class="params">ele</span> =&gt;</span> &#123;</span><br><span class="line">                list.push(<span class="string">`<span class="subst">$&#123;ele&#125;</span>=<span class="subst">$&#123;data[ele]&#125;</span>`</span>)</span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="keyword">return</span> list.join(<span class="string">'&amp;'</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">    </span><br><span class="line">&#125;, error =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//HTTPresponse拦截-添加响应拦截器</span></span><br><span class="line">axios.interceptors.response.use(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    NProgress.done(); <span class="comment">// 进度条关闭</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> status = <span class="built_in">Number</span>(res.status) || <span class="number">200</span>; <span class="comment">// 返回值必须是200</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> statusWhiteList = website.statusWhiteList || []; <span class="comment">// 白名单 400</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> message = res.data.message || <span class="string">'未知错误'</span>; <span class="comment">// 确定的返回值或者是'未知错误'</span></span><br><span class="line">   </span><br><span class="line">    <span class="keyword">const</span> code = res.data.code</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (code === <span class="number">11002</span>) &#123;</span><br><span class="line">        Message(&#123;</span><br><span class="line">            message,</span><br><span class="line">            type: <span class="string">"error"</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (code === <span class="number">10004</span>) &#123;</span><br><span class="line">        Message(&#123;</span><br><span class="line">            message: <span class="string">"有另一台设备登录"</span>,</span><br><span class="line">            type: <span class="string">'error'</span></span><br><span class="line">        &#125;)</span><br><span class="line">        store.dispatch(<span class="string">'FedLogOut'</span>).then(<span class="function"><span class="params">()</span> =&gt;</span> router.push(&#123;</span><br><span class="line">            path: <span class="string">'/login'</span></span><br><span class="line">        &#125;));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (code === <span class="number">10001</span>) &#123;</span><br><span class="line">        Message(&#123;</span><br><span class="line">            message: <span class="string">"请重新登录"</span>,</span><br><span class="line">            type: <span class="string">'error'</span></span><br><span class="line">        &#125;)</span><br><span class="line">        Cookies.set(<span class="string">'loading'</span>, <span class="literal">true</span>)</span><br><span class="line">        store.dispatch(<span class="string">'FedLogOut'</span>).then(<span class="function"><span class="params">()</span> =&gt;</span> router.push(&#123;</span><br><span class="line">            path: <span class="string">'/login'</span></span><br><span class="line">        &#125;));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (code === <span class="number">10002</span>) &#123;</span><br><span class="line">        Message(&#123;</span><br><span class="line">            dangerouslyUseHTMLString: <span class="literal">true</span>,</span><br><span class="line">            message: <span class="string">`接口为<span class="subst">$&#123;res.request.custom.url&#125;</span>&lt;/br&gt;&lt;/br&gt;<span class="subst">$&#123;getRoleTitle()&#125;</span>没有权限`</span>,</span><br><span class="line">            type: <span class="string">'error'</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (code === <span class="number">10003</span>) &#123;</span><br><span class="line">        Message(&#123;</span><br><span class="line">            dangerouslyUseHTMLString: <span class="literal">true</span>,</span><br><span class="line">            message,</span><br><span class="line">            type: <span class="string">'error'</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (code === <span class="number">404</span>) &#123;</span><br><span class="line">        Message(&#123;</span><br><span class="line">            dangerouslyUseHTMLString: <span class="literal">true</span>,</span><br><span class="line">            message: <span class="string">`接口为<span class="subst">$&#123;res.request.custom.url&#125;</span>&lt;/br&gt;&lt;/br&gt;<span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(res.data)&#125;</span>`</span>,</span><br><span class="line">            type: <span class="string">'error'</span></span><br><span class="line">        &#125;)</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (code === <span class="number">400</span>) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (res.data.message.includes(<span class="string">'/'</span>)) &#123;</span><br><span class="line">            Message(&#123;</span><br><span class="line">                dangerouslyUseHTMLString: <span class="literal">true</span>,</span><br><span class="line">                message: message.split(<span class="string">'/'</span>)[<span class="number">1</span>],</span><br><span class="line">                type: <span class="string">'error'</span></span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Message(&#123;</span><br><span class="line">            dangerouslyUseHTMLString: <span class="literal">true</span>,</span><br><span class="line">            message: <span class="string">`<span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(res.data)&#125;</span>`</span>,</span><br><span class="line">            type: <span class="string">'error'</span></span><br><span class="line">        &#125;)</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (code === <span class="number">500</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!res.data.message.includes(<span class="string">"TIMEOUT"</span>))&#123;</span><br><span class="line">            Message(&#123;</span><br><span class="line">                dangerouslyUseHTMLString: <span class="literal">true</span>,</span><br><span class="line">                message:<span class="string">`服务器故障，请稍后重试`</span>,</span><br><span class="line">                <span class="comment">// message: `接口为$&#123;res.request.custom.url&#125;&lt;/br&gt;&lt;/br&gt;$&#123;JSON.stringify(res.data)&#125;`,</span></span><br><span class="line">                type: <span class="string">'error'</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果在白名单里则自行catch逻辑处理</span></span><br><span class="line">    <span class="keyword">if</span> (statusWhiteList.includes(status)) <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(res);</span><br><span class="line">    <span class="comment">//如果是401则跳转到登录页面</span></span><br><span class="line">    <span class="keyword">if</span> (status === <span class="number">401</span>) store.dispatch(<span class="string">'FedLogOut'</span>).then(<span class="function"><span class="params">()</span> =&gt;</span> router.push(&#123; <span class="attr">path</span>: <span class="string">'/login'</span> &#125;));</span><br><span class="line">    <span class="comment">// 如果请求为非200否者默认统一处理</span></span><br><span class="line">    <span class="keyword">if</span> (status !== <span class="number">200</span>) &#123;</span><br><span class="line">        Message(&#123;</span><br><span class="line">            message: message,</span><br><span class="line">            type: <span class="string">'error'</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(<span class="keyword">new</span> <span class="built_in">Error</span>(message))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;, error =&gt; &#123;</span><br><span class="line">    NProgress.done();</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(<span class="keyword">new</span> <span class="built_in">Error</span>(error));</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> axios;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> axios </category>
          
      </categories>
      
      
        <tags>
            
            <tag> axios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1 axios中文文档</title>
      <link href="/2019/06/11/axios/1%20axios%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3/"/>
      <url>/2019/06/11/axios/1%20axios%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是-axios？"><a href="#什么是-axios？" class="headerlink" title="什么是 axios？"></a><a href="http://www.axios-js.com/zh-cn/docs/#%E4%BB%80%E4%B9%88%E6%98%AF-axios%EF%BC%9F" target="_blank" rel="noopener"></a>什么是 axios？</h2><p>Axios 是一个基于 promise 的 HTTP 库，可以用在浏览器和 node.js 中。</p><a id="more"></a><h1 id="axios"><a href="#axios" class="headerlink" title="axios"></a><a href="http://www.axios-js.com/zh-cn/docs/#axios" target="_blank" rel="noopener"></a>axios</h1><p><a href="https://www.npmjs.org/package/axios" target="_blank" rel="noopener"><img src="https://img.shields.io/npm/v/axios.svg?style=flat-square#align=left&display=inline&height=20&originHeight=20&originWidth=88&status=done&width=88" alt></a><br><a href="https://travis-ci.org/axios/axios" target="_blank" rel="noopener"><img src="https://img.shields.io/travis/axios/axios.svg?style=flat-square#align=left&display=inline&height=20&originHeight=20&originWidth=88&status=done&width=88" alt></a><br><a href="https://coveralls.io/r/mzabriskie/axios" target="_blank" rel="noopener"><img src="https://img.shields.io/coveralls/mzabriskie/axios.svg?style=flat-square#align=left&display=inline&height=20&originHeight=20&originWidth=96&status=done&width=96" alt></a><br><a href="http://npm-stat.com/charts.html?package=axios" target="_blank" rel="noopener"><img src="https://img.shields.io/npm/dm/axios.svg?style=flat-square#align=left&display=inline&height=20&originHeight=20&originWidth=142&status=done&width=142" alt></a><br><a href="https://gitter.im/mzabriskie/axios" target="_blank" rel="noopener"><img src="https://img.shields.io/gitter/room/mzabriskie/axios.svg?style=flat-square#align=left&display=inline&height=20&originHeight=20&originWidth=90&status=done&width=90" alt></a><br><a href="https://www.codetriage.com/axios/axios" target="_blank" rel="noopener"><img src="https://cdn.nlark.com/yuque/0/2019/svg/271124/1560250004028-3c53945d-a580-4506-bd3a-a4f7b19494d5.svg#align=left&display=inline&height=20&originHeight=20&originWidth=109&size=0&status=done&width=109" alt></a><br>Axios 是一个基于 promise 的 HTTP 库，可以用在浏览器和 node.js 中。</p><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a><a href="http://www.axios-js.com/zh-cn/docs/#%E7%89%B9%E6%80%A7" target="_blank" rel="noopener"></a>特性</h2><ul><li>从浏览器中创建 <a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest" target="_blank" rel="noopener">XMLHttpRequests</a></li><li>从 node.js 创建 <a href="http://nodejs.org/api/http.html" target="_blank" rel="noopener">http</a> 请求</li><li>支持 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="noopener">Promise</a> API</li><li>拦截请求和响应</li><li>转换请求数据和响应数据</li><li>取消请求</li><li>自动转换 JSON 数据</li><li>客户端支持防御 <a href="http://en.wikipedia.org/wiki/Cross-site_request_forgery" target="_blank" rel="noopener">XSRF</a></li></ul><h2 id="浏览器支持"><a href="#浏览器支持" class="headerlink" title="浏览器支持"></a><a href="http://www.axios-js.com/zh-cn/docs/#%E6%B5%8F%E8%A7%88%E5%99%A8%E6%94%AF%E6%8C%81" target="_blank" rel="noopener"></a>浏览器支持</h2><table><thead><tr><th></th><th align="left"><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1560250004759-3575626d-d083-496e-b471-758f9ec664e7.png#align=left&display=inline&percent=0&size=0&status=done" alt></th><th align="left"><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1560250006923-c67547d7-a258-4726-ab88-7b129d3fdf57.png#align=left&display=inline&percent=0&size=0&status=done" alt></th><th align="left"><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1560250004234-440efe9c-c7b2-4546-a0ed-9664320de551.png#align=left&display=inline&percent=0&size=0&status=done" alt></th><th align="left"><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1560250005544-9d6b7dca-e7ec-45d9-8eb1-df8d51d17550.png#align=left&display=inline&percent=0&size=0&status=done" alt></th><th align="left"><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1560250004449-6fcd8996-f3d8-43d2-9576-6c4971a2a43d.png#align=left&display=inline&percent=0&size=0&status=done" alt></th><th align="left"><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1560250005797-3133a7ce-e124-45fa-a646-e96ebd14b619.png#align=left&display=inline&percent=0&size=0&status=done" alt></th></tr></thead><tbody><tr><td>Latest ✔</td><td align="left">Latest ✔</td><td align="left">Latest ✔</td><td align="left">Latest ✔</td><td align="left">Latest ✔</td><td align="left">8+ ✔</td><td align="left"></td></tr></tbody></table><p><a href="https://saucelabs.com/u/axios" target="_blank" rel="noopener"><img src="https://cdn.nlark.com/yuque/0/2019/svg/271124/1560250003320-5caf3430-01a7-4a77-8723-7e89d793b43d.svg#align=left&display=inline&height=140&originHeight=140&originWidth=560&size=0&status=done&width=560" alt></a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a><a href="http://www.axios-js.com/zh-cn/docs/#%E5%AE%89%E8%A3%85" target="_blank" rel="noopener"></a>安装</h2><p>使用 npm:<br>使用 bower:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install axios</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bower install axios</span><br></pre></td></tr></table></figure><p>使用 cdn:</p><table><thead><tr><th align="left"><script src="https://unpkg.com/axios/dist/axios.min.js"></script></th></tr></thead></table><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a><a href="http://www.axios-js.com/zh-cn/docs/#%E6%A1%88%E4%BE%8B" target="_blank" rel="noopener"></a>案例</h2><p>执行 <code>GET</code> 请求</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 为给定 ID 的 user 创建请求</span></span><br><span class="line">axios.get(<span class="string">'/user?ID=12345'</span>)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(response);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上面的请求也可以这样做</span></span><br><span class="line">axios.get(<span class="string">'/user'</span>, &#123;</span><br><span class="line">    params: &#123;</span><br><span class="line">      ID: <span class="number">12345</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(response);</span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error);  </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>执行 <code>POST</code> 请求</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">axios.post(<span class="string">'/user'</span>, &#123;</span><br><span class="line">    firstName: <span class="string">'Fred'</span>,</span><br><span class="line">    lastName: <span class="string">'Flintstone'</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(response);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>执行多个并发请求</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUserAccount</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> axios.get(<span class="string">'/user/12345'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUserPermissions</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> axios.get(<span class="string">'/user/12345/permissions'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">axios.all([getUserAccount(), getUserPermissions()])</span><br><span class="line">  .then(axios.spread(<span class="function"><span class="keyword">function</span> (<span class="params">acct, perms</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 两个请求现在都执行完成</span></span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><h2 id="axios-API"><a href="#axios-API" class="headerlink" title="axios API"></a>axios API</h2><p>可以通过向 <code>axios</code> 传递相关配置来创建请求</p><h5 id="axios-config"><a href="#axios-config" class="headerlink" title="axios(config)"></a><a href="http://www.axios-js.com/zh-cn/docs/#axios-config" target="_blank" rel="noopener"></a>axios(config)</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 发送 POST 请求</span></span><br><span class="line">axios(&#123;</span><br><span class="line">  method: <span class="string">'post'</span>,</span><br><span class="line">  url: <span class="string">'/user/12345'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    firstName: <span class="string">'Fred'</span>,</span><br><span class="line">    lastName: <span class="string">'Flintstone'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取远端图片</span></span><br><span class="line">axios(&#123;</span><br><span class="line">  method:<span class="string">'get'</span>,</span><br><span class="line">  url:<span class="string">'http://bit.ly/2mTM3nY'</span>,</span><br><span class="line">  responseType:<span class="string">'stream'</span></span><br><span class="line">&#125;)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">  response.data.pipe(fs.createWriteStream(<span class="string">'ada_lovelace.jpg'</span>))</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="axios-url-config"><a href="#axios-url-config" class="headerlink" title="axios(url[, config])"></a><a href="http://www.axios-js.com/zh-cn/docs/#axios-url-config" target="_blank" rel="noopener"></a>axios(url[, config])</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 发送 GET 请求（默认的方法）</span></span><br><span class="line">axios(<span class="string">'/user/12345'</span>);</span><br></pre></td></tr></table></figure><h3 id="请求方法的别名"><a href="#请求方法的别名" class="headerlink" title="请求方法的别名"></a><a href="http://www.axios-js.com/zh-cn/docs/#%E8%AF%B7%E6%B1%82%E6%96%B9%E6%B3%95%E7%9A%84%E5%88%AB%E5%90%8D" target="_blank" rel="noopener"></a>请求方法的别名</h3><p>为方便起见，为所有支持的请求方法提供了别名</p><h5 id="axios-request-config"><a href="#axios-request-config" class="headerlink" title="axios.request(config)"></a><a href="http://www.axios-js.com/zh-cn/docs/#axios-request-config" target="_blank" rel="noopener"></a>axios.request(config)</h5><h5 id="axios-get-url-config"><a href="#axios-get-url-config" class="headerlink" title="axios.get(url[, config])"></a><a href="http://www.axios-js.com/zh-cn/docs/#axios-get-url-config" target="_blank" rel="noopener"></a>axios.get(url[, config])</h5><h5 id="axios-delete-url-config"><a href="#axios-delete-url-config" class="headerlink" title="axios.delete(url[, config])"></a><a href="http://www.axios-js.com/zh-cn/docs/#axios-delete-url-config" target="_blank" rel="noopener"></a>axios.delete(url[, config])</h5><h5 id="axios-head-url-config"><a href="#axios-head-url-config" class="headerlink" title="axios.head(url[, config])"></a><a href="http://www.axios-js.com/zh-cn/docs/#axios-head-url-config" target="_blank" rel="noopener"></a>axios.head(url[, config])</h5><h5 id="axios-options-url-config"><a href="#axios-options-url-config" class="headerlink" title="axios.options(url[, config])"></a><a href="http://www.axios-js.com/zh-cn/docs/#axios-options-url-config" target="_blank" rel="noopener"></a>axios.options(url[, config])</h5><h5 id="axios-post-url-data-config"><a href="#axios-post-url-data-config" class="headerlink" title="axios.post(url[, data[, config]])"></a><a href="http://www.axios-js.com/zh-cn/docs/#axios-post-url-data-config" target="_blank" rel="noopener"></a>axios.post(url[, data[, config]])</h5><h5 id="axios-put-url-data-config"><a href="#axios-put-url-data-config" class="headerlink" title="axios.put(url[, data[, config]])"></a><a href="http://www.axios-js.com/zh-cn/docs/#axios-put-url-data-config" target="_blank" rel="noopener"></a>axios.put(url[, data[, config]])</h5><h5 id="axios-patch-url-data-config"><a href="#axios-patch-url-data-config" class="headerlink" title="axios.patch(url[, data[, config]])"></a><a href="http://www.axios-js.com/zh-cn/docs/#axios-patch-url-data-config" target="_blank" rel="noopener"></a>axios.patch(url[, data[, config]])</h5><h6 id="注意"><a href="#注意" class="headerlink" title="注意"></a><a href="http://www.axios-js.com/zh-cn/docs/#%E6%B3%A8%E6%84%8F" target="_blank" rel="noopener"></a>注意</h6><p>在使用别名方法时， <code>url</code>、<code>method</code>、<code>data</code> 这些属性都不必在配置中指定。</p><h3 id="并发"><a href="#并发" class="headerlink" title="并发"></a><a href="http://www.axios-js.com/zh-cn/docs/#%E5%B9%B6%E5%8F%91" target="_blank" rel="noopener"></a>并发</h3><p>处理并发请求的助手函数</p><h5 id="axios-all-iterable"><a href="#axios-all-iterable" class="headerlink" title="axios.all(iterable)"></a><a href="http://www.axios-js.com/zh-cn/docs/#axios-all-iterable" target="_blank" rel="noopener"></a>axios.all(iterable)</h5><h5 id="axios-spread-callback"><a href="#axios-spread-callback" class="headerlink" title="axios.spread(callback)"></a><a href="http://www.axios-js.com/zh-cn/docs/#axios-spread-callback" target="_blank" rel="noopener"></a>axios.spread(callback)</h5><h3 id="创建实例"><a href="#创建实例" class="headerlink" title="创建实例"></a><a href="http://www.axios-js.com/zh-cn/docs/#%E5%88%9B%E5%BB%BA%E5%AE%9E%E4%BE%8B" target="_blank" rel="noopener"></a>创建实例</h3><p>可以使用自定义配置新建一个 axios 实例</p><h5 id="axios-create-config"><a href="#axios-create-config" class="headerlink" title="axios.create([config])"></a><a href="http://www.axios-js.com/zh-cn/docs/#axios-create-config" target="_blank" rel="noopener"></a>axios.create([config])</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> instance = axios.create(&#123;</span><br><span class="line">  baseURL: <span class="string">'https://some-domain.com/api/'</span>,</span><br><span class="line">  timeout: <span class="number">1000</span>,</span><br><span class="line">  headers: &#123;<span class="string">'X-Custom-Header'</span>: <span class="string">'foobar'</span>&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="实例方法"><a href="#实例方法" class="headerlink" title="实例方法"></a><a href="http://www.axios-js.com/zh-cn/docs/#%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95" target="_blank" rel="noopener"></a>实例方法</h3><p>以下是可用的实例方法。指定的配置将与实例的配置合并。</p><h5 id="axios-request-config-1"><a href="#axios-request-config-1" class="headerlink" title="axios#request(config)"></a><a href="http://www.axios-js.com/zh-cn/docs/#axios-request-config-1" target="_blank" rel="noopener"></a>axios#request(config)</h5><h5 id="axios-get-url-config-1"><a href="#axios-get-url-config-1" class="headerlink" title="axios#get(url[, config])"></a><a href="http://www.axios-js.com/zh-cn/docs/#axios-get-url-config-1" target="_blank" rel="noopener"></a>axios#get(url[, config])</h5><h5 id="axios-delete-url-config-1"><a href="#axios-delete-url-config-1" class="headerlink" title="axios#delete(url[, config])"></a><a href="http://www.axios-js.com/zh-cn/docs/#axios-delete-url-config-1" target="_blank" rel="noopener"></a>axios#delete(url[, config])</h5><h5 id="axios-head-url-config-1"><a href="#axios-head-url-config-1" class="headerlink" title="axios#head(url[, config])"></a><a href="http://www.axios-js.com/zh-cn/docs/#axios-head-url-config-1" target="_blank" rel="noopener"></a>axios#head(url[, config])</h5><h5 id="axios-options-url-config-1"><a href="#axios-options-url-config-1" class="headerlink" title="axios#options(url[, config])"></a><a href="http://www.axios-js.com/zh-cn/docs/#axios-options-url-config-1" target="_blank" rel="noopener"></a>axios#options(url[, config])</h5><h5 id="axios-post-url-data-config-1"><a href="#axios-post-url-data-config-1" class="headerlink" title="axios#post(url[, data[, config]])"></a><a href="http://www.axios-js.com/zh-cn/docs/#axios-post-url-data-config-1" target="_blank" rel="noopener"></a>axios#post(url[, data[, config]])</h5><h5 id="axios-put-url-data-config-1"><a href="#axios-put-url-data-config-1" class="headerlink" title="axios#put(url[, data[, config]])"></a><a href="http://www.axios-js.com/zh-cn/docs/#axios-put-url-data-config-1" target="_blank" rel="noopener"></a>axios#put(url[, data[, config]])</h5><h5 id="axios-patch-url-data-config-1"><a href="#axios-patch-url-data-config-1" class="headerlink" title="axios#patch(url[, data[, config]])"></a><a href="http://www.axios-js.com/zh-cn/docs/#axios-patch-url-data-config-1" target="_blank" rel="noopener"></a>axios#patch(url[, data[, config]])</h5><h2 id="请求配置"><a href="#请求配置" class="headerlink" title="请求配置"></a><a href="http://www.axios-js.com/zh-cn/docs/#%E8%AF%B7%E6%B1%82%E9%85%8D%E7%BD%AE" target="_blank" rel="noopener"></a>请求配置</h2><p>这些是创建请求时可以用的配置选项。只有 <code>url</code> 是必需的。如果没有指定 <code>method</code>，请求将默认使用 <code>get</code>方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="comment">// `url` 是用于请求的服务器 URL</span></span><br><span class="line">  url: <span class="string">'/user'</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `method` 是创建请求时使用的方法</span></span><br><span class="line">  method: <span class="string">'get'</span>, <span class="comment">// default</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// `baseURL` 将自动加在 `url` 前面，除非 `url` 是一个绝对 URL。</span></span><br><span class="line">  <span class="comment">//  它可以通过设置一个 `baseURL` 便于为 axios 实例的方法传递相对 URL</span></span><br><span class="line">  baseURL: <span class="string">'https://some-domain.com/api/'</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `transformRequest` 允许在向服务器发送前，修改请求数据</span></span><br><span class="line">  <span class="comment">// 只能用在 'PUT', 'POST' 和 'PATCH' 这几个请求方法</span></span><br><span class="line">  <span class="comment">// 后面数组中的函数必须返回一个字符串，或 ArrayBuffer，或 Stream</span></span><br><span class="line">  transformRequest: [<span class="function"><span class="keyword">function</span> (<span class="params">data, headers</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 对 data 进行任意转换处理</span></span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">  &#125;],</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `transformResponse` 在传递给 then/catch 前，允许修改响应数据</span></span><br><span class="line">  transformResponse: [<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 对 data 进行任意转换处理</span></span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">  &#125;],</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `headers` 是即将被发送的自定义请求头</span></span><br><span class="line">  headers: &#123;<span class="string">'X-Requested-With'</span>: <span class="string">'XMLHttpRequest'</span>&#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `params` 是即将与请求一起发送的 URL 参数</span></span><br><span class="line">  <span class="comment">// 必须是一个无格式对象(plain object)或 URLSearchParams 对象</span></span><br><span class="line">  params: &#123;</span><br><span class="line">    ID: <span class="number">12345</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">   <span class="comment">// `paramsSerializer` 是一个负责 `params` 序列化的函数</span></span><br><span class="line">  <span class="comment">// (e.g. https://www.npmjs.com/package/qs, http://api.jquery.com/jquery.param/)</span></span><br><span class="line">  paramsSerializer: <span class="function"><span class="keyword">function</span>(<span class="params">params</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Qs.stringify(params, &#123;<span class="attr">arrayFormat</span>: <span class="string">'brackets'</span>&#125;)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `data` 是作为请求主体被发送的数据</span></span><br><span class="line">  <span class="comment">// 只适用于这些请求方法 'PUT', 'POST', 和 'PATCH'</span></span><br><span class="line">  <span class="comment">// 在没有设置 `transformRequest` 时，必须是以下类型之一：</span></span><br><span class="line">  <span class="comment">// - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams</span></span><br><span class="line">  <span class="comment">// - 浏览器专属：FormData, File, Blob</span></span><br><span class="line">  <span class="comment">// - Node 专属： Stream</span></span><br><span class="line">  data: &#123;</span><br><span class="line">    firstName: <span class="string">'Fred'</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `timeout` 指定请求超时的毫秒数(0 表示无超时时间)</span></span><br><span class="line">  <span class="comment">// 如果请求话费了超过 `timeout` 的时间，请求将被中断</span></span><br><span class="line">  timeout: <span class="number">1000</span>,</span><br><span class="line"></span><br><span class="line">   <span class="comment">// `withCredentials` 表示跨域请求时是否需要使用凭证</span></span><br><span class="line">  withCredentials: <span class="literal">false</span>, <span class="comment">// default</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// `adapter` 允许自定义处理请求，以使测试更轻松</span></span><br><span class="line">  <span class="comment">// 返回一个 promise 并应用一个有效的响应 (查阅 [response docs](#response-api)).</span></span><br><span class="line">  adapter: <span class="function"><span class="keyword">function</span> (<span class="params">config</span>) </span>&#123;</span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line"> <span class="comment">// `auth` 表示应该使用 HTTP 基础验证，并提供凭据</span></span><br><span class="line">  <span class="comment">// 这将设置一个 `Authorization` 头，覆写掉现有的任意使用 `headers` 设置的自定义 `Authorization`头</span></span><br><span class="line">  auth: &#123;</span><br><span class="line">    username: <span class="string">'janedoe'</span>,</span><br><span class="line">    password: <span class="string">'s00pers3cret'</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">   <span class="comment">// `responseType` 表示服务器响应的数据类型，可以是 'arraybuffer', 'blob', 'document', 'json', 'text', 'stream'</span></span><br><span class="line">  responseType: <span class="string">'json'</span>, <span class="comment">// default</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// `responseEncoding` indicates encoding to use for decoding responses</span></span><br><span class="line">  <span class="comment">// Note: Ignored for `responseType` of 'stream' or client-side requests</span></span><br><span class="line">  responseEncoding: <span class="string">'utf8'</span>, <span class="comment">// default</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// `xsrfCookieName` 是用作 xsrf token 的值的cookie的名称</span></span><br><span class="line">  xsrfCookieName: <span class="string">'XSRF-TOKEN'</span>, <span class="comment">// default</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// `xsrfHeaderName` is the name of the http header that carries the xsrf token value</span></span><br><span class="line">  xsrfHeaderName: <span class="string">'X-XSRF-TOKEN'</span>, <span class="comment">// default</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// `onUploadProgress` 允许为上传处理进度事件</span></span><br><span class="line">  onUploadProgress: <span class="function"><span class="keyword">function</span> (<span class="params">progressEvent</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Do whatever you want with the native progress event</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `onDownloadProgress` 允许为下载处理进度事件</span></span><br><span class="line">  onDownloadProgress: <span class="function"><span class="keyword">function</span> (<span class="params">progressEvent</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 对原生进度事件的处理</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">   <span class="comment">// `maxContentLength` 定义允许的响应内容的最大尺寸</span></span><br><span class="line">  maxContentLength: <span class="number">2000</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `validateStatus` 定义对于给定的HTTP 响应状态码是 resolve 或 reject  promise 。如果 `validateStatus` 返回 `true` (或者设置为 `null` 或 `undefined`)，promise 将被 resolve; 否则，promise 将被 rejecte</span></span><br><span class="line">  validateStatus: <span class="function"><span class="keyword">function</span> (<span class="params">status</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> status &gt;= <span class="number">200</span> &amp;&amp; status &lt; <span class="number">300</span>; <span class="comment">// default</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `maxRedirects` 定义在 node.js 中 follow 的最大重定向数目</span></span><br><span class="line">  <span class="comment">// 如果设置为0，将不会 follow 任何重定向</span></span><br><span class="line">  maxRedirects: <span class="number">5</span>, <span class="comment">// default</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// `socketPath` defines a UNIX Socket to be used in node.js.</span></span><br><span class="line">  <span class="comment">// e.g. '/var/run/docker.sock' to send requests to the docker daemon.</span></span><br><span class="line">  <span class="comment">// Only either `socketPath` or `proxy` can be specified.</span></span><br><span class="line">  <span class="comment">// If both are specified, `socketPath` is used.</span></span><br><span class="line">  socketPath: <span class="literal">null</span>, <span class="comment">// default</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// `httpAgent` 和 `httpsAgent` 分别在 node.js 中用于定义在执行 http 和 https 时使用的自定义代理。允许像这样配置选项：</span></span><br><span class="line">  <span class="comment">// `keepAlive` 默认没有启用</span></span><br><span class="line">  httpAgent: <span class="keyword">new</span> http.Agent(&#123; <span class="attr">keepAlive</span>: <span class="literal">true</span> &#125;),</span><br><span class="line">  httpsAgent: <span class="keyword">new</span> https.Agent(&#123; <span class="attr">keepAlive</span>: <span class="literal">true</span> &#125;),</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 'proxy' 定义代理服务器的主机名称和端口</span></span><br><span class="line">  <span class="comment">// `auth` 表示 HTTP 基础验证应当用于连接代理，并提供凭据</span></span><br><span class="line">  <span class="comment">// 这将会设置一个 `Proxy-Authorization` 头，覆写掉已有的通过使用 `header` 设置的自定义 `Proxy-Authorization` 头。</span></span><br><span class="line">  proxy: &#123;</span><br><span class="line">    host: <span class="string">'127.0.0.1'</span>,</span><br><span class="line">    port: <span class="number">9000</span>,</span><br><span class="line">    auth: &#123;</span><br><span class="line">      username: <span class="string">'mikeymike'</span>,</span><br><span class="line">      password: <span class="string">'rapunz3l'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `cancelToken` 指定用于取消请求的 cancel token</span></span><br><span class="line">  <span class="comment">// （查看后面的 Cancellation 这节了解更多）</span></span><br><span class="line">    </span><br><span class="line">  cancelToken: <span class="keyword">new</span> CancelToken(<span class="function"><span class="keyword">function</span> (<span class="params">cancel</span>) </span>&#123;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="响应结构"><a href="#响应结构" class="headerlink" title="响应结构"></a><a href="http://www.axios-js.com/zh-cn/docs/#%E5%93%8D%E5%BA%94%E7%BB%93%E6%9E%84" target="_blank" rel="noopener"></a>响应结构</h2><p>某个请求的响应包含以下信息</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// `data` 由服务器提供的响应</span></span><br><span class="line">  data: &#123;&#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `status` 来自服务器响应的 HTTP 状态码</span></span><br><span class="line">  status: <span class="number">200</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `statusText` 来自服务器响应的 HTTP 状态信息</span></span><br><span class="line">  statusText: <span class="string">'OK'</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `headers` 服务器响应的头</span></span><br><span class="line">  headers: &#123;&#125;,</span><br><span class="line"></span><br><span class="line">   <span class="comment">// `config` 是为请求提供的配置信息</span></span><br><span class="line">  config: &#123;&#125;,</span><br><span class="line"> <span class="comment">// 'request'</span></span><br><span class="line">  <span class="comment">// `request` is the request that generated this response</span></span><br><span class="line"><span class="comment">// It is the last ClientRequest instance in node.js (in redirects)</span></span><br><span class="line">  <span class="comment">// and an XMLHttpRequest instance the browser</span></span><br><span class="line">  request: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 <code>then</code> 时，你将接收下面这样的响应 :</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">axios.get(<span class="string">'/user/12345'</span>)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(response.data);</span><br><span class="line">    <span class="built_in">console</span>.log(response.status);</span><br><span class="line">    <span class="built_in">console</span>.log(response.statusText);</span><br><span class="line">    <span class="built_in">console</span>.log(response.headers);</span><br><span class="line">    <span class="built_in">console</span>.log(response.config);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在使用 <code>catch</code> 时，或传递 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then" target="_blank" rel="noopener">rejection callback</a> 作为 <code>then</code> 的第二个参数时，响应可以通过 <code>error</code> 对象可被使用，正如在<a href="https://www.kancloud.cn/yunye/axios/234845#handling-errors" target="_blank" rel="noopener">错误处理</a>这一节所讲。</p><h2 id="配置默认值"><a href="#配置默认值" class="headerlink" title="配置默认值"></a><a href="http://www.axios-js.com/zh-cn/docs/#%E9%85%8D%E7%BD%AE%E9%BB%98%E8%AE%A4%E5%80%BC" target="_blank" rel="noopener"></a>配置默认值</h2><p>你可以指定将被用在各个请求的配置默认值</p><h3 id="全局的-axios-默认值"><a href="#全局的-axios-默认值" class="headerlink" title="全局的 axios 默认值"></a><a href="http://www.axios-js.com/zh-cn/docs/#%E5%85%A8%E5%B1%80%E7%9A%84-axios-%E9%BB%98%E8%AE%A4%E5%80%BC" target="_blank" rel="noopener"></a>全局的 axios 默认值</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">axios.defaults.baseURL = <span class="string">'https://api.example.com'</span>;</span><br><span class="line">axios.defaults.headers.common[<span class="string">'Authorization'</span>] = AUTH_TOKEN;</span><br><span class="line">axios.defaults.headers.post[<span class="string">'Content-Type'</span>] = <span class="string">'application/x-www-form-urlencoded'</span>;</span><br></pre></td></tr></table></figure><h3 id="自定义实例默认值"><a href="#自定义实例默认值" class="headerlink" title="自定义实例默认值"></a>自定义实例默认值</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Set config defaults when creating the instance</span></span><br><span class="line"><span class="keyword">const</span> instance = axios.create(&#123;</span><br><span class="line">  baseURL: <span class="string">'https://api.example.com'</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Alter defaults after instance has been created</span></span><br><span class="line">instance.defaults.headers.common[<span class="string">'Authorization'</span>] = AUTH_TOKEN;</span><br></pre></td></tr></table></figure><h3 id="配置的优先顺序"><a href="#配置的优先顺序" class="headerlink" title="配置的优先顺序"></a><a href="http://www.axios-js.com/zh-cn/docs/#%E9%85%8D%E7%BD%AE%E7%9A%84%E4%BC%98%E5%85%88%E9%A1%BA%E5%BA%8F" target="_blank" rel="noopener"></a>配置的优先顺序</h3><p>配置会以一个优先顺序进行合并。这个顺序是：在 <code>lib/defaults.js</code> 找到的库的默认值，然后是实例的 <code>defaults</code> 属性，最后是请求的 <code>config</code> 参数。后者将优先于前者。这里是一个例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用由库提供的配置的默认值来创建实例</span></span><br><span class="line"><span class="comment">// 此时超时配置的默认值是 `0`</span></span><br><span class="line"><span class="keyword">var</span> instance = axios.create();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 覆写库的超时默认值</span></span><br><span class="line"><span class="comment">// 现在，在超时前，所有请求都会等待 2.5 秒</span></span><br><span class="line">instance.defaults.timeout = <span class="number">2500</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为已知需要花费很长时间的请求覆写超时设置</span></span><br><span class="line">instance.get(<span class="string">'/longRequest'</span>, &#123;</span><br><span class="line">  timeout: <span class="number">5000</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h2><p>在请求或响应被 <code>then</code> 或 <code>catch</code> 处理前拦截它们。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加请求拦截器</span></span><br><span class="line">axios.interceptors.request.use(<span class="function"><span class="keyword">function</span> (<span class="params">config</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 在发送请求之前做些什么</span></span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 对请求错误做些什么</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加响应拦截器</span></span><br><span class="line">axios.interceptors.response.use(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 对响应数据做点什么</span></span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">  &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 对响应错误做点什么</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>如果你想在稍后移除拦截器，可以这样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myInterceptor = axios.interceptors.request.use(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;<span class="comment">/*...*/</span>&#125;);</span><br><span class="line">axios.interceptors.request.eject(myInterceptor);</span><br></pre></td></tr></table></figure><p>可以为自定义 axios 实例添加拦截器</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> instance = axios.create();</span><br><span class="line">instance.interceptors.request.use(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;<span class="comment">/*...*/</span>&#125;);</span><br></pre></td></tr></table></figure><h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">axios.get(<span class="string">'/user/12345'</span>)</span><br><span class="line">  .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (error.response) &#123;</span><br><span class="line">      <span class="comment">// The request was made and the server responded with a status code</span></span><br><span class="line">      <span class="comment">// that falls out of the range of 2xx</span></span><br><span class="line">      <span class="built_in">console</span>.log(error.response.data);</span><br><span class="line">      <span class="built_in">console</span>.log(error.response.status);</span><br><span class="line">      <span class="built_in">console</span>.log(error.response.headers);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (error.request) &#123;</span><br><span class="line">      <span class="comment">// The request was made but no response was received</span></span><br><span class="line">      <span class="comment">// `error.request` is an instance of XMLHttpRequest in the browser and an instance of</span></span><br><span class="line">      <span class="comment">// http.ClientRequest in node.js</span></span><br><span class="line">      <span class="built_in">console</span>.log(error.request);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// Something happened in setting up the request that triggered an Error</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'Error'</span>, error.message);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(error.config);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>Y可以使用 <code>validateStatus</code> 配置选项定义一个自定义 HTTP 状态码的错误范围。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">axios.get(<span class="string">'/user/12345'</span>, &#123;</span><br><span class="line">  validateStatus: <span class="function"><span class="keyword">function</span> (<span class="params">status</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> status &lt; <span class="number">500</span>; <span class="comment">// Reject only if the status code is greater than or equal to 500</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="取消"><a href="#取消" class="headerlink" title="取消"></a>取消</h2><p>使用 <em>cancel token</em> 取消请求</p><blockquote><p>Axios 的 cancel token API 基于<a href="https://github.com/tc39/proposal-cancelable-promises" target="_blank" rel="noopener">cancelable promises proposal</a>，它还处于第一阶段。</p></blockquote><p>可以使用 <code>CancelToken.source</code> 工厂方法创建 cancel token，像这样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> CancelToken = axios.CancelToken;</span><br><span class="line"><span class="keyword">const</span> source = CancelToken.source();</span><br><span class="line"></span><br><span class="line">axios.get(<span class="string">'/user/12345'</span>, &#123;</span><br><span class="line">  cancelToken: source.token</span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">thrown</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (axios.isCancel(thrown)) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Request canceled'</span>, thrown.message);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">     <span class="comment">// 处理错误</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">axios.post(<span class="string">'/user/12345'</span>, &#123;</span><br><span class="line">  name: <span class="string">'new name'</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">  cancelToken: source.token</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取消请求（message 参数是可选的）</span></span><br><span class="line">source.cancel(<span class="string">'Operation canceled by the user.'</span>);</span><br></pre></td></tr></table></figure><p>还可以通过传递一个 executor 函数到 <code>CancelToken</code> 的构造函数来创建 cancel token：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> CancelToken = axios.CancelToken;</span><br><span class="line"><span class="keyword">let</span> cancel;</span><br><span class="line"></span><br><span class="line">axios.get(<span class="string">'/user/12345'</span>, &#123;</span><br><span class="line">  cancelToken: <span class="keyword">new</span> CancelToken(<span class="function"><span class="keyword">function</span> <span class="title">executor</span>(<span class="params">c</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// executor 函数接收一个 cancel 函数作为参数</span></span><br><span class="line">    cancel = c;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// cancel the request</span></span><br><span class="line">cancel();</span><br></pre></td></tr></table></figure><blockquote><p>注意: 可以使用同一个 cancel token 取消多个请求</p></blockquote><h2 id="使用-application-x-www-form-urlencoded-format"><a href="#使用-application-x-www-form-urlencoded-format" class="headerlink" title="使用 application/x-www-form-urlencoded format"></a><a href="http://www.axios-js.com/zh-cn/docs/#%E4%BD%BF%E7%94%A8-application-x-www-form-urlencoded-format" target="_blank" rel="noopener"></a>使用 application/x-www-form-urlencoded format</h2><p>默认情况下，axios将JavaScript对象序列化为JSON。 要以application / x-www-form-urlencoded格式发送数据，您可以使用以下选项之一。</p><h3 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a><a href="http://www.axios-js.com/zh-cn/docs/#%E6%B5%8F%E8%A7%88%E5%99%A8" target="_blank" rel="noopener"></a>浏览器</h3><p>在浏览器中，您可以使用URLSearchParams API，如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> params = <span class="keyword">new</span> URLSearchParams();</span><br><span class="line">params.append(<span class="string">'param1'</span>, <span class="string">'value1'</span>);</span><br><span class="line">params.append(<span class="string">'param2'</span>, <span class="string">'value2'</span>);</span><br><span class="line">axios.post(<span class="string">'/foo'</span>, params);</span><br></pre></td></tr></table></figure><blockquote><p>请注意，所有浏览器都不支持URLSearchParams（请参阅caniuse.com），但可以使用polyfill（确保填充全局环境）。</p></blockquote><p>或者，您可以使用qs库编码数据：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> qs = <span class="built_in">require</span>(<span class="string">'qs'</span>);</span><br><span class="line">axios.post(<span class="string">'/foo'</span>, qs.stringify(&#123; <span class="string">'bar'</span>: <span class="number">123</span> &#125;));</span><br></pre></td></tr></table></figure><p>或者以另一种方式（ES6），</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> qs <span class="keyword">from</span> <span class="string">'qs'</span>;</span><br><span class="line"><span class="keyword">const</span> data = &#123; <span class="string">'bar'</span>: <span class="number">123</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> options = &#123;</span><br><span class="line">  method: <span class="string">'POST'</span>,</span><br><span class="line">  headers: &#123; <span class="string">'content-type'</span>: <span class="string">'application/x-www-form-urlencoded'</span> &#125;,</span><br><span class="line">  data: qs.stringify(data),</span><br><span class="line">  url,</span><br><span class="line">&#125;;</span><br><span class="line">axios(options);</span><br></pre></td></tr></table></figure><h3 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h3><p>在node.js中，您可以使用querystring模块，如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> querystring = <span class="built_in">require</span>(<span class="string">'querystring'</span>);</span><br><span class="line">axios.post(<span class="string">'http://something.com/'</span>, querystring.stringify(&#123; <span class="attr">foo</span>: <span class="string">'bar'</span> &#125;));</span><br></pre></td></tr></table></figure><p>您也可以使用qs库。</p><h2 id="Semver"><a href="#Semver" class="headerlink" title="Semver"></a><a href="http://www.axios-js.com/zh-cn/docs/#Semver" target="_blank" rel="noopener"></a>Semver</h2><p>在axios达到1.0版本之前，破坏性更改将以新的次要版本发布。 例如0.5.1和0.5.4将具有相同的API，但0.6.0将具有重大变化。</p><h2 id="Promises"><a href="#Promises" class="headerlink" title="Promises"></a><a href="http://www.axios-js.com/zh-cn/docs/#Promises" target="_blank" rel="noopener"></a>Promises</h2><p>axios 依赖原生的 ES6 Promise 实现而<a href="http://caniuse.com/promises" target="_blank" rel="noopener">被支持</a>. 如果你的环境不支持 ES6 Promise，你可以使用 <a href="https://github.com/jakearchibald/es6-promise" target="_blank" rel="noopener">polyfill</a>.</p><h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a><a href="http://www.axios-js.com/zh-cn/docs/#TypeScript" target="_blank" rel="noopener"></a>TypeScript</h2><p>axios包括TypeScript定义。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span>;</span><br><span class="line">axios.get(<span class="string">'/user?ID=12345'</span>);</span><br></pre></td></tr></table></figure><h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><ul><li><a href="https://github.com/axios/axios/blob/master/CHANGELOG.md" target="_blank" rel="noopener">Changelog</a></li><li><a href="https://github.com/axios/axios/blob/master/UPGRADE_GUIDE.md" target="_blank" rel="noopener">Upgrade Guide</a></li><li><a href="https://github.com/axios/axios/blob/master/ECOSYSTEM.md" target="_blank" rel="noopener">Ecosystem</a></li><li><a href="https://github.com/axios/axios/blob/master/CONTRIBUTING.md" target="_blank" rel="noopener">Contributing Guide</a></li><li><a href="https://github.com/axios/axios/blob/master/CODE_OF_CONDUCT.md" target="_blank" rel="noopener">Code of Conduct</a></li></ul><h2 id="Credits"><a href="#Credits" class="headerlink" title="Credits"></a><a href="http://www.axios-js.com/zh-cn/docs/#Credits" target="_blank" rel="noopener"></a>Credits</h2><p>axios深受Angular提供的、$http服务的启发。 最终，axios是为了在Angular之外使用而提供独立的类似$http服的务。</p><h2 id="协议"><a href="#协议" class="headerlink" title="协议"></a><a href="http://www.axios-js.com/zh-cn/docs/#%E5%8D%8F%E8%AE%AE" target="_blank" rel="noopener"></a>协议</h2><p>MIT</p>]]></content>
      
      
      <categories>
          
          <category> axios </category>
          
      </categories>
      
      
        <tags>
            
            <tag> axios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人简历</title>
      <link href="/2019/06/05/resume/"/>
      <url>/2019/06/05/resume/</url>
      
        <content type="html"><![CDATA[<p><strong>梅衍青</strong>    <br>男  ︳   23岁  ︳大专 ︳ 2年工作经验  ︳ 上海   <br>17621515830 ︳<a href>954663633@qq.com</a>  <br>上海工商职业技术学院   移动互联网方向</p><a id="more"></a><blockquote><p><strong>技能</strong></p></blockquote><p>前端：HTML、CSS、JavaScript<br>前端框架: vue、webpack、cordova、react-native，微信小程序<br>后端：php、node<br>后端框架: thinkphp、express、koa2、egg<br>数据库:mysql、mongodb、redis</p><p>版本控制：git、svn</p><blockquote><p><strong>工作经历</strong>   </p></blockquote><p>上海子杰软件有限公司  2017.01-2018-06  <br>快睿登信息科技(上海)有限公司  2018.06-至今</p><blockquote><p>  <strong>项目经验</strong>  </p></blockquote><p>一、风驰后台v0.2&amp;小通分期v0.2  2019.2-至今<br>项目内容:风驰后台、小通分期(汇宝通)作为第二期项目的迭代。小通分期，增加分期功能。<br>技术栈:avuex、vue全家桶、cordva、webpack、less<br>项目类型:网页、app<br>项目经验:技术点调用cordva插件，获取手机通讯录、GPS、联系人、电量、极光推送等原生功能。同时迭代风驰后台的页面系统，用户量也大量增加后发现并且处理一些关于手机适配的问题(主要是因为cordva是调用手机中的内核浏览器，出现了css3不兼容的问题)<br><br><br>二、重构风驰后台v0.1  2018年12 – 2019-2<br>项目内容:计划迭代汇宝通后台中，我提出了以下问题。1.前后端有绑定关系，发布后，前后端的这种依赖。2.ui的局限，后台都是使用敏捷开发，那么意味着很多组件是根据技术选型的时候就确定了的。我们现有的框架无法做到ui升级。选择迁回老风驰工程量也会很大(这里的重写包括语法结构都需要重写),选择强行在先有ui框架上修改，工程量无法估计。3.需求其实不是很明确的，只能参照老风驰的样子做，新老风驰经手的人都比较多，都是有什么需求直接加什么需求，但是具体权限和细节根据时间的推移，没有任何文档可以参照，所以建议重构。<br>技术栈:avuex、vue全家桶<br>项目类型:网页<br>项目经验：当时遇到了一个问题，就是这套后台必须兼容手机端的问题，element-ui的缺点也提现出来的，那就是对于手机端的适配，很多插件都会有问题，第二个问题就是前端人手紧缺，原来使用的架构，人手上无法维护。加上时间比较紧张，经过调研，采用了avuex的框架方案，该方案的优势在于json驱动ui的思想理念。以最快的速度，重构了风驰后台。<br> <br>三、黑卡  2018.11-2018-12<br>项目内容:根据个人资质情况，可以进行不同次数的征信洗白，享有最高100，000的额度利率低至银行利率，介绍老铁洗白征信，长期有效，连续签到一年，1000元大奖，三星级会员五星级酒店。<br>技术栈: vue、cordva、webpack、less<br>项目类型：app、网页<br>项目经验：针对于先有公司项目的沉淀，公司决定开启黑卡项目业务，对于vue技术的了解和逐步深入后，公司也对于原生和动态交互提出了更高的要求，针对于目前项目的组件规划和开发。<br> <br>四、汇宝通-后台   2018.08-2018-10<br>项目内容: vue后台贷款系统，引流，贷款模块，用户模块，商品模块，进件模块，风控模块<br>技术栈:vue、webpack、element-ui<br>项目类型：网页<br>项目经验:正对于现在走向组件化的趋势，配合公司领导，进行了后台组件的开发。将原先的贷款系统，引流，贷款模块，用户模块，商品模块，进件模块，风控模块拆分为各个模块，方便与后台页面随时的重构组装，服务与公司将部分模块卖给第三方公司的构想。<br> <br>五、汇宝通-app    2018.07-2018-09<br>项目内容: p2p的线上贷款系统，引流，贷款模块，用户模块，商品模块，进件模块，风控模块为一体的app项目。<br>技术栈:vue、cordva、webpack、less<br>项目类型：app、网页<br>项目经验：离开上一家公司后，我开始了新的征程，这第一次对于node技术进行了了解。前端做到工程和模块的话处理，将人力减少到最小数的敏捷开发。对于项目负责人的架构进行了学习和梳理。了解了关于cordva的插件。对于三个端(网页，安卓，ios)的兼容性，达到最快的试错。对于webpack的改造项目工程目录，达到了，一份代码能兼容三个端，并且还能够调用原生的底层权限。<br> <br>六、梯子网小程序   2018.01-2018-06<br>项目内容: 梯子网为教育局和大型社会培训机构提供一站式多机构管理，其中主要涉及两个难点，一是多机构的管理，不同机构可以定制自己模块下的内容，只有本机构下的人可以看到。二是定制化产生页面，不同的机构可以定制自己的页面栏目，根据自己的需要展示对应的内容，这还涉及到了不同机构、角色的权限问题。<br>项目类型: 微信小程序<br>技术栈: wxml、wxss、js<br>项目经验：冬去春来，公司决定实现一个小程序的工作规划，对于项目探索工作交给了我。对于视频的学习，可能因为有着react-native项目经验，对于新起的mvvm这样的设计思路有着充分的了解。所以上手写小程序，反而觉得比较简单。对于微信组件和api进行了了解和使用。对于wx.request进行了封装，和关于一些常用函数的封装，针对一些常用组件的封装。例如wx.getStorage、清空缓存、分享、弹窗等等。方便对于其他协作的伙伴调用和使用。<br> <br>七、上海天马Portal系统    2017.11-2017.12<br>项目内容: 上海天马Portal管理系统是为了在公司内部整合所有业务系统，规范统一入口，消息通知，业务处理，是业务统一入口，用户无需牢记各个应用系统的地址，降低用户使用时的困难，避免用户来回切换业务系统，提升用户工作效率。<br><br>项目类型: 网页<br>技术栈:layui、jquery、html<br>项目经验:第一次带2个实习生一起工作，心里美滋滋啊(不排除项目比较简单)，关于前端我才用了layui框架，使用过bootstrap后，总觉得layui的页面的美观程度还是比bootstrap框架要优雅很多的。也让我开始了解代码的书写规范，按照美工的设计与后台的配合，完成了项目的进度。<br> <br>八、英语学习-EnglishOnlie   2017.08-2017.10<br>项目内容: 软件分学生端和教师端，学生端主要实现学习功能，学习进度通过闯关和教师操作控制，教师端主要实现管理功能，管理学生帐户，学习资源管理，学习进度管理。<br>项目类型:app、网页、微信网页<br>技术栈：react-native、html、jquery<br>项目经验:这个公司遗留下的一个比较老的项目，不少组件使用的是react-android，不兼容ios的组件，这个工作的主要任务，就是将ios的兼容问题彻底的解决、并且兼容网页与微信网页。这个项目最大的特色应该就是学生读英语的功能，可以经过讯飞系统的语言识别，来判断学生的读音，从而给予评分。第一次了解了网页的录音和微信网页的录音调用是不同的，微信的调用，是不同的，微信有着自己独有的api。<br> <br>九、玖龙移动销售    2017.05-2017.07<br>项目内容: 在前端、管理查看集团的产品、订单、销售统计信息。<br>项目类型:app<br>技术栈:react-native<br>项目经验:经过之前三个月的学习，加入了新的项目组，对于这个项目而言，并没有参加项目的原始的开发计划。当时公司其他的项目比较紧张，与项目组长两个人直接飞往东莞珑石集团技术部门，进行了bug的修复，刚刚参加项目的时候，主要是对于ios的适配问题进行了修复工作(因为我是mac),了解了关于ios的info.list。第一次对于ios白名单有所认识，了解了关于前端调用原生的，最大的问题，是关于一些原生的权限问题。<br> <br>十、中国国际珠宝交易平台  2017.01-2017.04  <br>项目内容: “中国国际珠宝交易平台” APP 具有产品搜索/浏览、商品购买、评价、退换货等功能<br>项目类型:app<br>技术栈:react-native<br>项目经验:这个项目是加入前端组织行列的第一个项目，你知道在2017年，这个react-native在大环境下，其实我认为还不算很成熟，当时项目组没有什么这方面的技术，就自发的组织学习这项技术。几个通宵后的学习，学了基本上的flex布局，对于react-natve的特殊的css处理方法进行了了解，了解了fetch的网络请求方案，让工作的环境中还算能够使用这项技术，因为那时候刚刚入行，代码的稚嫩，如今看来还是有很大的问题。</p><blockquote><p><strong>开源项目</strong></p></blockquote><p><br><a href="https://github.com/MYQ1996/asGiant-admin.git" target="_blank" rel="noopener">https://github.com/MYQ1996/asGiant-admin.git</a><br>项目内容:</p><ul><li>基于egg架构的自动生成接口的框架</li><li>你可以这么理解这个框架，就是在你配置完数据后，就生成了增删改查接口，也同时生成了相关的栏目。</li><li>这样即使你是一个不懂后端的同学，你也可以直接调用接口给前端使用</li></ul><p>_<br>在这个项目中，我希望能解决，前端对于后端的不熟悉和了解，但是对于调用接口比较熟悉的业务现状。<br>完成了以下模块。<br>对于表的增删改查操作、增删改字段的信息、短信管理(只需配置短信的key)、邮箱管理(需配置邮箱的key)、人员注册(手机号、用户名、邮箱)、针对于字段添加了人员权限。之后的规划想做个cms，针对于seo的网站排名调优。对于增加之后，直接生成相对应的前端页面，使用node写了一个微信机器人，符合时代需求，达到人工智能，和机器人聊天的过程中，直接操作平台，完成接口的操作。希望之后，技术提升之后，能够够写出一套兼容性比较高的组件，直接配合平台的使用，有考虑过taro，但是感觉对于原生的调用不足，还在思考这部分的工作。最后达到敏捷开发的效果。(因为加班的缘故，所以一直没有做完)。</p><blockquote><p>掘金博客</p></blockquote><p><a href="https://juejin.im/user/5b4e88986fb9a04fba6e752b" target="_blank" rel="noopener">https://juejin.im/user/5b4e88986fb9a04fba6e752b</a></p><blockquote><p><strong>自我描述</strong></p></blockquote><pre><code>对于技术出生，还是个大专。还是受到不少的压力的，现在毕竟都觉得本科生比较好培养嘛。我是15年进的大专。第一年被选中参加了，学校的比赛班，主要就是负责学校对外的比赛参加。大二开始不参加日常课程直接进入培训，大三进入校企合作上班。对于技术不断追求，热衷学习研究新技术，实践在项目中。对于前后端有着一定的理解，希望能达到技术一个新的高度。</code></pre><p>ps: 希望能和贵公司有着合作的机会，也希望能成为你的同事。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>14 连接redis</title>
      <link href="/2019/06/02/egg-%E4%BC%81%E4%B8%9A%E7%BA%A7%E6%A1%86%E6%9E%B6%E5%92%8C%E5%BA%94%E7%94%A8%E5%85%A5%E9%97%A8/14%20%E8%BF%9E%E6%8E%A5redis/"/>
      <url>/2019/06/02/egg-%E4%BC%81%E4%B8%9A%E7%BA%A7%E6%A1%86%E6%9E%B6%E5%92%8C%E5%BA%94%E7%94%A8%E5%85%A5%E9%97%A8/14%20%E8%BF%9E%E6%8E%A5redis/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Redis client(support redis portocal) based on ioredis for egg framework</p></blockquote><h3 id="14-1-安装"><a href="#14-1-安装" class="headerlink" title="14.1 安装"></a>14.1 安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i egg-redis --save</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="14-2-配置"><a href="#14-2-配置" class="headerlink" title="14.2 配置"></a>14.2 配置</h3><p>Change <code>${app_root}/config/plugin.js</code> to enable redis plugin:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">exports.redis = &#123;</span><br><span class="line"></span><br><span class="line">  enable: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">  package: <span class="string">'egg-redis'</span>,</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Configure redis information in <code>${app_root}/config/config.default.js</code>:<br><strong>Single Client</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">config.redis = &#123;</span><br><span class="line">  client: &#123;</span><br><span class="line">    port: <span class="number">6379</span>,          <span class="comment">// Redis port</span></span><br><span class="line">    host: <span class="string">'127.0.0.1'</span>,   <span class="comment">// Redis host</span></span><br><span class="line">    password: <span class="string">'auth'</span>,</span><br><span class="line">    db: <span class="number">0</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="14-3-使用方法"><a href="#14-3-使用方法" class="headerlink" title="14.3 使用方法"></a>14.3 使用方法</h3><h4 id="14-3-1-service"><a href="#14-3-1-service" class="headerlink" title="14.3.1 service"></a><a href></a>14.3.1 service</h4><p>app/service/redis.js<br><code>if(this.app.redis)</code>判断是否有启用redis</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Service = <span class="built_in">require</span>(<span class="string">'egg'</span>).Service;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RedisService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line">  <span class="keyword">async</span> <span class="keyword">set</span>(key, value, seconds) &#123;</span><br><span class="line">    value = <span class="built_in">JSON</span>.stringify(value);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.app.redis) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!seconds) &#123;</span><br><span class="line">        <span class="keyword">await</span> <span class="keyword">this</span>.app.redis.set(key, value);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">await</span> <span class="keyword">this</span>.app.redis.set(key, value, <span class="string">'EX'</span>, seconds);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> <span class="keyword">get</span>(key) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.app.redis) &#123;</span><br><span class="line">      <span class="keyword">const</span> data = <span class="keyword">await</span> <span class="keyword">this</span>.app.redis.get(key);</span><br><span class="line">      <span class="keyword">if</span> (!data) <span class="keyword">return</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">JSON</span>.parse(data);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = RedisService;</span><br></pre></td></tr></table></figure><h4 id="14-3-2-controller"><a href="#14-3-2-controller" class="headerlink" title="14.3.2 controller"></a><a href></a>14.3.2 controller</h4><p>app/controller/default/index.js如果没有设置redis缓存，就去请求数据,再设置缓存</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> topNav = <span class="keyword">await</span> <span class="keyword">this</span>.ctx.service.cache.get(<span class="string">'index_topNav'</span>);</span><br><span class="line"><span class="keyword">if</span> (!topNav) &#123;</span><br><span class="line">  topNav = <span class="keyword">await</span> <span class="keyword">this</span>.ctx.model.Nav.find(&#123;</span><br><span class="line">    <span class="string">"position"</span>: <span class="number">1</span></span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">await</span> <span class="keyword">this</span>.ctx.service.cache.set(<span class="string">'index_topNav'</span>, topNav, <span class="number">60</span> * <span class="number">60</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> egg-企业级框架和应用入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> egg-企业级框架和应用入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>13 表单校验机制</title>
      <link href="/2019/06/02/egg-%E4%BC%81%E4%B8%9A%E7%BA%A7%E6%A1%86%E6%9E%B6%E5%92%8C%E5%BA%94%E7%94%A8%E5%85%A5%E9%97%A8/13%20%E8%A1%A8%E5%8D%95%E6%A0%A1%E9%AA%8C%E6%9C%BA%E5%88%B6/"/>
      <url>/2019/06/02/egg-%E4%BC%81%E4%B8%9A%E7%BA%A7%E6%A1%86%E6%9E%B6%E5%92%8C%E5%BA%94%E7%94%A8%E5%85%A5%E9%97%A8/13%20%E8%A1%A8%E5%8D%95%E6%A0%A1%E9%AA%8C%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<blockquote><p>npm egg-validate-plus –save</p></blockquote><h3 id="13-1-开启插件"><a href="#13-1-开启插件" class="headerlink" title="13.1 开启插件"></a><a href="https://github.com/temool/egg-validate-plus#%E5%BC%80%E5%90%AF%E6%8F%92%E4%BB%B6" target="_blank" rel="noopener"></a>13.1 开启插件</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// config/plugin.&#123;env&#125;.js</span><br><span class="line">exports.validatePlus = &#123;</span><br><span class="line">  enable: true,</span><br><span class="line">  package: 'egg-validate-plus',</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="13-2-配置插件"><a href="#13-2-配置插件" class="headerlink" title="13.2 配置插件"></a><a href="https://github.com/temool/egg-validate-plus#%E9%85%8D%E7%BD%AE%E6%8F%92%E4%BB%B6" target="_blank" rel="noopener"></a>13.2 配置插件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// config/config.&#123;env&#125;.js</span></span><br><span class="line"></span><br><span class="line">config.validatePlus = &#123;</span><br><span class="line"></span><br><span class="line">  resolveError(ctx, errors) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (errors.length) &#123;</span><br><span class="line"></span><br><span class="line">      ctx.type = <span class="string">'json'</span>;</span><br><span class="line"></span><br><span class="line">      ctx.status = <span class="number">400</span>;</span><br><span class="line"></span><br><span class="line">      ctx.body = &#123;</span><br><span class="line">        code: <span class="number">400</span>,</span><br><span class="line">        error: errors,</span><br><span class="line">        message: <span class="string">'参数错误'</span>,</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><a name="T95zz"></a></p><h3 id="13-3-使用插件"><a href="#13-3-使用插件" class="headerlink" title="13.3 使用插件"></a><a href="https://github.com/temool/egg-validate-plus#%E4%BD%BF%E7%94%A8%E6%8F%92%E4%BB%B6" target="_blank" rel="noopener"></a>13.3 使用插件</h3><p><a name="9VIBt"></a></p><h4 id="13-3-1-传入字符串"><a href="#13-3-1-传入字符串" class="headerlink" title="13.3.1 传入字符串"></a><a href="https://github.com/temool/egg-validate-plus#1%E4%BC%A0%E5%85%A5%E5%AD%97%E7%AC%A6%E4%B8%B2" target="_blank" rel="noopener"></a>13.3.1 传入字符串</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app/controller/xx.js</span></span><br><span class="line"><span class="keyword">const</span> &#123; query &#125; = <span class="keyword">this</span>.ctx.request;</span><br></pre></td></tr></table></figure><blockquote><p>拿到验证结果</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> validateResult = <span class="keyword">await</span> <span class="keyword">this</span>.ctx.validate(<span class="string">'user.login'</span>, query)</span><br></pre></td></tr></table></figure><blockquote><p>验证不通过时，阻止后面的代码执行</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!validateResult) <span class="keyword">return</span></span><br></pre></td></tr></table></figure><br>> 注意：不要带上 rules<p><a name="4gg0X"></a></p><h4 id="13-3-2-直接传入验证规则对象"><a href="#13-3-2-直接传入验证规则对象" class="headerlink" title="13.3.2 直接传入验证规则对象"></a><a href="https://github.com/temool/egg-validate-plus#2%E7%9B%B4%E6%8E%A5%E4%BC%A0%E5%85%A5%E9%AA%8C%E8%AF%81%E8%A7%84%E5%88%99%E5%AF%B9%E8%B1%A1" target="_blank" rel="noopener"></a>13.3.2 直接传入验证规则对象</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app/controller/xx.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接引入 rules 文件下的验证规则，也可以是自己写的验证规则对象</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rule = <span class="keyword">this</span>.app.rules.user.login</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数据格式</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// const rule = &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//   id: [</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//     &#123; required: true &#125;,</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//     &#123; type: 'number', message: 'id 必须为数字 &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//   ],</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//   password: [</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//     &#123; required: true &#125;,</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//     &#123; type: 'string', message: 'password 必须为字符串 &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//   ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 从客户端传入的参数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; query &#125; = <span class="keyword">this</span>.ctx.request;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数据格式：</span></span><br><span class="line"><span class="comment">// query = &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//   username: 123456,</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//   password: 'abcdefg'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 拿到验证结果</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> validateResult = <span class="keyword">await</span> <span class="keyword">this</span>.ctx.validate(rule, query)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 验证不通过时，阻止后面的代码执行</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!validateResult) <span class="keyword">return</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> egg-企业级框架和应用入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> egg-企业级框架和应用入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>12 egg-swagger2</title>
      <link href="/2019/06/02/egg-%E4%BC%81%E4%B8%9A%E7%BA%A7%E6%A1%86%E6%9E%B6%E5%92%8C%E5%BA%94%E7%94%A8%E5%85%A5%E9%97%A8/12%20egg-swagger2/"/>
      <url>/2019/06/02/egg-%E4%BC%81%E4%B8%9A%E7%BA%A7%E6%A1%86%E6%9E%B6%E5%92%8C%E5%BA%94%E7%94%A8%E5%85%A5%E9%97%A8/12%20egg-swagger2/</url>
      
        <content type="html"><![CDATA[<h3 id="12-1-运营场景"><a href="#12-1-运营场景" class="headerlink" title="12.1 运营场景"></a>12.1 运营场景</h3><p>作为后台,例如有人需要后台提供文档….人家java都有swagger,egg在 egg-swagger2 支持下，我们也可以使用。</p><h3 id="12-2-安装"><a href="#12-2-安装" class="headerlink" title="12.2 安装"></a>12.2 安装</h3><blockquote><p>npm i egg-swagger2 -S</p></blockquote><h3 id="12-3-开启插件"><a href="#12-3-开启插件" class="headerlink" title="12.3 开启插件"></a>12.3 开启插件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// config/plugin.js</span></span><br><span class="line">exports.swagger2 = &#123;</span><br><span class="line">  enable: <span class="literal">true</span>,</span><br><span class="line">  package: <span class="string">'egg-swagger2'</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="12-4-插件配置"><a href="#12-4-插件配置" class="headerlink" title="12.4 插件配置"></a>12.4 插件配置</h3><p>config.default.js 中配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">config.swagger2 = &#123;</span><br><span class="line">   enable: <span class="literal">true</span>, <span class="comment">// 禁用swagger , 默认为true</span></span><br><span class="line">   base: &#123;</span><br><span class="line">     <span class="comment">/* default config,support cover</span></span><br><span class="line"><span class="comment">     schemes: [</span></span><br><span class="line"><span class="comment">         'http',</span></span><br><span class="line"><span class="comment">     ],</span></span><br><span class="line"><span class="comment">     host: '127.0.0.1:7001',</span></span><br><span class="line"><span class="comment">     basePath: '/',</span></span><br><span class="line"><span class="comment">     consumes: [</span></span><br><span class="line"><span class="comment">     'application/json',</span></span><br><span class="line"><span class="comment">     ],</span></span><br><span class="line"><span class="comment">     produces: [</span></span><br><span class="line"><span class="comment">     'application/json',</span></span><br><span class="line"><span class="comment">     ],</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">     info: &#123;</span><br><span class="line">       description: <span class="string">'文档介绍,</span></span><br><span class="line"><span class="string">       version: '</span><span class="number">1.0</span><span class="number">.0</span><span class="string">',</span></span><br><span class="line"><span class="string">       title: '</span>文档名称<span class="string">',</span></span><br><span class="line"><span class="string">       contact: &#123;</span></span><br><span class="line"><span class="string">         email: '</span>caandoll@aliyun.com<span class="string">',</span></span><br><span class="line"><span class="string">       &#125;,</span></span><br><span class="line"><span class="string">       license: &#123;</span></span><br><span class="line"><span class="string">         name: '</span>Apache <span class="number">2.0</span><span class="string">',</span></span><br><span class="line"><span class="string">         url: '</span>http:<span class="comment">//www.apache.org/licenses/LICENSE-2.0.html',</span></span><br><span class="line">       &#125;,</span><br><span class="line">     &#125;,</span><br><span class="line">     tags: [&#123;</span><br><span class="line">         name: <span class="string">'admin'</span>,</span><br><span class="line">         description: <span class="string">'Admin desc'</span>,</span><br><span class="line">       &#125;,</span><br><span class="line">       &#123;</span><br><span class="line">         name: <span class="string">'role'</span>,</span><br><span class="line">         description: <span class="string">'Role desc'</span>,</span><br><span class="line">       &#125;,</span><br><span class="line">     ],</span><br><span class="line">     definitions: &#123;</span><br><span class="line">       <span class="comment">// model definitions</span></span><br><span class="line">     &#125;,</span><br><span class="line">     securityDefinitions: &#123;</span><br><span class="line">       <span class="comment">// security definitions</span></span><br><span class="line">     &#125;</span><br><span class="line">   &#125;,</span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure><p><a name="KfZ8e"></a></p><h3 id="12-4-例子"><a href="#12-4-例子" class="headerlink" title="12.4 例子"></a>12.4 例子</h3><p>在  /app/router.js文件中<br><a name="uZ8eN"></a></p><h4 id="12-4-1-post请求"><a href="#12-4-1-post请求" class="headerlink" title="12.4.1 post请求"></a>12.4.1 post请求</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">app</span> =&gt;</span> &#123;</span><br><span class="line">   <span class="keyword">const</span> &#123; router, controller, swagger &#125; = app;</span><br><span class="line">   router.post(<span class="string">'/login'</span>, controller.test.postLogin);</span><br><span class="line">   swagger.post(<span class="string">'/login'</span>, &#123;</span><br><span class="line">       tags: [</span><br><span class="line">         <span class="string">'admin'</span>,</span><br><span class="line">       ],</span><br><span class="line">       summary: <span class="string">'Login a admin'</span>,</span><br><span class="line">       description: <span class="string">''</span>,</span><br><span class="line">       parameters: [</span><br><span class="line">         &#123;</span><br><span class="line">           <span class="keyword">in</span>: <span class="string">'body'</span>,</span><br><span class="line">           name: <span class="string">'body'</span>,</span><br><span class="line">           description: <span class="string">'admin\'s username &amp; password'</span>,</span><br><span class="line">           required: <span class="literal">true</span>,</span><br><span class="line">           schema: &#123;</span><br><span class="line">             type: <span class="string">'object'</span>,</span><br><span class="line">             required: [ <span class="string">'username'</span>, <span class="string">'password'</span> ],</span><br><span class="line">             properties: &#123;</span><br><span class="line">               username: &#123;</span><br><span class="line">                 type: <span class="string">'string'</span>,</span><br><span class="line">                 description: <span class="string">'admin\'s username'</span>,</span><br><span class="line">               &#125;,</span><br><span class="line">               password: &#123;</span><br><span class="line">                 type: <span class="string">'string'</span>,</span><br><span class="line">                 description: <span class="string">'admin\'s password'</span>,</span><br><span class="line">               &#125;,</span><br><span class="line">             &#125;,</span><br><span class="line">           &#125;,</span><br><span class="line">         &#125;,</span><br><span class="line">       ],</span><br><span class="line">       responses: &#123;</span><br><span class="line">         <span class="number">200</span>: &#123;</span><br><span class="line">           description: <span class="string">'SUCCEED'</span>,</span><br><span class="line">           schema: &#123;</span><br><span class="line">             type: <span class="string">'object'</span>,</span><br><span class="line">             properties: &#123;</span><br><span class="line">               status: &#123;</span><br><span class="line">                 type: <span class="string">'string'</span>,</span><br><span class="line">                 description: <span class="string">'status'</span>,</span><br><span class="line">               &#125;,</span><br><span class="line">               data: &#123;</span><br><span class="line">                 type: <span class="string">'object'</span>,</span><br><span class="line">                 description: <span class="string">'data'</span>,</span><br><span class="line">                 properties: &#123;</span><br><span class="line">                   token: &#123;</span><br><span class="line">                     type: <span class="string">'string'</span>,</span><br><span class="line">                     description: <span class="string">'token'</span>,</span><br><span class="line">                   &#125;,</span><br><span class="line">                 &#125;,</span><br><span class="line">               &#125;,</span><br><span class="line">             &#125;,</span><br><span class="line">           &#125;,</span><br><span class="line">         &#125;,</span><br><span class="line">       &#125;,</span><br><span class="line">     &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="7CN29"></a></p><h4 id="12-4-2-get请求"><a href="#12-4-2-get请求" class="headerlink" title="12.4.2 get请求"></a>12.4.2 get请求</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">app</span> =&gt;</span> &#123;</span><br><span class="line">   <span class="keyword">const</span> &#123; router, controller, swagger &#125; = app;</span><br><span class="line">   router.get(<span class="string">'/roles'</span>, controller.test.getRoles);</span><br><span class="line">   swagger.get(<span class="string">'/roles'</span>, &#123;</span><br><span class="line">     tags: [<span class="string">'role'</span>,],</span><br><span class="line">     summary: <span class="string">'search role by page'</span>,</span><br><span class="line">     description: <span class="string">''</span>,</span><br><span class="line">     parameters: [&#123;</span><br><span class="line">       <span class="keyword">in</span>: <span class="string">'query'</span>,</span><br><span class="line">       name: <span class="string">'name'</span>,</span><br><span class="line">       description: <span class="string">'role\'s name'</span>,</span><br><span class="line">     &#125;,</span><br><span class="line">                  &#123;</span><br><span class="line">                    <span class="keyword">in</span>: <span class="string">'query'</span>,</span><br><span class="line">                    name: <span class="string">'pageIndex'</span>,</span><br><span class="line">                    description: <span class="string">'pageIndex'</span>,</span><br><span class="line">                  &#125;,</span><br><span class="line">                  &#123;</span><br><span class="line">                    <span class="keyword">in</span>: <span class="string">'query'</span>,</span><br><span class="line">                    name: <span class="string">'pageSize'</span>,</span><br><span class="line">                    description: <span class="string">'pageSize'</span>,</span><br><span class="line">                  &#125;,</span><br><span class="line">                 ],</span><br><span class="line">     responses: &#123;</span><br><span class="line">       <span class="number">200</span>: &#123;</span><br><span class="line">         description: <span class="string">'SUCCEED'</span>,</span><br><span class="line">         schema: &#123;</span><br><span class="line">           type: <span class="string">'object'</span>,</span><br><span class="line">           properties: &#123;</span><br><span class="line">             status: &#123;</span><br><span class="line">               type: <span class="string">'string'</span>,</span><br><span class="line">               description: <span class="string">'status'</span>,</span><br><span class="line">             &#125;,</span><br><span class="line">             datas: &#123;</span><br><span class="line">               type: <span class="string">'array'</span>,</span><br><span class="line">               description: <span class="string">'result datas'</span>,</span><br><span class="line">               properties: &#123;</span><br><span class="line">                 token: &#123;</span><br><span class="line">                   type: <span class="string">'string'</span>,</span><br><span class="line">                   description: <span class="string">'token'</span>,</span><br><span class="line">                 &#125;,</span><br><span class="line">               &#125;,</span><br><span class="line">             &#125;,</span><br><span class="line">             pageIndex: &#123;</span><br><span class="line">               type: <span class="string">'number'</span>,</span><br><span class="line">               description: <span class="string">'pageIndex'</span>,</span><br><span class="line">             &#125;,</span><br><span class="line">             pageSize: &#123;</span><br><span class="line">               type: <span class="string">'number'</span>,</span><br><span class="line">               description: <span class="string">'pageSize'</span>,</span><br><span class="line">             &#125;,</span><br><span class="line">             totalCount: &#123;</span><br><span class="line">               type: <span class="string">'number'</span>,</span><br><span class="line">               description: <span class="string">'totalCount'</span>,</span><br><span class="line">             &#125;,</span><br><span class="line">           &#125;,</span><br><span class="line">         &#125;,</span><br><span class="line">       &#125;,</span><br><span class="line">     &#125;,</span><br><span class="line">   &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="kLlul"></a></p><h4 id="12-4-3-swagger的使用"><a href="#12-4-3-swagger的使用" class="headerlink" title="12.4.3 swagger的使用"></a>12.4.3 swagger的使用</h4><blockquote><p>npm run dev   跑起来</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1556177097079-8b5f1bd3-0a96-4f8b-9501-4e8e26bff0a3.png#align=left&display=inline&height=57&name=image.png&originHeight=116&originWidth=1506&size=97669&status=done&width=746" alt="image.png"></p><blockquote><p>获取swgger地址 输入浏览器</p></blockquote><blockquote><p>你看到就是文档了</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1556177075826-0099e04f-9791-4449-ac74-1e4a035fde27.png#align=left&display=inline&height=337&name=image.png&originHeight=1300&originWidth=2878&size=161008&status=done&width=746" alt="image.png"></p><blockquote><p>点击try it out</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1556177147187-e83c3408-38ae-4507-945b-92ccfc8ac031.png#align=left&display=inline&height=253&name=image.png&originHeight=942&originWidth=2776&size=119431&status=done&width=746" alt="image.png"></p><blockquote><p>输入你传的值,然后点击Execute</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1556177241221-56d453ed-13e0-434d-a0ef-c547ddaf3a25.png#align=left&display=inline&height=251&name=image.png&originHeight=930&originWidth=2764&size=99436&status=done&width=746" alt="image.png"></p><blockquote><p>结果</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1556177347444-b29b2f31-3dc2-4a1d-9ec1-6e55cafd6544.png#align=left&display=inline&height=260&name=image.png&originHeight=1000&originWidth=2864&size=176157&status=done&width=746" alt="image.png"></p><blockquote><p>你就可以获取到接口传递过来的值,效果类似postman,但是清晰程度比postman好</p></blockquote><p><a name="p0Bhc"></a></p><h3 id="12-5-常见问题"><a href="#12-5-常见问题" class="headerlink" title="12.5 常见问题"></a>12.5 常见问题</h3><p>一般情况下都不会有问题，但是如果你这时候巧妙的用了egg-static,那么你就会报错了<br>经过排查，你就会发现</p><blockquote><p>/node_modules/egg-swagger2/app.js</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1559286239507-15f599a8-e5fc-4252-8deb-77d4fa83ee90.png#align=left&display=inline&height=234&name=image.png&originHeight=468&originWidth=1190&size=124954&status=done&width=595" alt="image.png"></p><p>它会是一个数组，然后报错必须是个字符串,然后你懂得..你给他做成一个字符串即可</p>]]></content>
      
      
      <categories>
          
          <category> egg-企业级框架和应用入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> egg-企业级框架和应用入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>11 引入静态文件</title>
      <link href="/2019/06/02/egg-%E4%BC%81%E4%B8%9A%E7%BA%A7%E6%A1%86%E6%9E%B6%E5%92%8C%E5%BA%94%E7%94%A8%E5%85%A5%E9%97%A8/11%20%E5%BC%95%E5%85%A5%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6/"/>
      <url>/2019/06/02/egg-%E4%BC%81%E4%B8%9A%E7%BA%A7%E6%A1%86%E6%9E%B6%E5%92%8C%E5%BA%94%E7%94%A8%E5%85%A5%E9%97%A8/11%20%E5%BC%95%E5%85%A5%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h3 id="11-1-经过测试插件设置"><a href="#11-1-经过测试插件设置" class="headerlink" title="11.1 经过测试插件设置"></a>11.1 经过测试插件设置</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">exports.ejs = &#123;</span><br><span class="line">  enable: <span class="literal">true</span>,</span><br><span class="line">  package: <span class="string">'egg-view-ejs'</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="11-2-配置设置"><a href="#11-2-配置设置" class="headerlink" title="11.2 配置设置"></a>11.2 配置设置</h3><blockquote><p>a：静态文件</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">config.static = &#123;</span><br><span class="line"></span><br><span class="line">      prefix: <span class="string">'/'</span>,</span><br><span class="line"></span><br><span class="line">      dir: path.join(appInfo.baseDir, <span class="string">'app/public/'</span>)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><a id="more"></a><blockquote><p>当然此时你会遇到一个问题，你想要多个文件该如何事好</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">config.static = &#123;</span><br><span class="line">   prefix: <span class="string">'/'</span>,</span><br><span class="line">   dir: [ path.join(appInfo.baseDir, <span class="string">'app/view/'</span>),</span><br><span class="line">     path.join(appInfo.baseDir, <span class="string">'app/public/uploads/'</span>),</span><br><span class="line">     path.join(appInfo.baseDir, <span class="string">'app/public/swagger/'</span>) ],</span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure><p> b：模板设置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">config.view = &#123;</span><br><span class="line">  defaultExt: <span class="string">'.html'</span>,</span><br><span class="line">  mapping: &#123;</span><br><span class="line">    <span class="string">'.ejs'</span>: <span class="string">'ejs'</span>,</span><br><span class="line">    <span class="string">'.html'</span>: <span class="string">'ejs'</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="NW3xl"></a></p><h3 id="11-3-路由控制器设置"><a href="#11-3-路由控制器设置" class="headerlink" title="11.3 路由控制器设置"></a>11.3 路由控制器设置</h3><p>//将 index.html 放在app/view里，静态文件放在public里</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; ctx &#125; = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// render user.html</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">yield</span> ctx.render(<span class="string">'index'</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> egg-企业级框架和应用入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> egg-企业级框架和应用入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>10 阿里监控</title>
      <link href="/2019/06/02/egg-%E4%BC%81%E4%B8%9A%E7%BA%A7%E6%A1%86%E6%9E%B6%E5%92%8C%E5%BA%94%E7%94%A8%E5%85%A5%E9%97%A8/10%20%E9%98%BF%E9%87%8C%E7%9B%91%E6%8E%A7/"/>
      <url>/2019/06/02/egg-%E4%BC%81%E4%B8%9A%E7%BA%A7%E6%A1%86%E6%9E%B6%E5%92%8C%E5%BA%94%E7%94%A8%E5%85%A5%E9%97%A8/10%20%E9%98%BF%E9%87%8C%E7%9B%91%E6%8E%A7/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Node.js 性能平台（alinode）</p></blockquote><p>是面向所有 Node.js 应用提供 <code>性能监控、安全提醒、故障排查、性能优化</code> 等服务的整体性解决方案，提供完善的工具链和服务，协助开发者快速发现和定位线上问题。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i nodeinstall -g</span><br></pre></td></tr></table></figure><p>提供了egg-alinode  来快速接入，无需安装 <code>agenthub</code> 等额外的常驻服务。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i egg-alinode --save</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /config/plugin.js</span></span><br><span class="line"></span><br><span class="line">exports.alinode = &#123;</span><br><span class="line">    enable:<span class="literal">true</span>,</span><br><span class="line">    package:<span class="string">'egg-alinode'</span>,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><a id="more"></a><p>申请一下服务</p><h5 id="访问控制台"><a href="#访问控制台" class="headerlink" title="访问控制台"></a>访问控制台</h5><blockquote><p>控制台地址：<a href="https://node.console.aliyun.com/" target="_blank" rel="noopener">https://node.console.aliyun.com</a></p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1553698871810-715d4bae-e635-4e69-a0f6-110a6571e8fe.png#align=left&display=inline&height=514&name=image.png&originHeight=1028&originWidth=2102&size=99621&status=done&width=1051" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1553698894627-178f1f9c-ae3c-4ada-98a0-0ddb129b16e2.png#align=left&display=inline&height=512&name=image.png&originHeight=1024&originWidth=2092&size=111859&status=done&width=1046" alt="image.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// config/config.default.js</span></span><br><span class="line">exports.alinode = &#123;</span><br><span class="line">  enable: <span class="literal">true</span>,</span><br><span class="line">  appid: <span class="string">'***'</span>,  <span class="comment">// Node.js 性能平台给您的项目生成的 appid</span></span><br><span class="line">  secret: <span class="string">'***'</span>,  <span class="comment">// Node.js 性能平台给您的项目生成的 secret</span></span><br><span class="line">  logdir: <span class="string">'***'</span>,  <span class="comment">//可选，Node.js 性能平台日志输出地址绝对路径，与 NODE_LOG_DIR 保持一致。如：/tmp/，也可以不写</span></span><br><span class="line">  error_log: [</span><br><span class="line">    <span class="comment">// '您的应用在业务层面产生的异常日志的路径，数组，可选，可配置多个',</span></span><br><span class="line">    <span class="comment">// '例如：/root/.logs/error.#YYYY#-#MM#-#DD#.log',</span></span><br><span class="line">    <span class="comment">// '不更改 Egg 默认日志输出路径可不配置本项目',</span></span><br><span class="line">  ],<span class="comment">// 可选</span></span><br><span class="line">  agentidMode:<span class="string">'IP'</span>,  <span class="comment">// 可选，如果设置，则在实例ID中添加部分IP信息，用于多个实例 hostname 相同的场景（以容器为主）</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>然后你就能愉快针对你的egg，进行监控了</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1553697448697-8c6f1393-68d3-4629-b2f3-63ebe66d11ce.png#align=left&display=inline&height=227&name=image.png&originHeight=454&originWidth=2192&size=89567&status=done&width=1096" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> egg-企业级框架和应用入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> egg-企业级框架和应用入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>9 部署</title>
      <link href="/2019/06/02/egg-%E4%BC%81%E4%B8%9A%E7%BA%A7%E6%A1%86%E6%9E%B6%E5%92%8C%E5%BA%94%E7%94%A8%E5%85%A5%E9%97%A8/9%20%E9%83%A8%E7%BD%B2/"/>
      <url>/2019/06/02/egg-%E4%BC%81%E4%B8%9A%E7%BA%A7%E6%A1%86%E6%9E%B6%E5%92%8C%E5%BA%94%E7%94%A8%E5%85%A5%E9%97%A8/9%20%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<h3 id="9-1-部署服务器"><a href="#9-1-部署服务器" class="headerlink" title="9.1 部署服务器"></a>9.1 部署服务器</h3><blockquote><p>首先当然是在你的服务器上部署好node服务,然后安装好。</p></blockquote><p>服务器需要预装 Node.js，框架支持的 Node 版本为 &gt;= 8.0.0。<br>框架内置了 egg-cluster 来启动 Master 进程，Master 有足够的稳定性，不再需要使用 pm2 等进程守护模块。<br>同时，框架也提供了 egg-scripts 来支持线上环境的运行和停止。</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">egg-scripts start --port=7001 --daemon --title=egg-server-showcase</span><br></pre></td></tr></table></figure><ul><li><code>--port=7001</code> 端口号，默认会读取环境变量 <code>process.env.PORT</code>，如未传递将使用框架内置端口 <code>7001</code>。</li><li><code>--daemon</code> 是否允许在后台模式，无需 <code>nohup</code>。若使用 Docker 建议直接前台运行。</li><li><code>--env=prod</code> 框架运行环境，默认会读取环境变量 <code>process.env.EGG_SERVER_ENV</code>， 如未传递将使用框架内置环境 <code>prod</code>。</li><li><code>--workers=2</code> 框架 worker 线程数，默认会创建和 CPU 核数相当的 app worker 数，可以充分的利用 CPU 资源。</li><li><code>--title=egg-server-showcase</code> 用于方便 ps 进程时 grep 用，默认为 <code>egg-server-${appname}</code>。</li><li><code>--framework=yadan</code> 如果应用使用了可以配置 <code>package.json</code> 的 <code>egg.framework</code> 或指定该参数。</li><li><code>--ignore-stderr</code> 忽略启动期的报错。</li></ul><h4 id="9-1-1-启动配置项"><a href="#9-1-1-启动配置项" class="headerlink" title="9.1.1 启动配置项"></a>9.1.1 启动配置项</h4><p>你也可以在 <code>config.{env}.js</code> 中配置指定启动配置。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// config/config.default.js</span></span><br><span class="line"></span><br><span class="line">exports.cluster = &#123;</span><br><span class="line">  listen: &#123;</span><br><span class="line">    port: <span class="number">7001</span>,</span><br><span class="line">    hostname: <span class="string">'127.0.0.1'</span>,</span><br><span class="line">    <span class="comment">// path: '/var/run/egg.sock',</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>path</code>，<code>port</code>，<code>hostname</code> 均为 server.listen 的参数，<code>egg-scripts</code> 和 <code>egg.startCluster</code> 方法传入的 port 优先级高于此配置。<br>s<a name="bfda3fed"></a></p><h4 id="9-1-2-停止命令"><a href="#9-1-2-停止命令" class="headerlink" title="9.1.2 停止命令"></a><a href="https://eggjs.org/zh-cn/core/deployment.html#%E5%81%9C%E6%AD%A2%E5%91%BD%E4%BB%A4" target="_blank" rel="noopener"></a>9.1.2 停止命令</h4><p>该命令将杀死 master 进程，并通知 worker 和 agent 优雅退出。<br>支持以下参数：</p><ul><li><code>--title=egg-server</code> 用于杀死指定的 egg 应用，未传递则会终止所有的 Egg 应用。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;start&quot;: &quot;egg-scripts start --daemon --title=$&#123;进程名称&#125;&quot;,</span><br><span class="line">&quot;stop&quot;: &quot;egg-scripts stop --title=$&#123;进程名称&#125;&quot;</span><br></pre></td></tr></table></figure><ul><li>你也可以直接通过 </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -eo &quot;pid,command&quot; | grep -- &quot;--title=egg-server&quot;</span><br></pre></td></tr></table></figure><p> 来找到 master 进程，并 <code>kill</code> 掉，无需 <code>kill -9</code>。</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1553697448697-8c6f1393-68d3-4629-b2f3-63ebe66d11ce.png#align=left&display=inline&height=227&name=image.png&originHeight=454&originWidth=2192&size=89567&status=done&width=1096" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> egg-企业级框架和应用入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> egg-企业级框架和应用入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8 定时任务&amp;amp;定点任务</title>
      <link href="/2019/06/01/egg-%E4%BC%81%E4%B8%9A%E7%BA%A7%E6%A1%86%E6%9E%B6%E5%92%8C%E5%BA%94%E7%94%A8%E5%85%A5%E9%97%A8/8%20%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1&amp;%E5%AE%9A%E7%82%B9%E4%BB%BB%E5%8A%A1/"/>
      <url>/2019/06/01/egg-%E4%BC%81%E4%B8%9A%E7%BA%A7%E6%A1%86%E6%9E%B6%E5%92%8C%E5%BA%94%E7%94%A8%E5%85%A5%E9%97%A8/8%20%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1&amp;%E5%AE%9A%E7%82%B9%E4%BB%BB%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<p>egg提供了强大的定时任务系统。通过定时任务，可以系统修改服务的缓存数据，以便处理需要定时更新的数据。</p><blockquote><p>在app/schedule目录下新建一个js文件，每一个js文件就是一个定时任务</p></blockquote><a id="more"></a><h3 id="8-1-定时任务"><a href="#8-1-定时任务" class="headerlink" title="8.1 定时任务"></a>8.1 定时任务</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app/schedule</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  schedule: &#123;</span><br><span class="line">    interval: <span class="string">'1m'</span>, <span class="comment">// 1 分钟间隔</span></span><br><span class="line">    type: <span class="string">'all'</span>, <span class="comment">// 指定所有的 worker 都需要执行</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">async</span> task(ctx) &#123;</span><br><span class="line">    i++</span><br><span class="line">    <span class="built_in">console</span>.log(i)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 注释:</span></span><br><span class="line"><span class="comment">1ms -&gt; 1毫秒</span></span><br><span class="line"><span class="comment">1s -&gt; 1秒</span></span><br><span class="line"><span class="comment">1m -&gt; 1分钟</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="8-2-定点任务"><a href="#8-2-定点任务" class="headerlink" title="8.2 定点任务"></a>8.2 定点任务</h3><blockquote><p>定点任务（以每周一的5点30分0秒更新排行榜为例）</p></blockquote><p><br>1、使用cron参数设定时间，cron参数分为6个部分，*表示所有都满足</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">*    *    *    *    *    *</span><br><span class="line">┬    ┬    ┬    ┬    ┬    ┬</span><br><span class="line">│    │    │    │    │    |</span><br><span class="line">│    │    │    │    │    └ 星期 (0 - 7) (0或7都是星期日)</span><br><span class="line">│    │    │    │    └───── 月份 (1 - 12)</span><br><span class="line">│    │    │    └────────── 日期 (1 - 31)</span><br><span class="line">│    │    └─────────────── 小时 (0 - 23)</span><br><span class="line">│    └──────────────────── 分钟 (0 - 59)</span><br><span class="line">└───────────────────────── 秒 (0 - 59, optional)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app/schedule</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  schedule: &#123;</span><br><span class="line">    cron: <span class="string">'0 30 5 * * 1'</span>, <span class="comment">//每周一的5点30分0秒更新</span></span><br><span class="line">    type: <span class="string">'all'</span>, <span class="comment">// 指定所有的 worker 都需要执行</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">async</span> task(ctx) &#123;</span><br><span class="line">    i++</span><br><span class="line">    <span class="built_in">console</span>.log(i)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="8-3-只执行一次定时任务"><a href="#8-3-只执行一次定时任务" class="headerlink" title="8.3 只执行一次定时任务"></a>8.3 只执行一次定时任务</h3><blockquote><p>设置immediate参数为true时，该定时任务会在项目启动时，立即执行一次定时任务</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  schedule: &#123;</span><br><span class="line">    interval: <span class="string">'1m'</span>, <span class="comment">// 1 分钟间隔</span></span><br><span class="line">    type: <span class="string">'all'</span>, <span class="comment">// 指定所有的 worker 都需要执行</span></span><br><span class="line">    immediate: <span class="literal">true</span>, <span class="comment">//项目启动就执行一次定时任务</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">async</span> task(ctx) &#123;</span><br><span class="line">    i++</span><br><span class="line">    <span class="built_in">console</span>.log(i)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><a name="881aa06e"></a></p><h3 id="8-4-关闭任务"><a href="#8-4-关闭任务" class="headerlink" title="8.4 关闭任务"></a>8.4 关闭任务</h3><blockquote><p>配置disable参数为true时，该定时任务即关闭</p></blockquote><p><a name="f2eb6a31"></a></p><h3 id="8-5-指定定时任务执行环境env"><a href="#8-5-指定定时任务执行环境env" class="headerlink" title="8.5 指定定时任务执行环境env"></a>8.5 指定定时任务执行环境env</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">env: [<span class="string">"dev"</span>, <span class="string">"debug"</span>] <span class="comment">//该定时任务在开发环境和debug模式下才执行</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> egg-企业级框架和应用入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> egg-企业级框架和应用入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7 Session的使用</title>
      <link href="/2019/06/01/egg-%E4%BC%81%E4%B8%9A%E7%BA%A7%E6%A1%86%E6%9E%B6%E5%92%8C%E5%BA%94%E7%94%A8%E5%85%A5%E9%97%A8/7%20Session%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/06/01/egg-%E4%BC%81%E4%B8%9A%E7%BA%A7%E6%A1%86%E6%9E%B6%E5%92%8C%E5%BA%94%E7%94%A8%E5%85%A5%E9%97%A8/7%20Session%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="7-1-Session-简单介绍"><a href="#7-1-Session-简单介绍" class="headerlink" title="7.1 Session 简单介绍"></a>7.1 Session 简单介绍</h3><p>session 是另一种记录客户状态的机制，不同的是 Cookie 保存在客户端浏览器中，而session 保存在服务器上。<br></p><p><a name="c48ea833"></a></p><h3 id="7-2-Session-的工作流程"><a href="#7-2-Session-的工作流程" class="headerlink" title="7.2 Session 的工作流程"></a>7.2 Session 的工作流程</h3><p>当浏览器访问服务器并发送第一次请求时，服务器端会创建一个 session 对象，生成一个类似于 key,value 的键值对， 然后将 key(cookie)返回到浏览器(客户)端，浏览器下次再访问时，携带 key(cookie)，找到对应的 session(value)。</p><p><a name="f6c72f68"></a></p><h3 id="7-3-Egg-js-中-session-的使用"><a href="#7-3-Egg-js-中-session-的使用" class="headerlink" title="7.3 Egg.js 中 session 的使用"></a>7.3 Egg.js 中 session 的使用</h3><p>egg.js 中 session 基于 egg-session 内置了对 session 的操作<br></p><p><a name="19d42806"></a></p><h4 id="7-3-1-设置"><a href="#7-3-1-设置" class="headerlink" title="7.3.1 设置"></a>7.3.1 设置</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.ctx.session.userinfo=&#123;</span><br><span class="line">name:<span class="string">'张三'</span>, </span><br><span class="line">  age:<span class="string">'20'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="04e49ebc"></a></p><h4 id="7-3-2-获取"><a href="#7-3-2-获取" class="headerlink" title="7.3.2 获取"></a>7.3.2 获取</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> userinfo=<span class="keyword">this</span>.ctx.session</span><br></pre></td></tr></table></figure><p><a name="23e6b3cc"></a></p><h4 id="7-3-3-Session-的默认设置"><a href="#7-3-3-Session-的默认设置" class="headerlink" title="7.3.3 Session 的默认设置"></a>7.3.3 Session 的默认设置</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">exports.session = &#123;</span><br><span class="line">  key: <span class="string">'EGG_SESS'</span>,</span><br><span class="line">  maxAge: <span class="number">24</span> * <span class="number">3600</span> * <span class="number">1000</span>, <span class="comment">// 1 day httpOnly: true,</span></span><br><span class="line">  encrypt: <span class="literal">true</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><a name="1bc23133"></a></p><h3 id="7-4-Session-在-config-default-js-中的配置"><a href="#7-4-Session-在-config-default-js-中的配置" class="headerlink" title="7.4 Session 在 config.default.js 中的配置"></a>7.4 Session 在 config.default.js 中的配置</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">config.session=&#123;</span><br><span class="line">  key:<span class="string">'SESSION_ID'</span>,</span><br><span class="line">  maxAge:<span class="number">864000</span>,</span><br><span class="line">  renew: <span class="literal">true</span> <span class="comment">//延长会话有效期</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="b5b6978f"></a></p><h3 id="7-5-cookie-和session-区别"><a href="#7-5-cookie-和session-区别" class="headerlink" title="7.5 cookie 和session 区别"></a>7.5 cookie 和session 区别</h3><ul><li>cookie 数据存放在客户的浏览器上，session 数据放在服务器上。</li><li>cookie 相比 session 没有 session 安全，别人可以分析存放在本地的 COOKIE 并进行 COOKIE欺骗。</li><li>session 会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能考虑到减轻服务器性能方面，应当使用 COOKIE。</li><li>单个 cookie 保存的数据不能超过 4K，很多浏览器都限制一个站点最多保存 20 个 cookie。</li></ul>]]></content>
      
      
      <categories>
          
          <category> egg-企业级框架和应用入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> egg-企业级框架和应用入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6 Cookie 的使用</title>
      <link href="/2019/06/01/egg-%E4%BC%81%E4%B8%9A%E7%BA%A7%E6%A1%86%E6%9E%B6%E5%92%8C%E5%BA%94%E7%94%A8%E5%85%A5%E9%97%A8/6%20Cookie%20%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/06/01/egg-%E4%BC%81%E4%B8%9A%E7%BA%A7%E6%A1%86%E6%9E%B6%E5%92%8C%E5%BA%94%E7%94%A8%E5%85%A5%E9%97%A8/6%20Cookie%20%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="6-Cookie-的使用"><a href="#6-Cookie-的使用" class="headerlink" title="6 Cookie 的使用"></a>6 Cookie 的使用</h1><p><a name="8e2bda97"></a></p><h3 id="6-1-Cookie-简介"><a href="#6-1-Cookie-简介" class="headerlink" title="6.1 Cookie 简介"></a>6.1 Cookie 简介</h3><ul><li>cookie 是存储于访问者的计算机中的变量。可以让我们用同一个浏览器访问同一个域名的时候共享数据。</li><li>HTTP 是无状态协议。简单地说，当你浏览了一个页面，然后转到同一个网站的另一个页面，服务器无法认识到这是同一个浏览器在访问同一个网站。每一次的访问，都是没有任何关系的。</li></ul><p><a name="e8c79d52"></a></p><h3 id="6-2-Cookie-的设置和获取"><a href="#6-2-Cookie-的设置和获取" class="headerlink" title="6.2 Cookie 的设置和获取"></a>6.2 Cookie 的设置和获取</h3><p><a name="3a998b31"></a></p><h4 id="6-2-1-Cookie-设置语法"><a href="#6-2-1-Cookie-设置语法" class="headerlink" title="6.2.1 Cookie 设置语法"></a>6.2.1 Cookie 设置语法</h4><blockquote><p>ctx.cookies.set(key, value, options)</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.ctx.cookies.set(<span class="string">'name'</span>,<span class="string">'zhangsan'</span>);</span><br></pre></td></tr></table></figure><p><a name="4fe3e7c9"></a></p><h4 id="6-2-2-Cookie-获取语法"><a href="#6-2-2-Cookie-获取语法" class="headerlink" title="6.2.2 Cookie 获取语法"></a>6.2.2 Cookie 获取语法</h4><blockquote><p>ctx.cookies.get(key, options)</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.ctx.cookies.get(<span class="string">'name'</span>)</span><br></pre></td></tr></table></figure><p><a name="fc196a74"></a></p><h4 id="6-2-3-清除-Cookie"><a href="#6-2-3-清除-Cookie" class="headerlink" title="6.2.3 清除 Cookie"></a>6.2.3 清除 Cookie</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.ctx.cookies.set(<span class="string">'name'</span>,<span class="literal">null</span>);</span><br></pre></td></tr></table></figure><p>或者设置 maxAge 过期时间为 0</p><p><a name="1f376170"></a></p><h3 id="6-3-Cookie-参数-options"><a href="#6-3-Cookie-参数-options" class="headerlink" title="6.3 Cookie 参数 options"></a>6.3 Cookie 参数 options</h3><blockquote><p> <a href="https://eggjs.org/en/core/cookie-and-session.html#container" target="_blank" rel="noopener">https://eggjs.org/en/core/cookie-and-session.html#container</a></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ctx.cookies.set(key, value, &#123;</span><br><span class="line">  maxAge:<span class="number">24</span> * <span class="number">3600</span> * <span class="number">1000</span>,</span><br><span class="line">  httpOnly: <span class="literal">true</span>, <span class="comment">// 默认情况下是正确的</span></span><br><span class="line">  encrypt: <span class="literal">true</span>, <span class="comment">// cookie在网络传输期间加密</span></span><br><span class="line">  ctx.cookies.get(<span class="string">'frontend-cookie'</span>, &#123;</span><br><span class="line">  encrypt: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><a name="d41d8cd9"></a></p><p>###<br><a name="95f56a9e"></a></p><h3 id="6-4-设置中文-Cookie"><a href="#6-4-设置中文-Cookie" class="headerlink" title="6.4 设置中文 Cookie"></a>6.4 设置中文 Cookie</h3><p><a name="04aae555"></a></p><h4 id="6-4-1-第一种解决方案"><a href="#6-4-1-第一种解决方案" class="headerlink" title="6.4.1 第一种解决方案"></a>6.4.1 第一种解决方案</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> Buffer(<span class="string">'hello, world!'</span>).toString(<span class="string">'base64'</span>));</span><br><span class="line"><span class="comment">// 转换成 base64字符串：aGVsbG8sIHdvcmxkIQ==</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> Buffer(<span class="string">'aGVsbG8sIHdvcmxkIQ=='</span>, <span class="string">'base64'</span>).toString()); <span class="comment">// 还原 base64字符串：hello, world!</span></span><br></pre></td></tr></table></figure><p><a name="06fdf631"></a></p><h4 id="6-4-2-第二种解决方案"><a href="#6-4-2-第二种解决方案" class="headerlink" title="6.4.2 第二种解决方案"></a>6.4.2 第二种解决方案</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ctx.cookies.set(key, value, &#123;</span><br><span class="line">maxAge:<span class="number">24</span> * <span class="number">3600</span> * <span class="number">1000</span>,</span><br><span class="line">httpOnly: <span class="literal">true</span>, <span class="comment">// 默认情况下是正确的</span></span><br><span class="line">encrypt: <span class="literal">true</span>, <span class="comment">// cookie在网络传输期间进行加密</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> egg-企业级框架和应用入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> egg-企业级框架和应用入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5 mysql数据库</title>
      <link href="/2019/06/01/egg-%E4%BC%81%E4%B8%9A%E7%BA%A7%E6%A1%86%E6%9E%B6%E5%92%8C%E5%BA%94%E7%94%A8%E5%85%A5%E9%97%A8/5%20mysql%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2019/06/01/egg-%E4%BC%81%E4%B8%9A%E7%BA%A7%E6%A1%86%E6%9E%B6%E5%92%8C%E5%BA%94%E7%94%A8%E5%85%A5%E9%97%A8/5%20mysql%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h1 id="5-mysql数据库"><a href="#5-mysql数据库" class="headerlink" title="5 mysql数据库"></a>5 mysql数据库</h1><p>框架提供了 egg-mysql 插件来访问 MySQL 数据库。这个插件既可以访问普通的 MySQL 数据库，也可以访问基于 MySQL 协议的在线数据库服务。<br></p><p><a name="41f4681f"></a></p><h3 id="5-1-安装与配置"><a href="#5-1-安装与配置" class="headerlink" title="5.1 安装与配置"></a><a href="https://eggjs.org/zh-cn/tutorials/mysql.html#%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE" target="_blank" rel="noopener"></a>5.1 安装与配置</h3><p>安装对应的插件 egg-mysql :</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i --save egg-mysql</span><br></pre></td></tr></table></figure><p>开启插件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// config/plugin.js</span></span><br><span class="line">exports.mysql = &#123;</span><br><span class="line">  enable: <span class="literal">true</span>,</span><br><span class="line">  package: <span class="string">'egg-mysql'</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在 <code>config/config.${env}.js</code> 配置各个环境的数据库连接信息。</p><p><a name="b76e9b5d"></a></p><h4 id="5-1-1-单数据源"><a href="#5-1-1-单数据源" class="headerlink" title="5.1.1 单数据源"></a><a href="https://eggjs.org/zh-cn/tutorials/mysql.html#%E5%8D%95%E6%95%B0%E6%8D%AE%E6%BA%90" target="_blank" rel="noopener"></a>5.1.1 单数据源</h4><p>如果我们的应用只需要访问一个 MySQL 数据库实例，可以如下配置：<br>使用方式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// config/config.$&#123;env&#125;.js</span></span><br><span class="line">exports.mysql = &#123;</span><br><span class="line">  <span class="comment">// 单数据库信息配置</span></span><br><span class="line">  client: &#123;</span><br><span class="line">    <span class="comment">// host</span></span><br><span class="line">    host: <span class="string">'mysql.com'</span>,</span><br><span class="line">    <span class="comment">// 端口号</span></span><br><span class="line">    port: <span class="string">'3306'</span>,</span><br><span class="line">    <span class="comment">// 用户名</span></span><br><span class="line">    user: <span class="string">'test_user'</span>,</span><br><span class="line">    <span class="comment">// 密码</span></span><br><span class="line">    password: <span class="string">'test_password'</span>,</span><br><span class="line">    <span class="comment">// 数据库名</span></span><br><span class="line">    database: <span class="string">'test'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 是否加载到 app 上，默认开启</span></span><br><span class="line">  app: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// 是否加载到 agent 上，默认关闭</span></span><br><span class="line">  agent: <span class="literal">false</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">await</span> app.mysql.query(sql, values); <span class="comment">// 单实例可以直接通过 app.mysql 访问</span></span><br></pre></td></tr></table></figure><p><a name="f0cdea86"></a></p><h4 id="5-1-2-多数据源"><a href="#5-1-2-多数据源" class="headerlink" title="5.1.2 多数据源"></a><a href="https://eggjs.org/zh-cn/tutorials/mysql.html#%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90" target="_blank" rel="noopener"></a>5.1.2 多数据源</h4><p>如果我们的应用需要访问多个 MySQL 数据源，可以按照如下配置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">exports.mysql = &#123;</span><br><span class="line">  clients: &#123;</span><br><span class="line">    <span class="comment">// clientId, 获取client实例，需要通过 app.mysql.get('clientId') 获取</span></span><br><span class="line">    db1: &#123;</span><br><span class="line">      <span class="comment">// host</span></span><br><span class="line">      host: <span class="string">'mysql.com'</span>,</span><br><span class="line">      <span class="comment">// 端口号</span></span><br><span class="line">      port: <span class="string">'3306'</span>,</span><br><span class="line">      <span class="comment">// 用户名</span></span><br><span class="line">      user: <span class="string">'test_user'</span>,</span><br><span class="line">      <span class="comment">// 密码</span></span><br><span class="line">      password: <span class="string">'test_password'</span>,</span><br><span class="line">      <span class="comment">// 数据库名</span></span><br><span class="line">      database: <span class="string">'test'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    db2: &#123;</span><br><span class="line">      <span class="comment">// host</span></span><br><span class="line">      host: <span class="string">'mysql2.com'</span>,</span><br><span class="line">      <span class="comment">// 端口号</span></span><br><span class="line">      port: <span class="string">'3307'</span>,</span><br><span class="line">      <span class="comment">// 用户名</span></span><br><span class="line">      user: <span class="string">'test_user'</span>,</span><br><span class="line">      <span class="comment">// 密码</span></span><br><span class="line">      password: <span class="string">'test_password'</span>,</span><br><span class="line">      <span class="comment">// 数据库名</span></span><br><span class="line">      database: <span class="string">'test'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 所有数据库配置的默认值</span></span><br><span class="line">  <span class="keyword">default</span>: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 是否加载到 app 上，默认开启</span></span><br><span class="line">  app: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// 是否加载到 agent 上，默认关闭</span></span><br><span class="line">  agent: <span class="literal">false</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><a name="0c420b74"></a></p><h3 id="5-2-封装增删改查"><a href="#5-2-封装增删改查" class="headerlink" title="5.2 封装增删改查"></a>5.2 封装增删改查</h3><p><a name="a70fb78d"></a></p><h4 id="5-2-1、插入，向users表内插入一条数据"><a href="#5-2-1、插入，向users表内插入一条数据" class="headerlink" title="5.2.1、插入，向users表内插入一条数据"></a>5.2.1、插入，向users表内插入一条数据</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> result = <span class="keyword">await</span> <span class="keyword">this</span>.app.mysql.insert(<span class="string">'users'</span>, &#123;</span><br><span class="line">    name: <span class="string">'wjw'</span>,</span><br><span class="line">    age: <span class="number">18</span></span><br><span class="line">  &#125;)</span><br><span class="line"><span class="comment">// 判断：result.affectedRows === 1</span></span><br></pre></td></tr></table></figure><p><a name="8aec9d6f"></a></p><h4 id="5-2-2、查询，查询users表name-Jack的数据"><a href="#5-2-2、查询，查询users表name-Jack的数据" class="headerlink" title="5.2.2、查询，查询users表name=Jack的数据"></a>5.2.2、查询，查询users表name=Jack的数据</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> result = <span class="keyword">await</span> <span class="keyword">this</span>.app.mysql.select(<span class="string">'users'</span>, &#123;</span><br><span class="line">    columns: [<span class="string">'id'</span>, <span class="string">'name'</span>], <span class="comment">//查询字段，全部查询则不写，相当于查询*</span></span><br><span class="line">    where: &#123;</span><br><span class="line">        name: <span class="string">'wjw'</span></span><br><span class="line">    &#125;, <span class="comment">//查询条件</span></span><br><span class="line">    orders: [</span><br><span class="line">        [<span class="string">'id'</span>, <span class="string">'desc'</span>] <span class="comment">//降序desc，升序asc</span></span><br><span class="line">    ],</span><br><span class="line">    limit: <span class="number">10</span>, <span class="comment">//查询条数</span></span><br><span class="line">    offset: <span class="number">0</span> <span class="comment">//数据偏移量（分页查询使用）</span></span><br><span class="line">  &#125;)</span><br><span class="line"><span class="comment">//判断：result.length &gt; 0</span></span><br></pre></td></tr></table></figure><p><a name="b83f1814"></a></p><h4 id="5-2-3、修改，修改users表id-1的数据age为20"><a href="#5-2-3、修改，修改users表id-1的数据age为20" class="headerlink" title="5.2.3、修改，修改users表id=1的数据age为20"></a>5.2.3、修改，修改users表id=1的数据age为20</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> result = <span class="keyword">await</span> <span class="keyword">this</span>.app.mysql.update(<span class="string">'users'</span>, &#123;</span><br><span class="line">      age: <span class="number">20</span> <span class="comment">//需要修改的数据</span></span><br><span class="line">  &#125;, &#123;</span><br><span class="line">      where: &#123;</span><br><span class="line">        id: <span class="number">1</span></span><br><span class="line">      &#125; <span class="comment">//修改查询条件</span></span><br><span class="line">  &#125;);</span><br><span class="line"><span class="comment">//判断：result.affectedRows === 1</span></span><br></pre></td></tr></table></figure><p><a name="9a47efed"></a></p><h4 id="5-2-4、删除，删除users表name-wjw的数据"><a href="#5-2-4、删除，删除users表name-wjw的数据" class="headerlink" title="5.2.4、删除，删除users表name=wjw的数据"></a>5.2.4、删除，删除users表name=wjw的数据</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> result = <span class="keyword">await</span> <span class="keyword">this</span>.app.mysql.delete(<span class="string">'users'</span>, &#123;</span><br><span class="line">    name: <span class="string">'wjw'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> egg-企业级框架和应用入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> egg-企业级框架和应用入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4 get、post请求</title>
      <link href="/2019/06/01/egg-%E4%BC%81%E4%B8%9A%E7%BA%A7%E6%A1%86%E6%9E%B6%E5%92%8C%E5%BA%94%E7%94%A8%E5%85%A5%E9%97%A8/4%20get%E3%80%81post%E8%AF%B7%E6%B1%82/"/>
      <url>/2019/06/01/egg-%E4%BC%81%E4%B8%9A%E7%BA%A7%E6%A1%86%E6%9E%B6%E5%92%8C%E5%BA%94%E7%94%A8%E5%85%A5%E9%97%A8/4%20get%E3%80%81post%E8%AF%B7%E6%B1%82/</url>
      
        <content type="html"><![CDATA[<h3 id="4-1-get-请求"><a href="#4-1-get-请求" class="headerlink" title="4.1 get 请求"></a>4.1 get 请求</h3><h4 id="4-1-1-query"><a href="#4-1-1-query" class="headerlink" title="4.1.1 query"></a>4.1.1 query</h4><p>在 URL 中 <code>?</code>后面的部分是一个 Query String，这一部分经常用于 GET 类型的请求中传递参数。例如 <code>GET /search?name=egg&amp;age=26</code>中 <code>name=egg&amp;age=26</code> 就是用户传递过来的参数。我们可以通过 <code>context.query</code>(为一个对象)拿到解析过后的这个参数体</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">app</span> =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomeController</span> <span class="keyword">extends</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line">  <span class="keyword">async</span> getQuery() &#123;</span><br><span class="line">      <span class="keyword">const</span> queryObj = <span class="keyword">this</span>.ctx.query;</span><br><span class="line">      <span class="built_in">console</span>.log(queryObj.age);</span><br><span class="line">      <span class="built_in">console</span>.log(queryObj);</span><br><span class="line">      <span class="comment">//打印结果：&#123; name: 'egg', age: '26' &#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> SearchController;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><br>当 Query String 中的 key 重复时，<code>context.query</code>只取 key 第一次出现时的值，后面再出现的都会被忽略。<code>GET /posts?category=egg&amp;category=koa</code> 通过 <code>context.query</code>拿到的值是 <code>{ category: &#39;egg&#39; }</code>。<a name="c1fd7d6c"></a></p><h4 id="4-1-2-queries"><a href="#4-1-2-queries" class="headerlink" title="4.1.2   queries"></a>4.1.2   queries</h4><p>有时候我们的系统会设计成让用户传递相同的 key，例如 <code>GET /posts?category=egg&amp;id=1&amp;id=2&amp;id=3</code>。针对此类情况，框架提供了 <code>context.queries</code> 对象，这个对象也解析了 Query String，但是它不会丢弃任何一个重复的数据，而是将他们都放到一个<code>数组</code>中：<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// GET /posts?category=egg&amp;id=1&amp;id=2&amp;id=3</span></span><br><span class="line"><span class="keyword">const</span> Controller = <span class="built_in">require</span>(<span class="string">'egg'</span>).Controller;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomeController</span> <span class="keyword">extends</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line">  <span class="keyword">async</span> getQueries() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.ctx.queries);</span><br><span class="line">    <span class="comment">//result:</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//   category: [ 'egg' ],</span></span><br><span class="line">    <span class="comment">//   id: [ '1', '2', '3' ],</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>context.queries</code>上所有的 key 如果有值，也一定会是<code>数组</code>类型。</p><p><a name="0031db38"></a></p><h3 id="4-2-post-请求"><a href="#4-2-post-请求" class="headerlink" title="4.2 post 请求"></a>4.2 post 请求</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取参数方法 post 请求</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">app</span> =&gt;</span> &#123;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomeController</span> <span class="keyword">extends</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line">  <span class="keyword">async</span> postObj() &#123;</span><br><span class="line">      <span class="keyword">const</span> queryObj = ctx.request.body;</span><br><span class="line">      ctx.body = queryObj;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> SearchController;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><blockquote><p>但是我们请求有时是get,有时是post,有时本来应该是post的请求,但是为了测试方便,还是做成get和post请求都支持的请求,于是一个能同时获取get和post请求参数的中间件就很有必要了.</p></blockquote><p><a name="8c221a17"></a></p><h3 id="4-3-编写中间层解决get、post请求"><a href="#4-3-编写中间层解决get、post请求" class="headerlink" title="4.3 编写中间层解决get、post请求"></a>4.3 编写中间层解决get、post请求</h3><p><a name="2b154e51"></a></p><h4 id="4-3-1-在app目录下新建middleware文件夹"><a href="#4-3-1-在app目录下新建middleware文件夹" class="headerlink" title="4.3.1 在app目录下新建middleware文件夹"></a>4.3.1 在app目录下新建middleware文件夹</h4><p><a name="71a0e970"></a></p><h4 id="4-3-2-在middleware里面新建params-js-内容如下"><a href="#4-3-2-在middleware里面新建params-js-内容如下" class="headerlink" title="4.3.2 在middleware里面新建params.js,内容如下"></a>4.3.2 在middleware里面新建params.js,内容如下</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取请求参数中间件</span></span><br><span class="line"><span class="comment"> * 可以使用ctx.params获取get或post请求参数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">options</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">params</span>(<span class="params">ctx, next</span>) </span>&#123;</span><br><span class="line">    ctx.params = &#123;</span><br><span class="line">      ...ctx.query,</span><br><span class="line">      ...ctx.request.body</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">await</span> next();</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>本质上就是把get请求的参数和post请求的参数都放到params这个对象里,所以,不管是get还是post都能获取到请求参数</p><p><a name="c127c48b"></a></p><h4 id="4-3-3-在-config-config-default-js里注入中间件"><a href="#4-3-3-在-config-config-default-js里注入中间件" class="headerlink" title="4.3.3 在/config/config.default.js里注入中间件"></a>4.3.3 在/config/config.default.js里注入中间件</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">appInfo</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> config = exports = &#123;&#125;;</span><br><span class="line"><span class="comment">// 注入中间件</span></span><br><span class="line">  config.middleware = [</span><br><span class="line">    <span class="string">'params'</span>,</span><br><span class="line">  ];</span><br><span class="line">  <span class="keyword">return</span> config;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><a name="cf8dc011"></a></p><h4 id="4-3-4-使用文章获取"><a href="#4-3-4-使用文章获取" class="headerlink" title="4.3.4 使用文章获取"></a>4.3.4 使用文章获取</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加文章接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="keyword">const</span> Service = <span class="built_in">require</span>(<span class="string">'egg'</span>).Service;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArticleService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line">  <span class="keyword">async</span> add() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; ctx &#125; = <span class="keyword">this</span>;</span><br><span class="line">    <span class="comment">// 获取请求参数</span></span><br><span class="line">    <span class="keyword">const</span> &#123;</span><br><span class="line">      userId,</span><br><span class="line">      title,</span><br><span class="line">      content,</span><br><span class="line">    &#125; = ctx.params;</span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">await</span> ctx.model.Article.create(&#123;</span><br><span class="line">      userId,</span><br><span class="line">      title,</span><br><span class="line">      content,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = ArticleService;</span><br></pre></td></tr></table></figure><p><a name="1a577bcd"></a></p><h3 id="4-3-允许post请求跨域"><a href="#4-3-允许post请求跨域" class="headerlink" title="4.3 允许post请求跨域"></a>4.3 允许post请求跨域</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// config/plugin.js</span></span><br><span class="line">exports.cors = &#123;</span><br><span class="line">  enable: <span class="literal">true</span>,</span><br><span class="line">  package: <span class="string">'egg-cors'</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// config/config.default.js</span></span><br><span class="line">config.security = &#123;</span><br><span class="line">  csrf: &#123;</span><br><span class="line">    enable: <span class="literal">false</span>,</span><br><span class="line">    ignoreJSON: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  domainWhiteList: [ <span class="string">'http://www.baidu.com'</span> ], <span class="comment">// 配置白名单</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">config.cors = &#123;</span><br><span class="line">  <span class="comment">// origin: '*',//允许所有跨域访问，注释掉则允许上面 白名单 访问</span></span><br><span class="line">  allowMethods: <span class="string">'GET,HEAD,PUT,POST,DELETE,PATCH'</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>*一般性最好使用白名单，不要使用全部允许跨域，不安全</p>]]></content>
      
      
      <categories>
          
          <category> egg-企业级框架和应用入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> egg-企业级框架和应用入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3 访问路由</title>
      <link href="/2019/06/01/egg-%E4%BC%81%E4%B8%9A%E7%BA%A7%E6%A1%86%E6%9E%B6%E5%92%8C%E5%BA%94%E7%94%A8%E5%85%A5%E9%97%A8/3%20%E8%AE%BF%E9%97%AE%E8%B7%AF%E7%94%B1/"/>
      <url>/2019/06/01/egg-%E4%BC%81%E4%B8%9A%E7%BA%A7%E6%A1%86%E6%9E%B6%E5%92%8C%E5%BA%94%E7%94%A8%E5%85%A5%E9%97%A8/3%20%E8%AE%BF%E9%97%AE%E8%B7%AF%E7%94%B1/</url>
      
        <content type="html"><![CDATA[<p>egg在设计完全符合比较好的mvc的设计模式。<br></p><p><a name="aca7ebb1"></a></p><h3 id="3-1-那么什么是mvc呢"><a href="#3-1-那么什么是mvc呢" class="headerlink" title="3.1 那么什么是mvc呢?"></a>3.1 那么什么是mvc呢?</h3><blockquote><p>全名是Model View Controller，是模型(model)－视图(view)－控制器(controller)的缩写，一种软件设计典范。<br>在egg中视图 (view)、控制器（controller） 和数据模型 Model（Service） 和配置文件（config）</p></blockquote><p><a name="d41d8cd9"></a></p><p>###<br><a name="6c891e5f"></a></p><h3 id="3-2-控制器（controller）"><a href="#3-2-控制器（controller）" class="headerlink" title="3.2 控制器（controller）"></a>3.2 控制器（controller）<br></h3><ul><li><code>app/controller</code> 目录下面实现 Controller</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app/controller/home.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Controller = <span class="built_in">require</span>(<span class="string">'egg'</span>).Controller;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomeController</span> <span class="keyword">extends</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line">  <span class="keyword">async</span> index() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; ctx &#125; = <span class="keyword">this</span>;</span><br><span class="line">    ctx.body = <span class="string">'hi, world'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = HomeController;</span><br></pre></td></tr></table></figure><blockquote><p>输入 npm run dev<br>查看 <a href="http://127.0.0.1:7001/" target="_blank" rel="noopener">http://127.0.0.1:7001</a><br>输出  hi, world</p></blockquote><blockquote><p>我认为控制器就是一个接口，他管理输入和输出</p></blockquote><p>*同样你可以在app/controller 目录下 写很多个这样个js的，来代表接口</p><p><a name="19358b5c"></a></p><h3 id="3-3-路由（Router）"><a href="#3-3-路由（Router）" class="headerlink" title="3.3 路由（Router）"></a>3.3 路由（Router）</h3><p>主要用来描述请求 URL 和具体承担执行动作的 Controller 的对应关系， 框架约定了 <code>app/router.js</code> 文件用于统一所有路由规则。</p><blockquote><p>现在很多单页面，都是存在相对于的路由，你写个js，同样就要写一个路由</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app/controller/user.js</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserController</span> <span class="keyword">extends</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line">  <span class="keyword">async</span> info() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; ctx &#125; = <span class="keyword">this</span>;</span><br><span class="line">    ctx.body = &#123;</span><br><span class="line">      name: <span class="string">`hello <span class="subst">$&#123;ctx.params.id&#125;</span>`</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app/router.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">app</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; router, controller &#125; = app;</span><br><span class="line">  router.get(<span class="string">'/user/:id'</span>, controller.user.info);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><a name="5c5c68e9"></a></p><h3 id="3-4-数据模型-Model（Service）"><a href="#3-4-数据模型-Model（Service）" class="headerlink" title="3.4 数据模型 Model（Service）"></a>3.4 数据模型 Model（Service）</h3><p>简单来说，Service 就是在复杂业务场景下用于做业务逻辑封装的一个抽象层，提供这个抽象有以下几个好处：</p><ul><li>保持 Controller 中的逻辑更加简洁。</li><li>保持业务逻辑的独立性，抽象出来的 Service 可以被多个 Controller 重复调用。</li><li>将逻辑和展现分离，更容易编写测试用例。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app/service/user.js</span></span><br><span class="line"><span class="keyword">const</span> Service = <span class="built_in">require</span>(<span class="string">'egg'</span>).Service;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line">  <span class="keyword">async</span> addName(name) &#123;</span><br><span class="line">    <span class="keyword">const</span> user = <span class="string">`你好,<span class="subst">$&#123;name&#125;</span>`</span>;</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = UserService;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app/controller/user.js</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserController</span> <span class="keyword">extends</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line">  <span class="keyword">async</span> info() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; ctx &#125; = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">const</span> userInfo = <span class="keyword">await</span> ctx.service.user.addName(<span class="string">'wjw'</span>);</span><br><span class="line">    ctx.body = userInfo;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="bdeae77a"></a></p><h3 id="3-5-egg中视图-view"><a href="#3-5-egg中视图-view" class="headerlink" title="3.5 egg中视图 (view)"></a>3.5 egg中视图 (view)</h3><blockquote><p>egg中的模板渲染，但是我认为前端后端分离的设计，更加有利于作为服务型架构设计，所以这边不描述view的构造</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> egg-企业级框架和应用入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> egg-企业级框架和应用入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2 目录结构介绍</title>
      <link href="/2019/06/01/egg-%E4%BC%81%E4%B8%9A%E7%BA%A7%E6%A1%86%E6%9E%B6%E5%92%8C%E5%BA%94%E7%94%A8%E5%85%A5%E9%97%A8/2%20%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84%E4%BB%8B%E7%BB%8D/"/>
      <url>/2019/06/01/egg-%E4%BC%81%E4%B8%9A%E7%BA%A7%E6%A1%86%E6%9E%B6%E5%92%8C%E5%BA%94%E7%94%A8%E5%85%A5%E9%97%A8/2%20%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<h3 id="2-1-目录结构"><a href="#2-1-目录结构" class="headerlink" title="2.1 目录结构"></a>2.1 目录结构</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">egg-project</span><br><span class="line">├── package.json</span><br><span class="line">├── app.js (可选)</span><br><span class="line">├── agent.js (可选)</span><br><span class="line">├── app(项目开发目录)</span><br><span class="line">|   ├── router.js (用于配置 URL 路由规则)</span><br><span class="line">│   ├── controller (用于解析用户的输入，处理后返回相应的结果)</span><br><span class="line">│   |   └── home.js</span><br><span class="line">│   ├── service (用于编写业务逻辑层)</span><br><span class="line">│   |   └── user.js</span><br><span class="line">│   ├── middleware (用于编写中间件)</span><br><span class="line">│   |   └── response_time.js</span><br><span class="line">│   ├── schedule (可选)</span><br><span class="line">│   |   └── my_task.js</span><br><span class="line">│   ├── public (用于放置静态资源)</span><br><span class="line">│   |   └── reset.css</span><br><span class="line">│   ├── view (可选)</span><br><span class="line">│   |   └── home.tpl</span><br><span class="line">│   └── extend (用于框架的扩展)</span><br><span class="line">│       ├── helper.js (可选)</span><br><span class="line">│       ├── request.js (可选)</span><br><span class="line">│       ├── response.js (可选)</span><br><span class="line">│       ├── context.js (可选)</span><br><span class="line">│       ├── application.js (可选)</span><br><span class="line">│       └── agent.js (可选)</span><br><span class="line">├── config (用于编写配置文件)</span><br><span class="line">|   ├── plugin.js(用于配置需要加载的插件)</span><br><span class="line">|   ├── config.default.js</span><br><span class="line">│   ├── config.prod.js</span><br><span class="line">|   ├── config.test.js (可选)</span><br><span class="line">|   ├── config.local.js (可选)</span><br><span class="line">|   └── config.unittest.js (可选)</span><br><span class="line">└── test (用于单元测试)</span><br><span class="line">    ├── middleware</span><br><span class="line">    |   └── response_time.test.js</span><br><span class="line">    └── controller</span><br><span class="line">        └── home.test.js</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1553573209647-1a9949b3-24dd-4c13-832b-4289810a2355.png#align=left&display=inline&height=380&name=image.png&originHeight=759&originWidth=900&size=141205&status=done&width=450" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> egg-企业级框架和应用入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> egg-企业级框架和应用入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1 环境搭建、创建、运行</title>
      <link href="/2019/06/01/egg-%E4%BC%81%E4%B8%9A%E7%BA%A7%E6%A1%86%E6%9E%B6%E5%92%8C%E5%BA%94%E7%94%A8%E5%85%A5%E9%97%A8/1%20%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E3%80%81%E5%88%9B%E5%BB%BA%E3%80%81%E8%BF%90%E8%A1%8C/"/>
      <url>/2019/06/01/egg-%E4%BC%81%E4%B8%9A%E7%BA%A7%E6%A1%86%E6%9E%B6%E5%92%8C%E5%BA%94%E7%94%A8%E5%85%A5%E9%97%A8/1%20%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E3%80%81%E5%88%9B%E5%BB%BA%E3%80%81%E8%BF%90%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<h3 id="1-1-介绍"><a href="#1-1-介绍" class="headerlink" title="1.1 介绍"></a>1.1 介绍</h3><p>egg.js是阿里旗下基于node.js和koa是一个node企业级应用开发框架，可以帮助开发团队，和开发人员减少成本。<br>基于koa2、es6、es7使得node具有更有规范的开发模式，更低的学习成本、更优雅的代码、更少的维护成本。<br><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1553564733278-f808c9af-138e-49e8-8b5c-62a6ff798edc.png#align=left&display=inline&height=318&name=image.png&originHeight=635&originWidth=1142&size=211739&status=done&width=571" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1553564716616-6dc83606-ce82-4596-b4b9-696736897888.png#align=left&display=inline&height=244&name=image.png&originHeight=488&originWidth=1009&size=119926&status=done&width=505" alt="image.png"><br><br><br></p><p><a name="717aefd0"></a></p><h3 id="1-2-环境搭建"><a href="#1-2-环境搭建" class="headerlink" title="1.2 环境搭建"></a>1.2 环境搭建</h3><p>1、要求nodejs版本必须大于8.0并且要用LTS 版本<br>2、创建egg的环境   npm i egg-init -g  / cnpm i egg-init -g        (只需要安装一次)<br>3、创建项目<br>    cd 到目录里面   （注意目录不要用中文  不要有空格）</p><p><a name="38ae35fe"></a></p><h3 id="1-3-创建"><a href="#1-3-创建" class="headerlink" title="1.3 创建"></a>1.3 创建</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ npm i egg-init -g</span><br><span class="line">$ egg-init egg-example --type=simple   //例如:egg-init 项目名称 --type=simple</span><br><span class="line">$ cd egg-example</span><br><span class="line">$ npm i</span><br></pre></td></tr></table></figure><p><a name="d561eef6"></a></p><h3 id="1-4-运行项目"><a href="#1-4-运行项目" class="headerlink" title="1.4 运行项目"></a>1.4 运行项目</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm run dev  </span><br><span class="line">open localhost:7001 //一般性来说默认端口是7001</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> egg-企业级框架和应用入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> egg-企业级框架和应用入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>23 实例属性-$ref</title>
      <link href="/2019/05/18/Vue.js%202.0%20%E6%89%8B%E6%8A%8A%E6%89%8B%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/23%20%E5%AE%9E%E4%BE%8B%E5%B1%9E%E6%80%A7-$ref/"/>
      <url>/2019/05/18/Vue.js%202.0%20%E6%89%8B%E6%8A%8A%E6%89%8B%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/23%20%E5%AE%9E%E4%BE%8B%E5%B1%9E%E6%80%A7-$ref/</url>
      
        <content type="html"><![CDATA[<h2 id="官网针对-ref的解释"><a href="#官网针对-ref的解释" class="headerlink" title="官网针对-ref的解释"></a>官网针对-ref的解释</h2><ul><li><p><strong>预期</strong>：<code>string</code><br><code>ref</code> 被用来给元素或子组件注册引用信息。引用信息将会注册在父组件的 <code>$refs</code> 对象上。如果在普通的 DOM 元素上使用，引用指向的就是 DOM 元素；如果用在子组件上，引用就指向组件实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- `vm.$refs.p` will be the DOM node --&gt;</span><br><span class="line">&lt;p ref=&quot;p&quot;&gt;hello&lt;/p&gt;</span><br><span class="line">&lt;!-- `vm.$refs.child` will be the child component instance --&gt;</span><br><span class="line">&lt;child-component ref=&quot;child&quot;&gt;&lt;/child-component&gt;</span><br></pre></td></tr></table></figure></li><li><p>当 <code>v-for</code> 用于元素或组件的时候，引用信息将是包含 DOM 节点或组件实例的数组。<br>关于 ref 注册时间的重要说明：因为 ref 本身是作为渲染结果被创建的，在初始渲染的时候你不能访问它们 - 它们还不存在！<code>$refs</code> 也不是响应式的，因此你不应该试图用它在模板中做数据绑定。</p></li></ul><p><a name="P2AYt"></a></p><h2 id="操作dom"><a href="#操作dom" class="headerlink" title="操作dom"></a>操作dom</h2><blockquote><p>如果我们用jQuery的话,一般性都可以操作dom</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#id"</span>).text(<span class="string">'xxx'</span>)   <span class="comment">// 使用Jquery</span></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"id"</span>)  <span class="comment">// 使用原生Dom</span></span><br></pre></td></tr></table></figure><p>现在我们牛逼了，我们用vue。那vue中，如果我要获取Dom，该怎么做？<br>这就进入本文的主题ref, $refs，官网解释：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>在JavaScript中我们习惯了使用document.getElementsByTagName</p></blockquote><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  data:&#123;</span><br><span class="line">    msg:<span class="string">'hello'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">document</span>.getElementsByTagName(<span class="string">"div"</span>)[<span class="number">0</span>].innerHTML);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><a name="noZkB"></a></p><h2 id="vue操作dom"><a href="#vue操作dom" class="headerlink" title="vue操作dom"></a>vue操作dom</h2><blockquote><p>那么我们在vue中呢</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">"msg"</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  data:&#123;</span><br><span class="line">    msg:<span class="string">'hello'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    <span class="comment">// console.log(document.getElementsByTagName("div")[0].innerHTML);</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'===================================='</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.$refs.msg);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'===================================='</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue基础入门笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue基础入门笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>22 自定义指令-directives</title>
      <link href="/2019/05/18/Vue.js%202.0%20%E6%89%8B%E6%8A%8A%E6%89%8B%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/22%20%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4-directives/"/>
      <url>/2019/05/18/Vue.js%202.0%20%E6%89%8B%E6%8A%8A%E6%89%8B%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/22%20%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4-directives/</url>
      
        <content type="html"><![CDATA[<p><a name="VpxwT"></a></p><h2 id="15-1-介绍"><a href="#15-1-介绍" class="headerlink" title="15.1 介绍"></a>15.1 介绍</h2><p>Vue 也允许注册自定义指令。注意，在 Vue2.0 中，代码复用和抽象的主要形式是组件。然而，有的情况下，你仍然需要对普通 DOM 元素进行底层操作，这时候就会用到自定义指令。<br><br><br>举一个栗子:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"utf-8"</span> /&gt;</span><br><span class="line">    &lt;title&gt;vue&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">       &lt;div v-color=<span class="string">'flag'</span>&gt;<span class="number">123</span>&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;script src="https:/</span><span class="regexp">/cdn.jsdelivr.net/</span>npm/vue<span class="string">"&gt;&lt;/script&gt; </span></span><br><span class="line"><span class="string">&lt;script&gt;</span></span><br><span class="line"><span class="string">    var vm = new Vue(&#123;</span></span><br><span class="line"><span class="string">        directives:&#123;</span></span><br><span class="line"><span class="string">            color(el,bindings)&#123; //el值指代的是button按钮</span></span><br><span class="line"><span class="string">                console.log(arguments);</span></span><br><span class="line"><span class="string">                el.style.background = bindings.value;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        el: '#app',</span></span><br><span class="line"><span class="string">        data: &#123;</span></span><br><span class="line"><span class="string">            flag: 'red'</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        methods:&#123;</span></span><br><span class="line"><span class="string">            getSomething()&#123;</span></span><br><span class="line"><span class="string">                return "</span>hello<span class="string">"</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;)</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure><p>出现如图情况</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1557979872661-82fbbe5f-21d7-4d27-b776-8e6da08f262e.png#align=left&display=inline&height=68&name=image.png&originHeight=136&originWidth=576&size=3491&status=done&width=288" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1557981369618-255dc6df-0173-436d-8d90-4e3a08c08685.png#align=left&display=inline&height=164&name=image.png&originHeight=328&originWidth=1558&size=102694&status=done&width=779" alt="image.png"></p><blockquote><p>再来个栗子</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>vue<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    .a&#123;</span><br><span class="line">        position: absolute;width: 100px;height: 100px;background: red;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"a"</span> <span class="attr">v-drag</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line">        directives:&#123;</span><br><span class="line">            drag(el)&#123;</span><br><span class="line"><span class="javascript">                el.onmousedown = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">var</span> disx = e.pageX - el.offsetLeft;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">var</span> disy = e.pageY - el.offsetTop;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">document</span>.onmousemove = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                        el.style.left = e.pageX - disx +<span class="string">'px'</span>;</span></span><br><span class="line"><span class="javascript">                        el.style.top = e.pageX - disy + <span class="string">'px'</span>;</span></span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">                    <span class="built_in">document</span>.onmouseup = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">document</span>.onmousemove = <span class="built_in">document</span>.onmousemove = <span class="literal">null</span>;</span></span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    e.preventDefault();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            flag: <span class="string">'red'</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            getSomething()&#123;</span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="string">"hello"</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1557981323722-a124890f-84be-46cd-841c-59bdaeecadf8.png#align=left&display=inline&height=251&name=image.png&originHeight=502&originWidth=1720&size=17097&status=done&width=860" alt="image.png"></p><p>可以拖动</p><p><a name="2MYal"></a></p><h2 id="15-2-钩子函数"><a href="#15-2-钩子函数" class="headerlink" title="15.2 钩子函数"></a>15.2 钩子函数</h2><p>一个指令定义对象可以提供如下几个钩子函数 (均为可选)：<br><code>bind</code>：只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置。</p><p><code>inserted</code>：被绑定元素插入父节点时调用 (仅保证父节点存在，但不一定已被插入文档中)。</p><p><code>update</code>：所在组件的 VNode 更新时调用，但是可能发生在其子 VNode 更新之前。指令的值可能发生了改变，也可能没有。但是你可以通过比较更新前后的值来忽略不必要的模板更新 (详细的钩子函数参数见下)。</p><p><a name="Zd937"></a></p><h2 id="15-3-钩子函数参数"><a href="#15-3-钩子函数参数" class="headerlink" title="15.3 钩子函数参数"></a>15.3 钩子函数参数</h2><ul><li><code>el</code>：指令所绑定的元素，可以用来直接操作 DOM 。</li><li><code>binding</code>：一个对象，包含以下属性：<ul><li><code>name</code>：指令名，不包括 <code>v-</code> 前缀。</li><li><code>value</code>：指令的绑定值，例如：<code>v-my-directive=&quot;1 + 1&quot;</code> 中，绑定值为 <code>2</code>。</li><li><code>oldValue</code>：指令绑定的前一个值，仅在 <code>update</code> 和 <code>componentUpdated</code> 钩子中可用。无论值是否改变都可用。</li><li><code>expression</code>：字符串形式的指令表达式。例如 <code>v-my-directive=&quot;1 + 1&quot;</code>中，表达式为 <code>&quot;1 + 1&quot;</code>。</li><li><code>arg</code>：传给指令的参数，可选。例如 <code>v-my-directive:foo</code> 中，参数为 <code>&quot;foo&quot;</code>。</li><li><code>modifiers</code>：一个包含修饰符的对象。例如：<code>v-my-directive.foo.bar</code> 中，修饰符对象为 <code>{ foo: true, bar: true }</code>。</li></ul></li><li><code>oldVnode</code>：上一个虚拟节点，仅在 <code>update</code> 和 <code>componentUpdated</code> 钩子中可用。</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1557981403487-88a67750-c0c9-41d7-9112-d52bdc8b3534.png#align=left&display=inline&height=142&originHeight=310&originWidth=1632&status=done&width=746" alt></p>]]></content>
      
      
      <categories>
          
          <category> Vue基础入门笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue基础入门笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>21 内置组件-动画(transition)</title>
      <link href="/2019/05/18/Vue.js%202.0%20%E6%89%8B%E6%8A%8A%E6%89%8B%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/21%20%E5%86%85%E7%BD%AE%E7%BB%84%E4%BB%B6-%E5%8A%A8%E7%94%BB(transition)/"/>
      <url>/2019/05/18/Vue.js%202.0%20%E6%89%8B%E6%8A%8A%E6%89%8B%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/21%20%E5%86%85%E7%BD%AE%E7%BB%84%E4%BB%B6-%E5%8A%A8%E7%94%BB(transition)/</url>
      
        <content type="html"><![CDATA[<h2 id="1-组件的过渡"><a href="#1-组件的过渡" class="headerlink" title="1 组件的过渡"></a>1 组件的过渡</h2><p>Vue 提供了 <code>transition</code> 的封装组件，在下列情形中，可以给任何元素和组件添加进入/离开过渡</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1557903741434-1d5cce33-0862-4832-b272-67d9825bfe7e.png#align=left&display=inline&height=249&name=image.png&originHeight=498&originWidth=1162&size=45263&status=done&width=581" alt="image.png"></p><p>在进入/离开的过渡中，会有 6 个 class 切换。</p><ol><li><code>v-enter</code>：定义进入过渡的开始状态。在元素被插入之前生效，在元素被插入之后的下一帧移除。<br></li><li><code>v-enter-active</code>：定义进入过渡生效时的状态。在整个进入过渡的阶段中应用，在元素被插入之前生效，在过渡/动画完成之后移除。这个类可以被用来定义进入过渡的过程时间，延迟和曲线函数。<br></li><li><code>v-enter-to</code>: <strong>2.1.8版及以上</strong> 定义进入过渡的结束状态。在元素被插入之后下一帧生效 (与此同时 <code>v-enter</code> 被移除)，在过渡/动画完成之后移除。<br></li><li><code>v-leave</code>: 定义离开过渡的开始状态。在离开过渡被触发时立刻生效，下一帧被移除。<br></li><li><code>v-leave-active</code>：定义离开过渡生效时的状态。在整个离开过渡的阶段中应用，在离开过渡被触发时立刻生效，在过渡/动画完成之后移除。这个类可以被用来定义离开过渡的过程时间，延迟和曲线函数。<br></li><li><code>v-leave-to</code>: <strong>2.1.8版及以上</strong> 定义离开过渡的结束状态。在离开过渡被触发之后下一帧生效 (与此同时 <code>v-leave</code> 被删除)，在过渡/动画完成之后移除。<br><br><a name="QYFv7"></a><h3 id="1-1-初步代码实现"><a href="#1-1-初步代码实现" class="headerlink" title="1.1 初步代码实现"></a>1.1 初步代码实现</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>vue<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    div&gt;div&#123;</span><br><span class="line">        width:100px;height: 100px;background: red;</span><br><span class="line">    &#125;</span><br><span class="line">    .v-enter&#123;</span><br><span class="line">        opacity: 1;</span><br><span class="line">    &#125;</span><br><span class="line">    /* 激活的时候 */</span><br><span class="line">    .v-enter-avtive&#123;</span><br><span class="line">        opacity: 0;</span><br><span class="line">        transition: 1s linear;</span><br><span class="line">    &#125;</span><br><span class="line">    /* 离开 */</span><br><span class="line">    .v-leave-active&#123;</span><br><span class="line">        opacity: 0;</span><br><span class="line">        background: black;</span><br><span class="line">        transition: 1s linear;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"flag=!flag"</span>&gt;</span>切换<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- vue自定义的组件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transition</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">"flag"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el:<span class="string">'#app'</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line"><span class="javascript">            flag:<span class="literal">true</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p><a name="OEs6Z"></a></p><h3 id="1-2-多个transition"><a href="#1-2-多个transition" class="headerlink" title="1.2 多个transition"></a>1.2 多个transition</h3><blockquote><p>遇上了多个transition的时候，同一个class肯定是会冲突的，那么如何处理呢</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>vue<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    div&gt;div&#123;</span><br><span class="line">        width:100px;height: 100px;background: red;</span><br><span class="line">    &#125;</span><br><span class="line">    .jw-enter-active &#123;</span><br><span class="line">        transition: all .3s ease;</span><br><span class="line">    &#125;</span><br><span class="line">    .jw-leave-active &#123;</span><br><span class="line">        transition: all .8s cubic-bezier(1.0, 0.5, 0.8, 1.0);</span><br><span class="line">    &#125;</span><br><span class="line">    .jw-enter, .jw-leave-to</span><br><span class="line">    &#123;</span><br><span class="line">        transform: translateX(10px);</span><br><span class="line">        opacity: 0;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"flag=!flag"</span>&gt;</span>切换<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- vue自定义的组件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">"jw"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">"flag"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el:<span class="string">'#app'</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line"><span class="javascript">            flag:<span class="literal">true</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>简单的理解就是就 transition有一个name属性<br>在css中name-状态即可调用</p>]]></content>
      
      
      <categories>
          
          <category> Vue基础入门笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue基础入门笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>20 指令-条件判断(v-if&amp;amp;v-show)</title>
      <link href="/2019/05/18/Vue.js%202.0%20%E6%89%8B%E6%8A%8A%E6%89%8B%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/20%20%E6%8C%87%E4%BB%A4-%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD(v-if&amp;v-show)/"/>
      <url>/2019/05/18/Vue.js%202.0%20%E6%89%8B%E6%8A%8A%E6%89%8B%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/20%20%E6%8C%87%E4%BB%A4-%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD(v-if&amp;v-show)/</url>
      
        <content type="html"><![CDATA[<h2 id="1-v-if-amp-v-show"><a href="#1-v-if-amp-v-show" class="headerlink" title="1 v-if&amp;v-show"></a>1 v-if&amp;v-show</h2><ul><li>条件渲染 (使用 <code>v-if</code>)</li><li>条件展示 (使用 <code>v-show</code>)<blockquote><p>if操作的是dom show 操作的样式<br>如果频繁切换dom使用v-show,当数据一开时就确定下来使用v-if更好一些,如果if通过内部指令不会执行了<br>只有dom从显示到隐藏 或者隐藏到显示 才能使用vue的动画</p></blockquote></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>vue<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">"flag"</span>&gt;</span>你看的见我<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el:<span class="string">'#app'</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line"><span class="javascript">            flag:<span class="literal">true</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a name="TK71d"></a></p><h2 id="2-区别总结"><a href="#2-区别总结" class="headerlink" title="2 区别总结"></a>2 区别总结</h2><ul><li>v-show:操作的是元素的display属性</li><li>v-if:操作的是元素的创建和插入</li><li>相比较而言v-show的性能要高</li></ul>]]></content>
      
      
      <categories>
          
          <category> Vue基础入门笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue基础入门笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>19 生命周期</title>
      <link href="/2019/05/17/Vue.js%202.0%20%E6%89%8B%E6%8A%8A%E6%89%8B%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/19%20%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
      <url>/2019/05/17/Vue.js%202.0%20%E6%89%8B%E6%8A%8A%E6%89%8B%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/19%20%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="1-vue生命周期简介"><a href="#1-vue生命周期简介" class="headerlink" title="1 vue生命周期简介"></a>1 vue生命周期简介</h2><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1557912737077-4012796e-00a5-4d96-838d-94954e03b055.png#align=left&display=inline&height=3039&name=image.png&originHeight=3039&originWidth=1200&size=231327&status=done&width=1200" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1557912885030-af1066b3-7d0f-481f-8a0a-270b843c1c56.png#align=left&display=inline&height=572&name=image.png&originHeight=572&originWidth=847&size=114810&status=done&width=847" alt="image.png"></p><p><a name="e7sAP"></a></p><h2 id="2-生命周期探究"><a href="#2-生命周期探究" class="headerlink" title="2 生命周期探究"></a>2 生命周期探究</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>vue<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            message: <span class="string">"hello is world"</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        beforeCreate() &#123;</span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.group(<span class="string">'beforeCreate 创建前状态===============》'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"el     : "</span> + <span class="keyword">this</span>.$el); <span class="comment">//undefined</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"data   : "</span> + <span class="keyword">this</span>.$data); <span class="comment">//undefined </span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"message: "</span> + <span class="keyword">this</span>.message)</span></span><br><span class="line">        &#125;,</span><br><span class="line">        created() &#123;</span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.group(<span class="string">'created 创建完毕状态===============》'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"el     : "</span> + <span class="keyword">this</span>.$el); <span class="comment">//undefined</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"data   : "</span> + <span class="keyword">this</span>.$data); <span class="comment">//已被初始化 </span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"message: "</span> + <span class="keyword">this</span>.message); <span class="comment">//已被初始化</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        beforeMount() &#123;</span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.group(<span class="string">'beforeMount 挂载前状态===============》'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"el     : "</span> + (<span class="keyword">this</span>.$el)); <span class="comment">//已被初始化</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.$el);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"data   : "</span> + <span class="keyword">this</span>.$data); <span class="comment">//已被初始化  </span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"message: "</span> + <span class="keyword">this</span>.message); <span class="comment">//已被初始化  </span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        mounted() &#123;</span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.group(<span class="string">'mounted 挂载结束状态===============》'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"el     : "</span> + <span class="keyword">this</span>.$el); <span class="comment">//已被初始化</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.$el);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"data   : "</span> + <span class="keyword">this</span>.$data); <span class="comment">//已被初始化</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"message: "</span> + <span class="keyword">this</span>.message); <span class="comment">//已被初始化 </span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        beforeUpdate() &#123;</span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.group(<span class="string">'beforeUpdate 更新前状态===============》'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"el     : "</span> + <span class="keyword">this</span>.$el);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.$el);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"data   : "</span> + <span class="keyword">this</span>.$data);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"message: "</span> + <span class="keyword">this</span>.message);</span></span><br><span class="line">        &#125;,</span><br><span class="line">        updated() &#123;</span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.group(<span class="string">'updated 更新完成状态===============》'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"el     : "</span> + <span class="keyword">this</span>.$el);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.$el);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"data   : "</span> + <span class="keyword">this</span>.$data);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"message: "</span> + <span class="keyword">this</span>.message);</span></span><br><span class="line">        &#125;,</span><br><span class="line">        beforeDestroy() &#123;</span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.group(<span class="string">'beforeDestroy 销毁前状态===============》'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"el     : "</span> + <span class="keyword">this</span>.$el);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.$el);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"data   : "</span> + <span class="keyword">this</span>.$data);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"message: "</span> + <span class="keyword">this</span>.message);</span></span><br><span class="line">        &#125;,</span><br><span class="line">        destroyed() &#123;</span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.group(<span class="string">'destroyed 销毁完成状态===============》'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"el     : "</span> + <span class="keyword">this</span>.$el);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.$el);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"data   : "</span> + <span class="keyword">this</span>.$data);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"message: "</span> + <span class="keyword">this</span>.message)</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>chrome</code>浏览器里打开，<code>F12</code>看<code>console</code>就能发现</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1557913009455-c51e6834-68e4-4768-8309-a136e29115c9.png#align=left&display=inline&height=362&name=image.png&originHeight=724&originWidth=692&size=119369&status=done&width=346" alt="image.png"></p><p><a name="d9QAu"></a></p><h2 id="3-beforecreated"><a href="#3-beforecreated" class="headerlink" title="3 beforecreated"></a>3 beforecreated</h2><blockquote><p>el 和 data 并未初始化 </p></blockquote><p><a name="DzGYw"></a></p><h2 id="4-created"><a href="#4-created" class="headerlink" title="4 created"></a>4 created</h2><blockquote><p>完成了 data 数据的初始化，el没有</p></blockquote><p><a name="4XRPM"></a></p><h2 id="5-beforeMount"><a href="#5-beforeMount" class="headerlink" title="5 beforeMount"></a>5 beforeMount</h2><blockquote><p>完成了 el 和 data 初始化 </p></blockquote><p><a name="h58Fc"></a></p><h2 id="6-mounted"><a href="#6-mounted" class="headerlink" title="6 mounted"></a>6 mounted</h2><blockquote><p>完成挂载</p></blockquote><p><a name="5KQzE"></a></p><h2 id="7-update"><a href="#7-update" class="headerlink" title="7 update"></a>7 update</h2><blockquote><p>在console控制台中输入</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.message= <span class="string">'hello!!'</span>;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1557914168694-ffcc2be9-7429-4c5a-9a32-6dc2f249e81d.png#align=left&display=inline&height=361&name=image.png&originHeight=722&originWidth=1244&size=139400&status=done&width=622" alt="image.png"></p><p><a name="knjMl"></a></p><h2 id="8-destroy"><a href="#8-destroy" class="headerlink" title="8 destroy"></a>8 destroy</h2><p>我们在console里执行下命令对 vue实例进行销毁。销毁完成后，我们再重新改变message的值，vue不再对此动作进行响应了。但是原先生成的dom元素还存在，可以这么理解，执行了destroy操作，后续就不再受vue控制了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.$destroy();</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1557914310529-08d57e9d-238c-4a94-91e4-da8a516e5eb1.png#align=left&display=inline&height=223&name=image.png&originHeight=446&originWidth=1116&size=83553&status=done&width=558" alt="image.png"></p><p><a name="exWch"></a></p><h2 id="9-生命周期总结"><a href="#9-生命周期总结" class="headerlink" title="9 生命周期总结"></a>9 生命周期总结</h2><p><a name="jisnK"></a></p><h3 id="9-1-beforecreate"><a href="#9-1-beforecreate" class="headerlink" title="9.1 beforecreate"></a>9.1 beforecreate</h3><blockquote><p>可以在这加个loading事件,加载的动画</p></blockquote><p><a name="B5ls9"></a></p><h3 id="9-2-created"><a href="#9-2-created" class="headerlink" title="9.2 created"></a>9.2 created</h3><blockquote><p>在这结束loading，还做一些初始化，实现函数自执行</p></blockquote><p><a name="p6WCR"></a></p><h3 id="9-3-mounted"><a href="#9-3-mounted" class="headerlink" title="9.3 mounted"></a>9.3 mounted</h3><blockquote><p>在这发起后端请求，拿回数据，配合路由钩子做一些事情</p></blockquote><p><a name="qcCKY"></a></p><h3 id="9-4-beforeDestroy"><a href="#9-4-beforeDestroy" class="headerlink" title="9.4 beforeDestroy"></a>9.4 beforeDestroy</h3><blockquote><p>你确认删除XX吗？ destroyed ：当前组件已被删除，清空相关内容</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Vue基础入门笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue基础入门笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>18 数据-属性(props)</title>
      <link href="/2019/05/16/Vue.js%202.0%20%E6%89%8B%E6%8A%8A%E6%89%8B%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/18%20%E6%95%B0%E6%8D%AE-%E5%B1%9E%E6%80%A7(props)/"/>
      <url>/2019/05/16/Vue.js%202.0%20%E6%89%8B%E6%8A%8A%E6%89%8B%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/18%20%E6%95%B0%E6%8D%AE-%E5%B1%9E%E6%80%A7(props)/</url>
      
        <content type="html"><![CDATA[<blockquote><p>组件接受的选项之一 props 是 Vue 中非常重要的一个选项。父子组件的关系可以总结为：<br>props down, events up<br>父组件通过 props 向下传递数据给子组件；子组件通过 events 给父组件发送消息。</p></blockquote><h2 id="父子级组件"><a href="#父子级组件" class="headerlink" title="父子级组件"></a>父子级组件</h2><p>比如我们需要创建两个组件 parent 和 child。需要保证每个组件可以在相对隔离的环境中书写，这样也能提高组件的可维护性。<br>这里我们先定义父子两个组件和一个 Vue 对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">var childNode = &#123;</span><br><span class="line">  template: `</span><br><span class="line">        &lt;div&gt;childNode&lt;/div&gt;</span><br><span class="line">        `</span><br><span class="line">&#125;;</span><br><span class="line">var parentNode = &#123;</span><br><span class="line">  template: `</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &lt;child&gt;&lt;/child&gt;</span><br><span class="line">          &lt;child&gt;&lt;/child&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        `,</span><br><span class="line">  components: &#123;</span><br><span class="line">    child: childNode</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &quot;#example&quot;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    parent: parentNode</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"example"</span>&gt;</span><br><span class="line">  &lt;parent&gt;<span class="xml"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>这里的 childNode 定义的 template 是一个 div，并且内容是”childNode”字符串。<br>而在 parentNode 的 template 中定义了 div 的 class 名叫 parent 并且包含了两个 child 组件。</p></blockquote><p><a name="MRoiU"></a></p><h2 id="静态-props"><a href="#静态-props" class="headerlink" title="静态 props"></a>静态 props</h2><blockquote><p>组件实例的作用域是孤立的。这意味着不能（也不应该）在子组件的模板中直接引用父组件的数据。要让子组件使用父组件的数据，需要通过子组件的 props 选项。<br>父组件向子组件传递数据分为两种方式：动态和静态，这里先介绍静态方式。<br>子组件要显示的用 props 声明它期望获得的数据<br>修改上例中的代码，给 childNode 添加一个 props 选项和需要的<code>forChildMsg</code>数据;<br>然后在父组件中的占位符添加特性的方式来传递数据。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> childNode = &#123;</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div&gt;</span></span><br><span class="line"><span class="string">          &#123;&#123;forChildMsg&#125;&#125;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">        `</span>,</span><br><span class="line">  props: [<span class="string">"for-child-msg"</span>] <span class="comment">// 直接把参数作为数组放进去</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> parentNode = &#123;</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div&gt;</span></span><br><span class="line"><span class="string">          &lt;p&gt;parentNode&lt;/p&gt;</span></span><br><span class="line"><span class="string">          &lt;child for-child-msg="aaa"&gt;&lt;/child&gt;</span></span><br><span class="line"><span class="string">          &lt;child for-child-msg="bbb"&gt;&lt;/child&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">        `</span>,</span><br><span class="line">  components: &#123;</span><br><span class="line">    child: childNode</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>命名规范</strong><br>**</p><blockquote><p>对于 props 声明的属性，在父组件的 template 模板中，属性名需要使用中划线写法；<br>子组件 props 属性声明时，使用小驼峰或者中划线写法都可以；而子组件的模板使用从父组件传来的变量时，需要使用对应的小驼峰写法。别担心，Vue 能够正确识别出小驼峰和下划线命名法混用的变量，如这里的<code>forChildMsg</code>和<code>for-child-msg</code>是同一值。</p></blockquote><p><a name="aZ39S"></a></p><h2 id="动态props"><a href="#动态props" class="headerlink" title="动态props"></a>动态props</h2><blockquote><p>原则上很简单，for-child-msg作为一个变量</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> parentNode = &#123;</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div&gt;</span></span><br><span class="line"><span class="string">          &lt;p&gt;parentNode&lt;/p&gt;</span></span><br><span class="line"><span class="string">          &lt;child :for-child-msg="childMsg1"&gt;&lt;/child&gt;</span></span><br><span class="line"><span class="string">          &lt;child :for-child-msg="childMsg2"&gt;&lt;/child&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">        `</span>,</span><br><span class="line">  components: &#123;</span><br><span class="line">    child: childNode</span><br><span class="line">  &#125;,</span><br><span class="line">  data: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      childMsg1: <span class="string">"child-1"</span>,</span><br><span class="line">      childMsg2: <span class="string">"child-2"</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在父组件的 data 的 return 数据中的 childMsg1 和 childMsg2 会被传入子组件中</p><p><a name="KerNh"></a></p><h2 id="props-验证"><a href="#props-验证" class="headerlink" title="props 验证"></a>props 验证</h2><p>验证传入的 props 参数的数据规格，如果不符合数据规格，Vue 会发出警告。</p><blockquote><p>能判断的所有种类（也就是 type 值）有：<br>String, Number, Boolean, Function, Object, Array, Symbol</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">"example"</span>, &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    <span class="comment">// 基础类型检测, null意味着任何类型都行</span></span><br><span class="line">    propA: <span class="built_in">Number</span>,</span><br><span class="line">    <span class="comment">// 多种类型</span></span><br><span class="line">    propB: [<span class="built_in">String</span>, <span class="built_in">Number</span>],</span><br><span class="line">    <span class="comment">// 必传且是String</span></span><br><span class="line">    propC: &#123;</span><br><span class="line">      type: <span class="built_in">String</span>,</span><br><span class="line">      required: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 数字有默认值</span></span><br><span class="line">    propD: &#123;</span><br><span class="line">      type: <span class="built_in">Number</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="number">101</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 数组、默认值是一个工厂函数返回对象</span></span><br><span class="line">    propE: &#123;</span><br><span class="line">      type: <span class="built_in">Object</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"propE default invoked."</span>);</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">message</span>: <span class="string">"I am from propE."</span> &#125;;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 自定义验证函数</span></span><br><span class="line">    propF: &#123;</span><br><span class="line">      isValid: <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value &gt; <span class="number">100</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> childNode = &#123;</span><br><span class="line">  template: <span class="string">"&lt;div&gt;&#123;&#123;forChildMsg&#125;&#125;&lt;/div&gt;"</span>,</span><br><span class="line">  props: &#123;</span><br><span class="line">    <span class="string">"for-child-msg"</span>: <span class="built_in">Number</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> parentNode = &#123;</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">          &lt;div class="parent"&gt;</span></span><br><span class="line"><span class="string">            &lt;child :for-child-msg="msg"&gt;&lt;/child&gt;</span></span><br><span class="line"><span class="string">          &lt;/div&gt;`</span>,</span><br><span class="line">  components: &#123;</span><br><span class="line">    child: childNode</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="comment">// 当这里是字符串 "123456"时会报错</span></span><br><span class="line">      msg: <span class="number">123456</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>还可以在 props 定义的数据中加入自定义验证函数，当函数返回 false 时，输出警告。<br>比如我们把上述例子中的 childNode 的<code>for-child-msg</code>修改成一个对象，并包含一个名叫<code>validator</code>的函数，该命名是规定叫<code>validator</code>的，自定义函数名不会生效</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> childNode = &#123;</span><br><span class="line">  template: <span class="string">"&lt;div&gt;&#123;&#123;forChildMsg&#125;&#125;&lt;/div&gt;"</span>,</span><br><span class="line">  props: &#123;</span><br><span class="line">    <span class="string">"for-child-msg"</span>: &#123;</span><br><span class="line">      validator: <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value &gt; <span class="number">100</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在这里我们给<code>for-child-msg</code>变量设置了<code>validator</code>函数，并且要求传入的值必须大于 100，否则报出警告。</p><p><a name="OSpqQ"></a></p><h2 id="单向数据流"><a href="#单向数据流" class="headerlink" title="单向数据流"></a>单向数据流</h2><p>props 是单向绑定的：当父组件的属性变化时，将传导给子组件，但是不会反过来。这是为了防止子组件五一修改父组件的状态。<br>所以不应该在子组件中修改 props 中的值，Vue 会报出警告。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> childNode = &#123;</span><br><span class="line">  template: <span class="string">`&lt;div class="child"&gt;</span></span><br><span class="line"><span class="string">            &lt;div&gt;</span></span><br><span class="line"><span class="string">              &lt;span&gt;子组件数据&lt;/span&gt;</span></span><br><span class="line"><span class="string">              &lt;input v-model="forChildMsg"/&gt;</span></span><br><span class="line"><span class="string">            &lt;/div&gt;</span></span><br><span class="line"><span class="string">            &lt;p&gt;&#123;&#123;forChildMsg&#125;&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="string">          &lt;/div&gt;`</span>,</span><br><span class="line">  props: &#123;</span><br><span class="line">    <span class="string">"for-child-msg"</span>: <span class="built_in">String</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> parentNode = &#123;</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">          &lt;div class="parent"&gt;</span></span><br><span class="line"><span class="string">            &lt;div&gt;</span></span><br><span class="line"><span class="string">              &lt;span&gt;父组件数据&lt;/span&gt;</span></span><br><span class="line"><span class="string">              &lt;input v-model="msg"/&gt;</span></span><br><span class="line"><span class="string">            &lt;/div&gt;</span></span><br><span class="line"><span class="string">            &lt;p&gt;&#123;&#123;msg&#125;&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="string">            &lt;child :for-child-msg="msg"&gt;&lt;/child&gt;</span></span><br><span class="line"><span class="string">          &lt;/div&gt;`</span>,</span><br><span class="line">  components: &#123;</span><br><span class="line">    child: childNode</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      msg: <span class="string">"default string."</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>传递的过程将短横分割命名，转成驼峰命名法即可</p></blockquote><p>这里我们给父组件和子组件都有一个输入框，并且显示出父组件数据和子组件的数据。当我们在父组件的输入框输入新数据时，同步的子组件数据也被修改了；这就是 props 的向子组件传递数据。而当我们修改子组件的输入框时，浏览器的控制台则报出错误警告</p><blockquote><p>[Vue warn]: Avoid mutating a prop directly since the value will be overwritten whenever the parent component re-renders. Instead, use a data or computed property based on the prop’s value. Prop being mutated: “forChildMsg”</p></blockquote><p><a name="8BXht"></a></p><h2 id="修改-props-数据"><a href="#修改-props-数据" class="headerlink" title="修改 props 数据"></a>修改 props 数据</h2><p>通常有两种原因：</p><ol><li>prop 作为初始值传入后，子组件想把它当做局部数据来用</li><li>prop 作为初始值传入后，由子组件处理成其他数据输出</li></ol><ol><li>定义一个局部变量，并用 prop 的值初始化它</li></ol><p>但是由于定义的 ownChildMsg 只能接受 forChildMsg 的初始值，当父组件要传递的值变化发生时，ownChildMsg 无法收到更新。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> childNode = &#123;</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">          &lt;div class="child"&gt;</span></span><br><span class="line"><span class="string">            &lt;div&gt;</span></span><br><span class="line"><span class="string">              &lt;span&gt;子组件数据&lt;/span&gt;</span></span><br><span class="line"><span class="string">              &lt;input v-model="forChildMsg"/&gt;</span></span><br><span class="line"><span class="string">            &lt;/div&gt;</span></span><br><span class="line"><span class="string">            &lt;p&gt;&#123;&#123;forChildMsg&#125;&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="string">            &lt;p&gt;ownChildMsg : &#123;&#123;ownChildMsg&#125;&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="string">          &lt;/div&gt;`</span>,</span><br><span class="line">  props: &#123;</span><br><span class="line">    <span class="string">"for-child-msg"</span>: <span class="built_in">String</span></span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">ownChildMsg</span>: <span class="keyword">this</span>.forChildMsg &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>这里我们加了一个</p><p>用于查看 ownChildMsg 数据是否变化，结果发现只有默认值传递给了 ownChildMsg，父组件改变只会变化到 forChildMsg，不会修改 ownChildMsg。</p></blockquote><br><ol start="2"><li>定义一个计算属性，处理 prop 的值并返回</li></ol><p>由于是计算属性，所以只能显示值，不能设置值。我们这里设置的是一旦从父组件修改了 forChildMsg 数据，我们就把 forChildMsg 加上一个字符串”—ownChildMsg”，然后显示在屏幕上。这时是可以每当父组件修改了新数据，都会更新 ownChildMsg 数据的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> childNode = &#123;</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">          &lt;div class="child"&gt;</span></span><br><span class="line"><span class="string">            &lt;div&gt;</span></span><br><span class="line"><span class="string">              &lt;span&gt;子组件数据&lt;/span&gt;</span></span><br><span class="line"><span class="string">              &lt;input v-model="forChildMsg"/&gt;</span></span><br><span class="line"><span class="string">            &lt;/div&gt;</span></span><br><span class="line"><span class="string">            &lt;p&gt;&#123;&#123;forChildMsg&#125;&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="string">            &lt;p&gt;ownChildMsg : &#123;&#123;ownChildMsg&#125;&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="string">          &lt;/div&gt;`</span>,</span><br><span class="line">  props: &#123;</span><br><span class="line">    <span class="string">"for-child-msg"</span>: <span class="built_in">String</span></span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    ownChildMsg() &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.forChildMsg + <span class="string">"---ownChildMsg"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="3"><li>更加妥帖的方式是使用变量存储 prop 的初始值，并用 watch 来观察 prop 值得变化。发生变化时，更新变量的值。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> childNode = &#123;</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">          &lt;div class="child"&gt;</span></span><br><span class="line"><span class="string">            &lt;div&gt;</span></span><br><span class="line"><span class="string">              &lt;span&gt;子组件数据&lt;/span&gt;</span></span><br><span class="line"><span class="string">              &lt;input v-model="forChildMsg"/&gt;</span></span><br><span class="line"><span class="string">            &lt;/div&gt;</span></span><br><span class="line"><span class="string">            &lt;p&gt;&#123;&#123;forChildMsg&#125;&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="string">            &lt;p&gt;ownChildMsg : &#123;&#123;ownChildMsg&#125;&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="string">          &lt;/div&gt;`</span>,</span><br><span class="line">  props: &#123;</span><br><span class="line">    <span class="string">"for-child-msg"</span>: <span class="built_in">String</span></span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      ownChildMsg: <span class="keyword">this</span>.forChildMsg</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    forChildMsg() &#123;</span><br><span class="line">      <span class="keyword">this</span>.ownChildMsg = <span class="keyword">this</span>.forChildMsg;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue基础入门笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue基础入门笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>17 数据-观察(watch)</title>
      <link href="/2019/05/16/Vue.js%202.0%20%E6%89%8B%E6%8A%8A%E6%89%8B%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/17%20%E6%95%B0%E6%8D%AE-%E8%A7%82%E5%AF%9F(watch)/"/>
      <url>/2019/05/16/Vue.js%202.0%20%E6%89%8B%E6%8A%8A%E6%89%8B%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/17%20%E6%95%B0%E6%8D%AE-%E8%A7%82%E5%AF%9F(watch)/</url>
      
        <content type="html"><![CDATA[<p>一个对象，键是需要观察的表达式，值是对应回调函数。值也可以是方法名，或者包含选项的对象。Vue 实例将会在实例化时调用 <code>$watch()</code>，遍历 watch 对象的每一个属性。</p><blockquote><p>为什么一定要有watch，不用可以吗？我们已经有了computed，能不能不去使用?</p></blockquote><p><a name="CHjff"></a></p><h2 id="1-watch的出现"><a href="#1-watch的出现" class="headerlink" title="1 watch的出现"></a>1 watch的出现</h2><blockquote><p>做一个实验</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>vue<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"a"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el:<span class="string">'#app'</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line"><span class="javascript">            a:<span class="string">"1"</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        computed: &#123;</span><br><span class="line">            a()&#123;</span><br><span class="line"><span class="javascript">               setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                   <span class="keyword">this</span>.a=<span class="number">1</span>;</span></span><br><span class="line">               &#125;, 500); </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>不难发现在<em>异步的情况下就不好使用了</em></p></blockquote><p><a name="dEza4"></a></p><h2 id="2-代码实现"><a href="#2-代码实现" class="headerlink" title="2 代码实现"></a>2 代码实现</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"utf-8"</span> /&gt;</span><br><span class="line">    &lt;title&gt;vue&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">        &lt;input type=<span class="string">"text"</span> v-model=<span class="string">"a"</span>&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;script src=<span class="string">"https://cdn.jsdelivr.net/npm/vue"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span> </span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        el:<span class="string">'#app'</span>,</span><br><span class="line">        data:&#123;</span><br><span class="line">            a:<span class="string">""</span></span><br><span class="line">        &#125;,</span><br><span class="line">        watch: &#123; <span class="comment">// 只有值变化的时候才会触发 支持异步了，其他情况我们更善于使用</span></span><br><span class="line">            a(newVal,oldVal)&#123; <span class="comment">// watch的属性名字要和观察的人的名字一致</span></span><br><span class="line">                <span class="built_in">console</span>.log(newVal);</span><br><span class="line">                <span class="built_in">console</span>.log(oldVal);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure><p><a name="ofjYE"></a></p><h2 id="3-computed与watch的区别"><a href="#3-computed与watch的区别" class="headerlink" title="3 computed与watch的区别"></a>3 computed与watch的区别</h2><p>Vue 提供了一种更通用的方式来观察和响应 Vue 实例上的数据变动:<strong>侦听属性</strong>。当你有一些数据需要随着其它数据变动而变动时，你很容易滥用 <code>watch</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"utf-8"</span> /&gt;</span><br><span class="line">    &lt;title&gt;vue&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">        &#123;&#123; fullName &#125;&#125;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;script src=<span class="string">"https://cdn.jsdelivr.net/npm/vue"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span> </span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">el: <span class="string">'#app'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        firstName: <span class="string">'Foo'</span>,</span><br><span class="line">        lastName: <span class="string">'Bar'</span>,</span><br><span class="line">        fullName: <span class="string">'Foo Bar'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    watch: &#123;</span><br><span class="line">        firstName: <span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.fullName = val + <span class="string">' '</span> + <span class="keyword">this</span>.lastName</span><br><span class="line">        &#125;,</span><br><span class="line">        lastName: <span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.fullName = <span class="keyword">this</span>.firstName + <span class="string">' '</span> + val</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>上面代码是命令式且重复的。将它与计算属性的版本进行比较：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#demo'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    firstName: <span class="string">'Foo'</span>,</span><br><span class="line">    lastName: <span class="string">'Bar'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    fullName: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="string">' '</span> + <span class="keyword">this</span>.lastName</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>是不是感觉优雅很多</p></blockquote><p><a name="FM8YE"></a></p><h2 id="4-侦听器"><a href="#4-侦听器" class="headerlink" title="4 侦听器"></a>4 侦听器</h2><p>虽然计算属性在大多数情况下更合适，但有时也需要一个自定义的侦听器。这就是为什么 Vue 通过 watch 选项提供了一个更通用的方法，来响应数据的变化。当需要在数据变化时执行异步或开销较大的操作时，这个方式是最有用的。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>vue<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"something"</span>&gt;</span></span><br><span class="line">       &#123;&#123;somethingShow&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            something: <span class="string">''</span>,</span></span><br><span class="line"><span class="javascript">            somethingShow:<span class="string">''</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        watch: &#123;</span><br><span class="line">            something(val)&#123;</span><br><span class="line"><span class="javascript">                <span class="keyword">this</span>.somethingShow = <span class="string">"loading"</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">this</span>.getSomething()</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            getSomething()&#123;</span><br><span class="line"><span class="javascript">                setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">this</span>.somethingShow = <span class="string">"hello"</span></span></span><br><span class="line"><span class="javascript">                &#125;, <span class="number">1000</span>);<span class="comment">// 我们使用延迟模拟一个网络请求</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a name="uY7RX"></a></p><h2 id="5-vm-watch"><a href="#5-vm-watch" class="headerlink" title="5 vm.$watch"></a>5 vm.$watch</h2><blockquote><p>vm.$watch( expOrFn, callback, [options] )</p></blockquote><p>观察 Vue 实例变化的一个表达式或计算属性函数。回调函数得到的参数为新值和旧值。表达式只接受监督的键路径。对于更复杂的表达式，用一个函数取代。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>vue<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"something"</span>&gt;</span></span><br><span class="line">       &#123;&#123;somethingShow&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            something: <span class="string">''</span>,</span></span><br><span class="line"><span class="javascript">            somethingShow:<span class="string">''</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    vm.$watch(<span class="string">'something'</span>,(newVal,oldVal)=&gt;&#123;<span class="comment">// watch的属性名要和观察的人名字一致</span></span></span><br><span class="line"><span class="javascript">        vm.somethingShow = <span class="string">"loading"</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'===================================='</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(newVal);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'===================================='</span>);</span></span><br><span class="line">        vm.somethingShow = newVal</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue基础入门笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue基础入门笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>16 数据-计算属性(computed)</title>
      <link href="/2019/05/16/Vue.js%202.0%20%E6%89%8B%E6%8A%8A%E6%89%8B%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/16%20%E6%95%B0%E6%8D%AE-%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7(computed)/"/>
      <url>/2019/05/16/Vue.js%202.0%20%E6%89%8B%E6%8A%8A%E6%89%8B%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/16%20%E6%95%B0%E6%8D%AE-%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7(computed)/</url>
      
        <content type="html"><![CDATA[<h2 id="9-1-什么是计算属性"><a href="#9-1-什么是计算属性" class="headerlink" title="9.1 什么是计算属性"></a>9.1 什么是计算属性</h2><p>模板内的表达式非常便利，但是设计它们的初衷是用于<strong>简单运算的</strong>。在模板中放入太多的逻辑会让模板过重且难以维护。例如:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>vue<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example"</span>&gt;</span></span><br><span class="line">           &#123;&#123; message.split('').reverse().join('') &#125;&#125;</span><br><span class="line">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="javascript">        message: <span class="string">'Hello'</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1557891066357-d1d57de9-4042-4703-9111-b54d669c4515.png#align=left&display=inline&height=35&name=image.png&originHeight=70&originWidth=162&size=1943&status=done&width=81" alt="image.png"></p><p>这里的表达式包含3个操作，并不是很清晰，所以遇到复杂逻辑时应该使用Vue特带的计算属性computed来进行处理。</p><p><a name="4xZcY"></a></p><h2 id="9-2-计算属性的用法"><a href="#9-2-计算属性的用法" class="headerlink" title="9.2 计算属性的用法"></a>9.2 计算属性的用法</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>vue<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example"</span>&gt;</span></span><br><span class="line">           &#123;&#123;getMessage&#125;&#125;</span><br><span class="line">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="javascript">        message: <span class="string">'Hello'</span></span></span><br><span class="line">      &#125;,</span><br><span class="line"><span class="javascript">      computed: &#123; <span class="comment">// 放在computed中最后也会放在vm上，不能和methods与data重名</span></span></span><br><span class="line">        getMessage() &#123;</span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="keyword">this</span>.message.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>)</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a name="uNF1P"></a></p><h2 id="9-3-计算属性使用技巧"><a href="#9-3-计算属性使用技巧" class="headerlink" title="9.3 计算属性使用技巧"></a>9.3 计算属性使用技巧</h2><p>计算属性可以依赖其他计算属性<br>计算属性不仅可以依赖当前Vue 实例的数据，还可以依赖其他实例的数据</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>vue<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app2"</span>&gt;</span></span><br><span class="line">         &#123;&#123;getMessage&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm= <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">'#app1'</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="javascript">        message: <span class="string">'World'</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm2 = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">'#app2'</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="javascript">        message: <span class="string">'Hello'</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      computed: &#123; </span><br><span class="line">        getMessage() &#123;</span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.message&#125;</span> <span class="subst">$&#123;vm.message&#125;</span>`</span></span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a name="4EDMS"></a></p><h2 id="9-4-getter和setter"><a href="#9-4-getter和setter" class="headerlink" title="9.4 getter和setter"></a>9.4 getter和setter</h2><p>每一个计算属性都包含一个getter 和一个setter ，我们上面的两个示例都是计算属性的默认用法， 只是利用了getter 来读取。<br>在你需要时，也可以提供一个setter 函数， 当手动修改计算属性的值就像修改一个普通数据那样时，就会触发setter 函数，执行一些自定义的操作</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>vue<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"getMessage"</span>&gt;</span> <span class="tag">&lt;<span class="name">--模拟修改--!</span>&gt;</span></span><br><span class="line">        &#123;&#123;getMessage&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm= <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="javascript">        hi:<span class="string">'Hello'</span>,</span></span><br><span class="line"><span class="javascript">        message: <span class="string">'World'</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      computed:&#123;</span><br><span class="line"><span class="javascript">        getMessage:&#123; <span class="comment">//get,set方法</span></span></span><br><span class="line"><span class="javascript">           <span class="comment">// getter</span></span></span><br><span class="line"><span class="javascript">           <span class="keyword">get</span>()&#123;</span></span><br><span class="line"><span class="javascript">             <span class="keyword">return</span> <span class="keyword">this</span>.hi + <span class="string">' '</span> + <span class="keyword">this</span>.message</span></span><br><span class="line">           &#125;,</span><br><span class="line"><span class="javascript">           <span class="comment">// setter</span></span></span><br><span class="line"><span class="javascript">           <span class="keyword">set</span>(newValue)&#123;</span></span><br><span class="line"><span class="javascript">              <span class="built_in">console</span>.log(<span class="string">'===================================='</span>);</span></span><br><span class="line"><span class="javascript">              <span class="built_in">console</span>.log(newValue);</span></span><br><span class="line"><span class="javascript">              <span class="built_in">console</span>.log(<span class="string">'===================================='</span>);</span></span><br><span class="line"><span class="javascript">              <span class="keyword">var</span> names = newValue.split(<span class="string">' '</span>);</span></span><br><span class="line"><span class="javascript">              <span class="keyword">this</span>.hi = names[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">              <span class="keyword">this</span>.message = names[names.length - <span class="number">1</span>];</span></span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><br>绝大多数情况下，我们只会用默认的getter 方法来读取一个计算属性，在业务中很少用到setter,所以在声明一个计算属性时，可以直接使用默认的写法，不必将getter 和setter 都声明。</p><p><a name="ID8m7"></a></p><h2 id="9-5-质疑什么不直接用methods"><a href="#9-5-质疑什么不直接用methods" class="headerlink" title="9.5 质疑什么不直接用methods"></a>9.5 质疑什么不直接用methods</h2><p>我们可以将同一函数定义为一个方法而不是一个计算属性，两种方式的最终结果确实是完全相同的。只是一个使用getMessage()取值，一个使用getMessage取值。<br>然而，不同的是<strong>计算属性是基于它们的依赖进行缓存的</strong>。计算属性只有在它的相关依赖发生改变时才会重新求值。<br>这就意味着只要 hi还没有发生改变，多次访问 getMessage计算属性会立即返回之前的计算结果，而不必再次执行函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"utf-8"</span> /&gt;</span><br><span class="line">    &lt;title&gt;vue&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">        &lt;div&gt;&#123;&#123;getMessage&#125;&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;div&gt; &#123;&#123;getMessage1()&#125;&#125;&lt;/</span>div&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;script src=<span class="string">"https://cdn.jsdelivr.net/npm/vue"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span> </span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> vm= <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">      el: <span class="string">'#app'</span>,</span><br><span class="line">      data: &#123;</span><br><span class="line">        hi:<span class="string">'Hello'</span>,</span><br><span class="line">        message: <span class="string">'World'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      computed:&#123;</span><br><span class="line">        getMessage()&#123; <span class="comment">//get,set方法</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.hi + <span class="string">' '</span> + <span class="keyword">this</span>.message </span><br><span class="line">            <span class="comment">//而使用计算属性，只要title没变，页面渲染是不会重新进这里来计算的，而是使用了缓存。</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      methods:&#123;</span><br><span class="line">        getMessage1()&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.hi + <span class="string">' '</span> + <span class="keyword">this</span>.message</span><br><span class="line">            <span class="comment">//进这个方法，再次计算。不是刷新，而是只要页面渲染，就会进方法里重新计算。</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue基础入门笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue基础入门笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>15 动态绑定样式-v-bind</title>
      <link href="/2019/05/16/Vue.js%202.0%20%E6%89%8B%E6%8A%8A%E6%89%8B%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/15%20%E5%8A%A8%E6%80%81%E7%BB%91%E5%AE%9A%E6%A0%B7%E5%BC%8F-v-bind/"/>
      <url>/2019/05/16/Vue.js%202.0%20%E6%89%8B%E6%8A%8A%E6%89%8B%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/15%20%E5%8A%A8%E6%80%81%E7%BB%91%E5%AE%9A%E6%A0%B7%E5%BC%8F-v-bind/</url>
      
        <content type="html"><![CDATA[<h2 id="13-1-对象语法"><a href="#13-1-对象语法" class="headerlink" title="13.1 对象语法"></a>13.1 对象语法</h2><blockquote><p>:class 绑定的样式和class绑定的不冲突</p></blockquote><p><a name="sjdDk"></a></p><h3 id="13-1-1-直接绑定一个data"><a href="#13-1-1-直接绑定一个data" class="headerlink" title="13.1.1 直接绑定一个data"></a>13.1.1 直接绑定一个data</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"&#123; active: isActive &#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><code>active</code> 这个 class 存在与否将取决于数据属性 <code>isActive</code> 的 布尔值</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"static"</span> <span class="attr">v-bind:class</span>=<span class="string">"&#123; active: isActive, 'text-danger': hasError &#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a name="gWlih"></a></p><h3 id="13-1-2-data中使用一个对象绑定"><a href="#13-1-2-data中使用一个对象绑定" class="headerlink" title="13.1.2 data中使用一个对象绑定"></a>13.1.2 data中使用一个对象绑定</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">  classObject: &#123;</span><br><span class="line">    active: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">'text-danger'</span>: <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="I4eR3"></a></p><h3 id="13-1-3-计算属性中绑定"><a href="#13-1-3-计算属性中绑定" class="headerlink" title="13.1.3 计算属性中绑定"></a>13.1.3 计算属性中绑定</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">  isActive: <span class="literal">true</span>,</span><br><span class="line">  error: <span class="literal">null</span></span><br><span class="line">&#125;,</span><br><span class="line">computed: &#123;</span><br><span class="line">  classObject: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      active: <span class="keyword">this</span>.isActive &amp;&amp; !<span class="keyword">this</span>.error,</span><br><span class="line">      <span class="string">'text-danger'</span>: <span class="keyword">this</span>.error &amp;&amp; <span class="keyword">this</span>.error.type === <span class="string">'fatal'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="PROHG"></a></p><h2 id="13-2-数组语法"><a href="#13-2-数组语法" class="headerlink" title="13.2 数组语法"></a>13.2 数组语法</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"[activeClass, errorClass]"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a name="q3kqv"></a></p><h3 id="13-2-1-直接动态绑定一个class"><a href="#13-2-1-直接动态绑定一个class" class="headerlink" title="13.2.1 直接动态绑定一个class"></a>13.2.1 直接动态绑定一个class</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">  activeClass: <span class="string">'active'</span>,</span><br><span class="line">  errorClass: <span class="string">'text-danger'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="y375Y"></a></p><h3 id="13-2-2-三元表达式"><a href="#13-2-2-三元表达式" class="headerlink" title="13.2.2 三元表达式"></a>13.2.2 三元表达式</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"[isActive ? activeClass : '', errorClass]"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>不过，当有多个条件 class 时这样写有些繁琐。所以在数组语法中也可以使用对象语法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"[&#123; active: isActive &#125;, errorClass]"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue基础入门笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue基础入门笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>14 插槽-slot</title>
      <link href="/2019/05/16/Vue.js%202.0%20%E6%89%8B%E6%8A%8A%E6%89%8B%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/14%20%E6%8F%92%E6%A7%BD-slot/"/>
      <url>/2019/05/16/Vue.js%202.0%20%E6%89%8B%E6%8A%8A%E6%89%8B%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/14%20%E6%8F%92%E6%A7%BD-slot/</url>
      
        <content type="html"><![CDATA[<h2 id="老版本vue"><a href="#老版本vue" class="headerlink" title="老版本vue"></a>老版本vue</h2><blockquote><p>模板中只能有一个根元素</p></blockquote><blockquote><p>HTML内容模板（<template>）元素是一种用于保存客户端内容机制，该内容在加载页面时不会呈现，但随后可以在运行时使用JavaScript实例化。</template></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">modal</span>&gt;</span><span class="tag">&lt;/<span class="name">modal</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"modal"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">h1</span>&gt;</span>是否删除<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> modal = &#123;</span><br><span class="line"> template:<span class="string">"#modal"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line"> el:<span class="string">'#app'</span>,</span><br><span class="line"> components:&#123;</span><br><span class="line">   modal</span><br><span class="line"> &#125;,</span><br><span class="line"> data:&#123;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>我们通常是想把h1的值动态放入，所以就要用到插槽</p></blockquote><p><a name="4wvW6"></a></p><h3 id="单个插槽-默认插槽-匿名插槽"><a href="#单个插槽-默认插槽-匿名插槽" class="headerlink" title="单个插槽 | 默认插槽 | 匿名插槽"></a>单个插槽 | 默认插槽 | 匿名插槽</h3><blockquote><p>首先是单个插槽，<strong>单个插槽</strong>是vue的官方叫法，但是其实也可以叫它默认插槽，或者与具名插槽相对，我们可以叫它匿名插槽。因为它不用设置name属性。<br>单个插槽可以放置在组件的任意位置，但是就像它的名字一样，一个组件中只能有一个该类插槽。相对应的，具名插槽就可以有很多个，只要名字（name属性）不同就可以了。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modal</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>插入成功<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">modal</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"modal"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1560398287016-d8f986a7-505e-44ce-ba6a-5b266d838876.png#align=left&display=inline&height=57&name=image.png&originHeight=114&originWidth=286&size=3695&status=done&width=143" alt="image.png"></p><blockquote><p>当我们看到插入成功的时候，匿名插入就实现了</p></blockquote><p><a name="W4O9O"></a></p><h3 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h3><blockquote><p>匿名插槽没有name属性，所以是匿名插槽，那么，插槽加了name属性，就变成了具名插槽。具名插槽可以在一个组件中出现N次，出现在不同的位置。下面的例子，就是一个有两个<strong>具名插槽</strong>和<strong>单个插槽</strong>的组件，这三个插槽被父组件用同一套css样式显示了出来，不同的是内容上略有区别。</p></blockquote><blockquote><p>简单的来说，就是，我们可能遇到一个问题<br>我们想插入不同的插槽内的内容不一样</p></blockquote><blockquote><p>在 2.6.0+ 中已弃用</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modal</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>插入成功<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span> <span class="attr">slot</span>=<span class="string">"title"</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span> <span class="attr">slot</span>=<span class="string">"content"</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modal</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"modal"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"default"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"title"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"content"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>我们可以发现没有name的情况下，默认就是default</p></blockquote><p><a name="j4pc4"></a></p><h3 id="作用域插槽-带数据的插槽"><a href="#作用域插槽-带数据的插槽" class="headerlink" title="作用域插槽 | 带数据的插槽"></a>作用域插槽 | 带数据的插槽</h3><blockquote><p>最后，就是我们的作用域插槽。这个稍微难理解一点。官方叫它作用域插槽，实际上，对比前面两种插槽，我们可以叫它带数据的插槽。什么意思呢，就是前面两种，都是在组件的template里面写</p></blockquote><blockquote><p>在 2.6.0+ 中已弃用</p></blockquote><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Vue作用域插槽<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/vue/2.3.4/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app2"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 组件使用者只需传递users数据即可 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">my-stripe-list</span> <span class="attr">:items</span>=<span class="string">"users"</span> <span class="attr">odd-bgcolor</span>=<span class="string">"#D3DCE6"</span> <span class="attr">even-bgcolor</span>=<span class="string">"#E5E9F2"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- props对象接收来自子组件slot的$index参数 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">"cont"</span> <span class="attr">scope</span>=<span class="string">"props"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;users[props.$index].id&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;users[props.$index].name&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;users[props.$index].age&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 这里可以自定[编辑][删除]按钮的链接和样式 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">"'#edit/id/'+users[props.$index].id"</span>&gt;</span>编辑<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">"'#del/id/'+users[props.$index].id"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">my-stripe-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        Vue.component(<span class="string">'my-stripe-list'</span>, &#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">/*slot的$index可以传递到父组件中*/</span></span></span><br><span class="line">            template: `</span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="javascript">                        &lt;div v-<span class="keyword">for</span>=<span class="string">"(item, index) in items"</span> style=<span class="string">"line-height:2.2;"</span> :style=<span class="string">"index % 2 === 0 ? 'background:'+oddBgcolor : 'background:'+evenBgcolor"</span>&gt;</span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"cont"</span> <span class="attr">:</span>$<span class="attr">index</span>=<span class="string">"index"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">                `,</span><br><span class="line">            props: &#123;</span><br><span class="line"><span class="javascript">                items: <span class="built_in">Array</span>,</span></span><br><span class="line"><span class="javascript">                oddBgcolor: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="javascript">                evenBgcolor: <span class="built_in">String</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"><span class="javascript">        <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            el: <span class="string">'#app2'</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line">                users: [&#123;</span><br><span class="line">                        id: 1,</span><br><span class="line"><span class="javascript">                        name: <span class="string">'张三'</span>,</span></span><br><span class="line">                        age: 20</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        id: 2,</span><br><span class="line"><span class="javascript">                        name: <span class="string">'李四'</span>,</span></span><br><span class="line">                        age: 22</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        id: 3,</span><br><span class="line"><span class="javascript">                        name: <span class="string">'王五'</span>,</span></span><br><span class="line">                        age: 27</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        id: 4,</span><br><span class="line"><span class="javascript">                        name: <span class="string">'张龙'</span>,</span></span><br><span class="line">                        age: 27</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        id: 5,</span><br><span class="line"><span class="javascript">                        name: <span class="string">'赵虎'</span>,</span></span><br><span class="line">                        age: 27</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>这种写法，习惯了element-ui的朋友一定就很熟悉了。</p></blockquote><p>总结： <br>1 . 使用slot可以在自定义组件内插入原生HTML元素，需要搭配使用name和slot属性，否则多个slot可能会返回重复的HTML元素。<br>2 . 使用slot-scope可以将slot内部的作用域指向该子组件，否则默认作用域指向调用slot的父组件。</p><p><a name="7jdib"></a></p><h2 id="新版本的-v-slot"><a href="#新版本的-v-slot" class="headerlink" title="新版本的 v-slot"></a>新版本的 v-slot</h2><blockquote><p>从 <a href="https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fvuejs%2Fvue%2Freleases%2Ftag%2Fv2.6.0" target="_blank" rel="noopener">vue@2.6.x</a> 开始，Vue 为具名和范围插槽引入了一个全新的语法，即我们今天要讲的主角：<code>v-slot</code> 指令。目的就是想统一 <code>slot</code> 和 <code>scope-slot</code> 语法，使代码更加规范和清晰。既然有新的语法上位，很明显，<code>slot</code> 和 <code>scope-slot</code> 也将会在 <code>vue@3.0.x</code> 中彻底的跟我们说拜拜了。而从 <code>vue@2.6.0</code> 开始，官方推荐我们使用 <code>v-slot</code> 来替代后两者。</p></blockquote><br><a name="1YDts"></a>### 具名插槽> 实例化一个vue<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 组件</span></span><br><span class="line">Vue.component(<span class="string">'lv-hello'</span>, &#123;</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">      &lt;slot name="header"&gt;&lt;/slot&gt;</span></span><br><span class="line"><span class="string">      &lt;h1&gt;我的天呀&lt;/h1&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;`</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app1'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>老版本</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app1"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 老版本使用具名插槽 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">lv-hello</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">slot</span>=<span class="string">"header"</span>&gt;</span>我是头部<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">lv-hello</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>新版本的变化</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">&lt;!-- 新版本使用具名插槽 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">lv-hello</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 注意：这块的 v-slot 指令只能写在 template 标签上面，而不能放置到 p 标签上 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:header</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是头部<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">lv-hello</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a name="COUF6"></a></p><h3 id="具名插槽的缩写"><a href="#具名插槽的缩写" class="headerlink" title="具名插槽的缩写"></a>具名插槽的缩写</h3><blockquote><p>将 <code>v-slot:</code> 替换成 <code>#</code> 号</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">lv-hello</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> #<span class="attr">header</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是头部<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 注意: #号后面必须有参数，否则会报错。即便是默认插槽，也需要写成 #default --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> #<span class="attr">default</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是默认插槽<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">lv-hello</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a name="TLyxU"></a></p><h3 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h3><blockquote><p>所谓作用域插槽，就是让插槽的内容能够访问子组件中才有的数据。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'lv-hello'</span>, &#123;</span><br><span class="line">  data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      firstName: <span class="string">'张'</span>,</span><br><span class="line">      lastName: <span class="string">'三'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">      &lt;slot name="header" :firstName="firstName" :lastName="lastName"&gt;&lt;/slot&gt;</span></span><br><span class="line"><span class="string">      &lt;h1&gt;我的天呀&lt;/h1&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 老版本使用具名插槽 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">lv-hello</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">slot</span>=<span class="string">"header"</span> <span class="attr">slot-scope</span>=<span class="string">"hh"</span>&gt;</span>我是头部 &#123;&#123; hh.firstName &#125;&#125; &#123;&#123; hh.lastName &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">lv-hello</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 新版本使用具名插槽 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">lv-hello</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 注意：这块的 v-slot 指令只能写在 template 标签上面，而不能放置到 p 标签上 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:header</span>=<span class="string">"hh"</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是头部 &#123;&#123; hh.firstName &#125;&#125; &#123;&#123; hh.lastName &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">lv-hello</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue基础入门笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue基础入门笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>13 全局api-fifer过滤器</title>
      <link href="/2019/05/15/Vue.js%202.0%20%E6%89%8B%E6%8A%8A%E6%89%8B%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/13%20%E5%85%A8%E5%B1%80api-fifer%E8%BF%87%E6%BB%A4%E5%99%A8/"/>
      <url>/2019/05/15/Vue.js%202.0%20%E6%89%8B%E6%8A%8A%E6%89%8B%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/13%20%E5%85%A8%E5%B1%80api-fifer%E8%BF%87%E6%BB%A4%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="8-1-介绍"><a href="#8-1-介绍" class="headerlink" title="8.1 介绍"></a>8.1 介绍</h2><p>允许你自定义过滤器，可被用于一些常见的文本格式化。过滤器可以用在两个地方：<strong>双花括号插值和 <code>v-bind</code> 表达式</strong> (后者从 2.1.0+ 开始支持)。过滤器应该被添加在 JavaScript 表达式的尾部，由“管道”符号指示</p><p><a name="68P6e"></a></p><h2 id="8-2-优势"><a href="#8-2-优势" class="headerlink" title="8.2 优势"></a>8.2 优势</h2><p>1、在Vue中使用过滤器（Filters）来渲染数据是一种很有趣的方式。<br>2、首先我们要知道，Vue中的过滤器不能替代Vue中的<code>methods</code>、<code>computed</code>或者<code>watch</code>，<br>3、过滤器不改变真正的<code>data</code>，而只是改变渲染的结果，并返回过滤后的版本。<br>4、在很多不同的情况下，过滤器都是有用的，比如尽可能保持API响应的干净，并在前端处理数据的格式。<br>5、在你希望避免重复和连接的情况下，它们也可以有效地封装成可重用代码块背后的所有逻辑。</p><p><a name="laCN4"></a></p><h2 id="8-3-过滤器例子"><a href="#8-3-过滤器例子" class="headerlink" title="8.3 过滤器例子"></a>8.3 过滤器例子</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>vue<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; message | capitalize &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm= <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="javascript">        message: <span class="string">'world'</span></span></span><br><span class="line">      &#125;,</span><br><span class="line"><span class="javascript">      filters: &#123; <span class="comment">// 可以有好多的自定义过滤器</span></span></span><br><span class="line"><span class="javascript">        capitalize(value) &#123; <span class="comment">// 这里的this指向的window</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (!value) <span class="keyword">return</span> <span class="string">''</span></span></span><br><span class="line">            value = value.toString()</span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> value.charAt(<span class="number">0</span>).toUpperCase() + value.slice(<span class="number">1</span>)</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a name="OLJ0w"></a></p><h2 id="8-4-过滤器串连"><a href="#8-4-过滤器串连" class="headerlink" title="8.4 过滤器串连"></a>8.4 过滤器串连</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>vue<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        &#123;&#123; message | filterA | filterB &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm= <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="javascript">        message: <span class="string">'world'</span></span></span><br><span class="line">      &#125;,</span><br><span class="line"><span class="javascript">      filters: &#123; <span class="comment">// 可以有好多的自定义过滤器</span></span></span><br><span class="line">        filterA(value)&#123;</span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> value.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>);</span></span><br><span class="line">        &#125;,</span><br><span class="line">        filterB(value)&#123;</span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> value.charAt(<span class="number">0</span>).toUpperCase() + value.slice(<span class="number">1</span>)</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a name="0PiA1"></a></p><h2 id="8-5-过滤器传参"><a href="#8-5-过滤器传参" class="headerlink" title="8.5 过滤器传参"></a>8.5 过滤器传参</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>vue<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        &#123;&#123; message | filterA('hello',hi) &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm= <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="javascript">        hi:<span class="string">'!'</span>,</span></span><br><span class="line"><span class="javascript">        message: <span class="string">'world'</span></span></span><br><span class="line">      &#125;,</span><br><span class="line"><span class="javascript">      filters: &#123; <span class="comment">// 可以有好多的自定义过滤器</span></span></span><br><span class="line">        filterA(value1,value2,value3)&#123;</span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;value2&#125;</span> <span class="subst">$&#123;value1&#125;</span> <span class="subst">$&#123;value3&#125;</span>`</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里，filterA 被定义为接收三个参数的过滤器函数。其中 message 的值作为第一个参数，普通字符串 ‘hello’ 作为第二个参数，表达式 hi 的值作为第三个参数。</p>]]></content>
      
      
      <categories>
          
          <category> Vue基础入门笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue基础入门笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>12 全局api-delete</title>
      <link href="/2019/05/15/Vue.js%202.0%20%E6%89%8B%E6%8A%8A%E6%89%8B%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/12%20%E5%85%A8%E5%B1%80api-delete/"/>
      <url>/2019/05/15/Vue.js%202.0%20%E6%89%8B%E6%8A%8A%E6%89%8B%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/12%20%E5%85%A8%E5%B1%80api-delete/</url>
      
        <content type="html"><![CDATA[<p>Vue.delete( target, propertyName/index )</p><ul><li><p><strong>参数</strong>：</p><ul><li><code>{Object | Array} target</code></li><li><code>{string | number} propertyName/index</code><blockquote><p>仅在 2.2.0+ 版本中支持 Array + index 用法。</p></blockquote></li></ul></li><li><p><strong>用法</strong>：<br>删除对象的属性。如果对象是响应式的，确保删除能触发更新视图。这个方法主要用于避开 Vue 不能检测到属性被删除的限制，但是你应该很少会使用它。</p><blockquote><p>在 2.2.0+ 中同样支持在数组上工作。</p></blockquote></li><li><p>目标对象不能是一个 Vue 实例或 Vue 实例的根数据对象。</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">data:&#123;</span><br><span class="line">   namelist : &#123;</span><br><span class="line">     id : <span class="number">1</span>, </span><br><span class="line">       name : <span class="string">'叶落森'</span></span><br><span class="line">   &#125;       </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 删除name</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">this</span>.namelist.name;<span class="comment">//js方法</span></span><br><span class="line">Vue.delete(<span class="keyword">this</span>.namelist,<span class="string">'name'</span>);<span class="comment">//vue方法</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue基础入门笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue基础入门笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>11 全局api-set</title>
      <link href="/2019/05/15/Vue.js%202.0%20%E6%89%8B%E6%8A%8A%E6%89%8B%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/11%20%E5%85%A8%E5%B1%80api-set/"/>
      <url>/2019/05/15/Vue.js%202.0%20%E6%89%8B%E6%8A%8A%E6%89%8B%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/11%20%E5%85%A8%E5%B1%80api-set/</url>
      
        <content type="html"><![CDATA[<h2 id="官网说明"><a href="#官网说明" class="headerlink" title="官网说明"></a>官网说明</h2><p>Vue.set( target, propertyName/index, value )</p><ul><li><strong>参数</strong>：<ul><li><code>{Object | Array} target</code></li><li><code>{string | number} propertyName/index</code></li><li><code>{any} value</code></li></ul></li><li><strong>返回值</strong>：设置的值。<br></li><li><strong>用法</strong>：<br>向响应式对象中添加一个属性，并确保这个新属性同样是响应式的，且触发视图更新。它必须用于向响应式对象上添加新属性，因为 Vue 无法探测普通的新增属性 (比如 <code>this.myObject.newProperty = &#39;hi&#39;</code>)</li></ul><blockquote><p>注意对象不能是 Vue 实例，或者 Vue 实例的根数据对象。<br></p></blockquote><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"div"</span>&gt;  </span><br><span class="line">&lt;p &gt;&#123;&#123;items&#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line"> </span><br><span class="line">&lt;script&gt;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">el:<span class="string">"#div"</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    items: [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">Vue.set(vm.items,<span class="number">2</span>,<span class="string">"ling"</span>)</span><br><span class="line"> </span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p><a name="oQmUK"></a></p><h3 id="1-设置数组元素"><a href="#1-设置数组元素" class="headerlink" title="1 设置数组元素"></a>1 设置数组元素</h3><p>Vue.set(vm.items,2,”ling”) : 表示 把vm.items  这个数组的下标为2 的元素，改为”ling”<br>把数组  [“a”,”b”,”c”] 修改 后是 [“a”,”b”,”ling”] <br><strong><br></strong><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1560263719161-45ef7ee2-d80c-4e04-96ff-bb521da96e0b.png#align=left&display=inline&height=80&name=image.png&originHeight=160&originWidth=616&size=8949&status=done&width=308" alt="image.png"><strong><br></strong><br><a name="ZGzgO"></a></p><h3 id="2-向响应式对象添加属性"><a href="#2-向响应式对象添加属性" class="headerlink" title="2 向响应式对象添加属性"></a>2 向响应式对象添加属性</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"div"</span>&gt;  </span><br><span class="line">&lt;p&gt;&#123;&#123;person&#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line"> </span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">el:<span class="string">"#div"</span>,</span><br><span class="line">data: &#123;</span><br><span class="line">   person:&#123;</span><br><span class="line">name:<span class="string">"ling"</span>,</span><br><span class="line">job:<span class="string">"engineer"</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;,</span><br><span class="line">created:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">alert(<span class="keyword">this</span>.person.age)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">Vue.set(vm.person,<span class="string">"age"</span>,<span class="string">"26"</span>)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：person 是data 里面的子对象，所以可以使用 Vue.set( ) 方法。data 这个根对象就不能使用 set 方法</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1560264428484-2a01d752-cb52-453b-a2f5-86e7f23dc4e3.png#align=left&display=inline&height=122&name=image.png&originHeight=244&originWidth=916&size=42867&status=done&width=458" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1560264440722-f7f3ac4b-49eb-478f-b980-70034bbe8687.png#align=left&display=inline&height=94&name=image.png&originHeight=188&originWidth=904&size=40740&status=done&width=452" alt="image.png"></p><blockquote><p><strong>说明：控制台可以在person 里找到age 这个属性，说明添加成功 (响应式)</strong></p></blockquote><p>**<a name="tdJHQ"></a></p><h2 id="对比非响应式方法"><a href="#对比非响应式方法" class="headerlink" title="对比非响应式方法"></a>对比非响应式方法</h2><p><strong>vm.food=”chocolate”</strong><br>alert(vm.food)</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1560264596937-87d15eb3-16b3-4d5d-abd5-3dcf1358123f.png#align=left&display=inline&height=131&name=image.png&originHeight=262&originWidth=1400&size=42983&status=done&width=700" alt="image.png"></p><blockquote><p><strong>控制台和网页上的  都没有显示food 这个属性，说明food 这个属性没有被添加 （非响应式）</strong></p></blockquote><p><strong><br></strong><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1560264665607-ec58d779-389f-4945-a269-e548d1e694b6.png#align=left&display=inline&height=374&name=image.png&originHeight=748&originWidth=1264&size=145380&status=done&width=632" alt="image.png">**</p>]]></content>
      
      
      <categories>
          
          <category> Vue基础入门笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue基础入门笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>10 全局api-nextTick</title>
      <link href="/2019/05/15/Vue.js%202.0%20%E6%89%8B%E6%8A%8A%E6%89%8B%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/10%20%E5%85%A8%E5%B1%80api-nextTick/"/>
      <url>/2019/05/15/Vue.js%202.0%20%E6%89%8B%E6%8A%8A%E6%89%8B%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/10%20%E5%85%A8%E5%B1%80api-nextTick/</url>
      
        <content type="html"><![CDATA[<h2 id="官方说明"><a href="#官方说明" class="headerlink" title="官方说明"></a>官方说明</h2><p><strong>参数</strong>：</p><ul><li><code>{Function} [callback]</code></li><li><code>{Object} [context]</code></li></ul><p><strong>用法</strong>：<br><br><br>在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM。<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 修改数据</span></span><br><span class="line">vm.msg = <span class="string">'Hello'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// DOM 还没有更新</span></span><br><span class="line">Vue.nextTick(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// DOM 更新了</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 作为一个 Promise 使用 (2.1.0 起新增，详见接下来的提示)</span></span><br><span class="line">Vue.nextTick()</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// DOM 更新了</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>2.1.0 起新增：如果没有提供回调且在支持 Promise 的环境中，则返回一个 Promise。请注意 Vue 不自带 Promise 的 polyfill，所以如果你的目标浏览器不原生支持 Promise (IE：你们都看我干嘛)，你得自己提供 polyfill。</p></blockquote><p><a name="z6MNr"></a></p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>先来一个示例了解下关于Vue中的DOM更新以及<code>nextTick</code>的作用。<br><strong>模板</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"app"</span>&gt;</span><br><span class="line">  &lt;div ref=<span class="string">"msgDiv"</span>&gt;&#123;&#123;msg&#125;&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  &lt;div v-if="msg1"&gt;Message got outside $nextTick: &#123;&#123;msg1&#125;&#125;&lt;/</span>div&gt;</span><br><span class="line">  &lt;div v-<span class="keyword">if</span>=<span class="string">"msg2"</span>&gt;Message got inside $nextTick: &#123;&#123;msg2&#125;&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  &lt;div v-if="msg3"&gt;Message got outside $nextTick: &#123;&#123;msg3&#125;&#125;&lt;/</span>div&gt;</span><br><span class="line">  &lt;button @click=<span class="string">"changeMsg"</span>&gt;</span><br><span class="line">    Change the Message</span><br><span class="line">  &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure><p><strong>Vue实例</strong><br>**</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'.app'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    msg: <span class="string">'Hello Vue.'</span>,</span><br><span class="line">    msg1: <span class="string">''</span>,</span><br><span class="line">    msg2: <span class="string">''</span>,</span><br><span class="line">    msg3: <span class="string">''</span></span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    changeMsg() &#123;</span><br><span class="line">      <span class="keyword">this</span>.msg = <span class="string">"Hello world."</span></span><br><span class="line">      <span class="keyword">this</span>.msg1 = <span class="keyword">this</span>.$refs.msgDiv.innerHTML</span><br><span class="line">      <span class="keyword">this</span>.$nextTick(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.msg2 = <span class="keyword">this</span>.$refs.msgDiv.innerHTML</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="keyword">this</span>.msg3 = <span class="keyword">this</span>.$refs.msgDiv.innerHTML</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>点击前</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1560262857808-3104fda4-8d22-400d-9ebf-ea86d582190d.png#align=left&display=inline&height=56&name=image.png&originHeight=112&originWidth=294&size=33721&status=done&width=147" alt="image.png"></p><p>点击后</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1560262879570-c38932c1-2ea8-4772-af2a-0bd6efd55bf8.png#align=left&display=inline&height=116&name=image.png&originHeight=232&originWidth=688&size=206614&status=done&width=344" alt="image.png"></p><blockquote><p>从图中可以得知：msg1和msg3显示的内容还是变换之前的，而msg2显示的内容是变换之后的。其根本原因是因为Vue中DOM更新是异步的（详细解释在后面）。</p></blockquote><p><a name="QPiKI"></a></p><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>下面了解下<code>nextTick</code>的主要应用的场景及原因。</p><ul><li>在Vue生命周期的<code>created()</code>钩子函数进行的DOM操作一定要放在<code>Vue.nextTick()</code>的回调函数中</li></ul><p>在<code>created()</code>钩子函数执行的时候DOM 其实并未进行任何渲染，而此时进行DOM操作无异于徒劳，所以此处一定要将DOM操作的js代码放进<code>Vue.nextTick()</code>的回调函数中。与之对应的就是<code>mounted()</code>钩子函数，因为该钩子函数执行时所有的DOM挂载和渲染都已完成，此时在该钩子函数中进行任何DOM操作都不会有问题 。</p><ul><li>在数据变化后要执行的某个操作，而这个操作需要使用随数据改变而改变的DOM结构的时候，这个操作都应该放进<code>Vue.nextTick()</code>的回调函数中。</li></ul><p>具体原因在Vue的官方文档中详细解释:</p><blockquote><p>Vue 异步执行 DOM 更新。只要观察到数据变化，Vue 将开启一个队列，并缓冲在同一事件循环中发生的所有数据改变。如果同一个 watcher 被多次触发，只会被推入到队列中一次。这种在缓冲时去除重复数据对于避免不必要的计算和 DOM 操作上非常重要。然后，在下一个的事件循环“tick”中，Vue 刷新队列并执行实际 (已去重的) 工作。Vue 在内部尝试对异步队列使用原生的 <code>Promise.then</code> 和<code>MessageChannel</code>，如果执行环境不支持，会采用 <code>setTimeout(fn, 0)</code>代替。<br>例如，当你设置<code>vm.someData = &#39;new value&#39;</code>，该组件不会立即重新渲染。当刷新队列时，组件会在事件循环队列清空时的下一个“tick”更新。多数情况我们不需要关心这个过程，但是如果你想在 DOM 状态更新后做点什么，这就可能会有些棘手。虽然 Vue.js 通常鼓励开发人员沿着“数据驱动”的方式思考，避免直接接触 DOM，但是有时我们确实要这么做。为了在数据变化之后等待 Vue 完成更新 DOM ，可以在数据变化之后立即使用<code>Vue.nextTick(callback)</code> 。这样回调函数在 DOM 更新完成后就会调用。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Vue基础入门笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue基础入门笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>9 全局api- Vue.extend</title>
      <link href="/2019/05/15/Vue.js%202.0%20%E6%89%8B%E6%8A%8A%E6%89%8B%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/9%20%E5%85%A8%E5%B1%80api-%20Vue.extend/"/>
      <url>/2019/05/15/Vue.js%202.0%20%E6%89%8B%E6%8A%8A%E6%89%8B%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/9%20%E5%85%A8%E5%B1%80api-%20Vue.extend/</url>
      
        <content type="html"><![CDATA[<blockquote><p>使用基础 Vue 构造器，创建一个“子类”。参数是一个包含组件选项的对象。</p></blockquote><p><code>data</code> 选项是特例，需要注意 - 在 <code>Vue.extend()</code> 中它必须是函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"mount-point"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建构造器</span></span><br><span class="line"><span class="keyword">var</span> demo = Vue.extend(&#123;</span><br><span class="line">  template: <span class="string">'&lt;p&gt;&#123;&#123;firstName&#125;&#125; &#123;&#123;lastName&#125;&#125; aka &#123;&#123;alias&#125;&#125;&lt;/p&gt;'</span>,</span><br><span class="line">  data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      firstName: <span class="string">'Walter'</span>,</span><br><span class="line">      lastName: <span class="string">'White'</span>,</span><br><span class="line">      alias: <span class="string">'Heisenberg'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 Profile 实例，并挂载到一个元素上。</span></span><br><span class="line"><span class="keyword">new</span> demo().$mount(<span class="string">'#mount-point'</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue基础入门笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue基础入门笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8 组件化管理</title>
      <link href="/2019/05/15/Vue.js%202.0%20%E6%89%8B%E6%8A%8A%E6%89%8B%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/8%20%E7%BB%84%E4%BB%B6%E5%8C%96%E7%AE%A1%E7%90%86/"/>
      <url>/2019/05/15/Vue.js%202.0%20%E6%89%8B%E6%8A%8A%E6%89%8B%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/8%20%E7%BB%84%E4%BB%B6%E5%8C%96%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="组件化开发"><a href="#组件化开发" class="headerlink" title="组件化开发"></a>组件化开发</h2><p>我们可以很直观的将一个复杂的页面分割成若干个独立组件，每个组件包含组件的逻辑和样式,再将这些独立组件完成一个复杂的页面。这样既减少了逻辑复杂度，又实现了代码的重用。页面是组件的容器，组件自动组合形成完整的界面，当不需要某个组件时，或者想要替换某个组件时，可以随时进行替换和删除，而不影响整个应用的运行。</p><h2 id="组件化开发的好处"><a href="#组件化开发的好处" class="headerlink" title="组件化开发的好处"></a>组件化开发的好处</h2><ul><li>提高开发效率</li><li>方便重复使用</li><li>便于协同开发</li><li>更容易被管理和维护<blockquote><p>在vue中例如div、span都可以看做一个组件</p></blockquote></li></ul><h2 id="全局组件"><a href="#全局组件" class="headerlink" title="全局组件"></a>全局组件</h2><ul><li>全局组件:可以声明一次在任何地方使用</li><li>局部组件:必须告诉这个组件属于谁<blockquote><p>一般写插件的时候全局组件使用的多一些</p></blockquote></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>vue<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">my-handsom</span>&gt;</span><span class="tag">&lt;/<span class="name">my-handsom</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">my-handsom</span>&gt;</span><span class="tag">&lt;/<span class="name">my-handsom</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">my-handsom</span>&gt;</span><span class="tag">&lt;/<span class="name">my-handsom</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">"my-handsom"</span>,&#123; <span class="comment">//一个对象可以看成一个组件</span></span></span><br><span class="line"><span class="javascript">        data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line">                count: 0</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"><span class="xml">        template: '<span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"count++"</span>&gt;</span>You clicked me &#123;&#123; count &#125;&#125; times.<span class="tag">&lt;/<span class="name">button</span>&gt;</span>'</span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">'#app'</span></span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1557990842093-31a2fc67-2b34-4875-9e5e-6f40c039058f.png#align=left&display=inline&height=51&name=image.png&originHeight=102&originWidth=1000&size=8240&status=done&width=500" alt="image.png"></p><ul><li>组件名不要带大写，多组件使用 - </li><li>只要组件和定义相同是可以的(首字母可以大写)</li><li>html采用短横线隔开命名法js中转驼峰也是可以的</li></ul><h2 id="深入了解组件"><a href="#深入了解组件" class="headerlink" title="深入了解组件"></a>深入了解组件</h2><p>props</p><blockquote><p>组件的参数传递</p></blockquote><p>slot</p><blockquote><p>插槽在组件抽象设计中的应用</p></blockquote><p>自定义事件</p><blockquote><p>父子组件的通信方式</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Vue基础入门笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue基础入门笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7 缩写</title>
      <link href="/2019/05/15/Vue.js%202.0%20%E6%89%8B%E6%8A%8A%E6%89%8B%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/7%20%E7%BC%A9%E5%86%99/"/>
      <url>/2019/05/15/Vue.js%202.0%20%E6%89%8B%E6%8A%8A%E6%89%8B%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/7%20%E7%BC%A9%E5%86%99/</url>
      
        <content type="html"><![CDATA[<h2 id="指令缩写"><a href="#指令缩写" class="headerlink" title="指令缩写"></a>指令缩写</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">'url'</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">'url'</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click</span>=<span class="string">'doSomething'</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> @<span class="attr">click</span>=<span class="string">'doSomething'</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="函数缩写"><a href="#函数缩写" class="headerlink" title="函数缩写"></a>函数缩写</h2><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1557915661508-3c134c58-c38e-4bd7-8e41-203138fe8e1f.png#align=left&display=inline&height=217&name=image.png&originHeight=434&originWidth=632&size=42037&status=done&width=316" alt="image.png"></p><p>缩写后</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1557915699900-9157d69f-b559-4213-b7f2-59cbb14c363d.png#align=left&display=inline&height=215&name=image.png&originHeight=430&originWidth=480&size=37018&status=done&width=240" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> Vue基础入门笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue基础入门笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6 事件修饰符的使用</title>
      <link href="/2019/05/15/Vue.js%202.0%20%E6%89%8B%E6%8A%8A%E6%89%8B%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/6%20%E4%BA%8B%E4%BB%B6%E4%BF%AE%E9%A5%B0%E7%AC%A6%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/05/15/Vue.js%202.0%20%E6%89%8B%E6%8A%8A%E6%89%8B%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/6%20%E4%BA%8B%E4%BB%B6%E4%BF%AE%E9%A5%B0%E7%AC%A6%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h2><pre><code>如果需要在内联语句处理器中访问原生DOM事件。可以使用特殊变量`$event`，把它传入到`methods`中的方法中。&lt;br /&gt;     在Vue中，**事件修饰符**处理了许多DOM事件的细节，让我们不再需要花大量的时间去处理这些烦恼的事情，而能有更多的精力专注于程序的逻辑处理。在Vue中事件修饰符主要有：</code></pre><ul><li><strong><code>.stop</code></strong>：等同于JavaScript中的<code>event.stopPropagation()</code>，防止事件冒泡</li><li><strong><code>.prevent</code></strong>：等同于JavaScript中的<code>event.preventDefault()</code>，防止执行预设的行为（如果事件可取消，则取消该事件，而不停止事件的进一步传播）</li><li><strong><code>.capture</code></strong>：与事件冒泡的方向相反，事件捕获由外到内</li><li><strong><code>.self</code></strong>：只会触发自己范围内的事件，不包含子元素</li><li><strong><code>.once</code></strong>：只会触发一次</li></ul><h3 id="stop-防止事件冒泡"><a href="#stop-防止事件冒泡" class="headerlink" title="stop 防止事件冒泡"></a>stop 防止事件冒泡</h3><p>冒泡事件：嵌套两三层父子关系，然后所有都有点击事件，点击子节点，就会触发从内至外  子节点-》父节点的点击事件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- HTML --&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span> </span><br><span class="line"> 　<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"outeer"</span> @<span class="attr">click</span>=<span class="string">"outer"</span>&gt;</span> </span><br><span class="line">   　<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"middle"</span> @<span class="attr">click</span>=<span class="string">"middle"</span>&gt;</span> </span><br><span class="line">     　<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"inner"</span>&gt;</span>点击我(^_^)<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"> 　<span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> let app = new Vue(&#123;</span><br><span class="line"> el: '#app', </span><br><span class="line">   data () &#123; </span><br><span class="line">   　return &#123; message: '测试冒泡事件' &#125; </span><br><span class="line">   &#125;, </span><br><span class="line"> 　methods: &#123; </span><br><span class="line">   　inner: function () &#123;</span><br><span class="line">       this.message = 'inner： 这是最里面的Button' </span><br><span class="line">   　&#125;, </span><br><span class="line">   　middle: function () &#123; </span><br><span class="line">     　this.message = 'middle: 这是中间的Div' </span><br><span class="line">   　&#125;, </span><br><span class="line">   　outer: function () &#123; </span><br><span class="line">     　this.message = 'outer: 这是外面的Div' </span><br><span class="line">   　&#125; </span><br><span class="line"> 　&#125; </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>防止冒泡事件的写法是：在点击上加上.stop相当于在每个方法中调用了等同于<code>event.stopPropagation()，点击子节点不会捕获到父节点的事件</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- HTML --&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"> 　<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"outeer"</span> @<span class="attr">click.stop</span>=<span class="string">"outer"</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">   　<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"middle"</span> @<span class="attr">click.stop</span>=<span class="string">"middle"</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">     　<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.stop</span>=<span class="string">"inner"</span>&gt;</span>点击我(^_^)<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="prevent取消默认事件"><a href="#prevent取消默认事件" class="headerlink" title="prevent取消默认事件"></a>prevent取消默认事件</h3><p><code>.prevent</code>等同于JavaScript的<code>event.preventDefault()</code>，用于取消默认事件。比如我们页面的<code>&lt;a href=&quot;#&quot;&gt;</code>标签，当用户点击时，通常在浏览器的网址列出<code>#</code>：</p><h3 id="capture-捕获事件"><a href="#capture-捕获事件" class="headerlink" title="capture 捕获事件"></a>capture 捕获事件</h3><p>捕获事件：嵌套两三层父子关系，然后所有都有点击事件，点击子节点，就会触发从外至内  父节点-》子节点的点击事件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- HTML --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span> </span><br><span class="line"> 　<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"outeer"</span> @<span class="attr">click.capture</span>=<span class="string">"outer"</span>&gt;</span> </span><br><span class="line">   　<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"middle"</span> @<span class="attr">click.capture</span>=<span class="string">"middle"</span>&gt;</span> </span><br><span class="line">     　<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.capture</span>=<span class="string">"inner"</span>&gt;</span>点击我(^_^)<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1557851264115-7cdc1f46-c901-4cb5-9cd3-761fcdc6112e.png#align=left&display=inline&height=535&originHeight=535&originWidth=849&size=0&status=done&width=849" alt><br> </p><h3 id="self"><a href="#self" class="headerlink" title="self"></a>self</h3><p>修饰符<code>.self</code>只会触发自己范围内的事件，不会包含子元素。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- HTML --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span> </span><br><span class="line"> 　<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"outeer"</span> @<span class="attr">click.self</span>=<span class="string">"outer"</span>&gt;</span> </span><br><span class="line">   　<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"middle"</span> @<span class="attr">click.self</span>=<span class="string">"middle"</span>&gt;</span> </span><br><span class="line">     　<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.stop</span>=<span class="string">"inner"</span>&gt;</span>点击我(^_^)<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2019/gif/271124/1557851264030-621e230d-c896-4634-a3df-21979e169c41.gif#align=left&display=inline&height=425&originHeight=425&originWidth=864&size=0&status=done&width=864" alt></p><h3 id="once-只执行一次点击"><a href="#once-只执行一次点击" class="headerlink" title="once 只执行一次点击"></a>once 只执行一次点击</h3><p>如果我们在<code>@click</code>事件上添加<code>.once</code>修饰符，只要点击按钮只会执行一次。</p><h2 id="键盘修饰符"><a href="#键盘修饰符" class="headerlink" title="键盘修饰符"></a>键盘修饰符</h2><p>在JavaScript事件中除了前面所说的事件，还有键盘事件，也经常需要监测常见的键值。在Vue中允许<code>v-on</code>在监听键盘事件时添加关键修饰符。记住所有的<code>keyCode</code>比较困难，所以Vue为最常用的键盘事件提供了别名：</p><ul><li><strong><code>.enter</code></strong>：回车键</li><li><strong><code>.tab</code></strong>：制表键</li><li><strong><code>.delete</code></strong>：含<code>delete</code>和<code>backspace</code>键</li><li><strong><code>.esc</code></strong>：返回键</li><li><strong><code>.space</code></strong>: 空格键</li><li><strong><code>.up</code></strong>：向上键</li><li><strong><code>.down</code></strong>：向下键</li><li><strong><code>.left</code></strong>：向左键</li><li><strong><code>.right</code></strong>：向右键</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1557851264107-206a09c2-d3e3-4bb7-95c1-4af67ab40d70.png#align=left&display=inline&height=305&originHeight=305&originWidth=942&size=0&status=done&width=942" alt></p><h2 id="3-鼠标修饰符"><a href="#3-鼠标修饰符" class="headerlink" title="3 鼠标修饰符"></a>3 鼠标修饰符</h2><p>鼠标修饰符用来限制处理程序监听特定的滑鼠按键。常见的有：</p><ul><li><strong><code>.left</code></strong>：鼠标左键</li><li><strong><code>.middle</code></strong>：鼠标中间滚轮</li><li><strong><code>.right</code></strong>：鼠标右键</li></ul><h2 id="4-修饰键"><a href="#4-修饰键" class="headerlink" title="4 修饰键"></a>4 修饰键</h2><p>可以用如下修饰符开启鼠标或键盘事件监听，使在按键按下时发生响应：</p><ul><li><strong><code>.ctrl</code></strong></li><li><strong><code>.alt</code></strong></li><li><strong><code>.shift</code></strong></li><li><strong><code>.meta</code></strong></li></ul><h2 id="5-自定义按键修饰符别名"><a href="#5-自定义按键修饰符别名" class="headerlink" title="5 自定义按键修饰符别名"></a>5 自定义按键修饰符别名</h2><p>在Vue中可以通过<code>config.keyCodes</code>自定义按键修饰符别名。例如，由于预先定义了<code>keycode 116</code>（即<code>F5</code>）的别名为<code>f5</code>，因此在文字输入框中按下<code>F5</code>，会触发<code>prompt</code>方法，出现<code>alert</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- HTML --&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;input type=&quot;text&quot; v-on:keydown.f5=&quot;prompt()&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Vue.config.keyCodes.f5 = 116;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">let app = new Vue(&#123;</span><br><span class="line"></span><br><span class="line">    el: &apos;#app&apos;,</span><br><span class="line"></span><br><span class="line">    methods: &#123;</span><br><span class="line"></span><br><span class="line">        prompt: function() &#123;</span><br><span class="line"></span><br><span class="line">            alert(&apos;我是 F5！&apos;);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="6-总结"><a href="#6-总结" class="headerlink" title="6 总结"></a>6 总结</h2><p>在Vue中，使用<code>v-on</code>来给元素绑定事件，而为了更好的处理逻辑方面的事物，Vue提供了一个<code>methods</code>。在<code>methods</code>中定义一些方法，这些方法可以帮助我们处理一些逻辑方面的事情。而在这篇文章中，我们主要介绍了一些事件的修饰符，比如常见的阻止事件冒泡，键盘修饰符等。除此之外，还提供了<code>config.keyCodes</code>提供自定义按键修饰符别名。</p>]]></content>
      
      
      <categories>
          
          <category> Vue基础入门笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue基础入门笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5 事件</title>
      <link href="/2019/05/15/Vue.js%202.0%20%E6%89%8B%E6%8A%8A%E6%89%8B%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/5%20%E4%BA%8B%E4%BB%B6/"/>
      <url>/2019/05/15/Vue.js%202.0%20%E6%89%8B%E6%8A%8A%E6%89%8B%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/5%20%E4%BA%8B%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="定义-amp-缩写"><a href="#定义-amp-缩写" class="headerlink" title="定义&amp;缩写"></a>定义&amp;缩写</h2><blockquote><p>事件定义以及缩写</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"msg"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">mousedown</span>=<span class="string">"add"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--如果不传递参数，则不要写括号会自动传入事件源，如果写括号了，要手动传入$event属性--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">let vm = new Vue(&#123;</span><br><span class="line">el:"#app",</span><br><span class="line">    methods:&#123;</span><br><span class="line">    msg()&#123;</span><br><span class="line">        console.log(Math.random());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>methods和data中的数据会全部放在vm上，而且名字不能冲突，冲突会报错，methods中的this指向的都是实例</p></blockquote><h2 id="mousedown"><a href="#mousedown" class="headerlink" title="mousedown"></a>mousedown</h2><p>当鼠标指针移动到元素上方，并按下鼠标按键（左、右键均可）时，会发生 mousedown 事件。<br>与 click 事件不同，mousedown 事件仅需要按键被按下，而不需要松开即可发生。</p><h2 id="mouseup"><a href="#mouseup" class="headerlink" title="mouseup"></a>mouseup</h2><p>当在元素上松开鼠标按键（左、右键均可）时，会发生 mouseup 事件。<br>与 click 事件不同，mouseup 事件仅需要松开按钮。当鼠标指针位于元素上方时，放松鼠标按钮就会触发该事件。</p><h2 id="click"><a href="#click" class="headerlink" title="click"></a>click</h2><p>当鼠标指针停留在元素上方，然后按下并松开鼠标左键时，就会发生一次 click 事件。<br>注意：触发click事件的条件是按下并松开鼠标左键！，按下并松开鼠标右键并不会触发click事件。<br>三个事件的触发顺序</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>若在同一个元素上按下并松开鼠标左键，会依次触发mousedown、mouseup、click，前一个事件执行完毕才会执行下一个事件<br>若在同一个元素上按下并松开鼠标右键，会依次触发mousedown、mouseup，前一个事件执行完毕才会执行下一个事件，不会触发click事件</p>]]></content>
      
      
      <categories>
          
          <category> Vue基础入门笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue基础入门笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4 数组的循环v-for</title>
      <link href="/2019/05/15/Vue.js%202.0%20%E6%89%8B%E6%8A%8A%E6%89%8B%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/4%20%E6%95%B0%E7%BB%84%E7%9A%84%E5%BE%AA%E7%8E%AFv-for/"/>
      <url>/2019/05/15/Vue.js%202.0%20%E6%89%8B%E6%8A%8A%E6%89%8B%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/4%20%E6%95%B0%E7%BB%84%E7%9A%84%E5%BE%AA%E7%8E%AFv-for/</url>
      
        <content type="html"><![CDATA[<blockquote><p>vue 提供了一个v-for 解决循环问题 更高效 会复用原有结构</p></blockquote><h2 id="4-1-代码"><a href="#4-1-代码" class="headerlink" title="4.1 代码"></a>4.1 代码</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>vue<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--要循环谁就在谁身上增加v-for属性,类似于for...in..--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--默认是value of 数组/ (value,index) of 数组--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(todo,index) in todos"</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 会改变原始数组的方法，为变异方法 例如push(),pop()等；  非变异方法，不会改变原始数组，但是会返回一个新数组 --&gt;</span></span><br><span class="line">            &#123;&#123; todo.text &#125;&#125; &#123;&#123;index+1&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line"><span class="comment">&lt;!-- 使用官网的vue地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el:<span class="string">'#content'</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line">            todos: [</span><br><span class="line"><span class="javascript">                &#123; <span class="attr">text</span>: <span class="string">'学习 JavaScript'</span> &#125;,</span></span><br><span class="line"><span class="javascript">                &#123; <span class="attr">text</span>: <span class="string">'学习 Vue'</span> &#125;,</span></span><br><span class="line"><span class="javascript">                &#123; <span class="attr">text</span>: <span class="string">'整个牛项目'</span> &#125;</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>v-for循环数组 当用for来更新已被渲染的元素时，vue的“就地复用”机制 是不会改变数据项的顺序的。要想重新排序，需为每项添加key属性（也就是每项唯一的id）</p><blockquote><p>想要改变</p></blockquote><p>会改变原始数组的方法，为变异方法 例如push(),pop()等；  非变异方法，不会改变原始数组，但是会返回一个新数组</p><h2 id="4-2-为什么v-for一定要有key"><a href="#4-2-为什么v-for一定要有key" class="headerlink" title="4.2 为什么v-for一定要有key"></a>4.2 为什么v-for一定要有key</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>vue<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"name"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"add"</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(item, i) in list"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>&gt;</span> &#123;&#123;item.name&#125;&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line"><span class="comment">&lt;!-- 使用官网的vue地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 创建 Vue 实例，得到 ViewModel</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="javascript">        name: <span class="string">''</span>,</span></span><br><span class="line">        newId: 3,</span><br><span class="line">        list: [</span><br><span class="line"><span class="javascript">          &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">'蔬菜'</span> &#125;,</span></span><br><span class="line"><span class="javascript">          &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">'奶酪'</span> &#125;,</span></span><br><span class="line"><span class="javascript">          &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">'肉'</span> &#125;</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        add() &#123;</span><br><span class="line"><span class="javascript">         <span class="comment">//注意这里是unshift</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.list.unshift(&#123; <span class="attr">id</span>: ++<span class="keyword">this</span>.newId, <span class="attr">name</span>: <span class="keyword">this</span>.name &#125;)</span></span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.name = <span class="string">''</span></span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1557848419774-252c5099-6dab-4351-b4c8-0f421d329738.png#align=left&display=inline&height=124&name=image.png&originHeight=248&originWidth=452&size=14182&status=done&width=226" alt="image.png"></p><p>当你输入汤时</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1557848450787-196c3b5c-0dce-43e3-b6d9-d1fb8025790f.png#align=left&display=inline&height=117&name=image.png&originHeight=234&originWidth=396&size=14428&status=done&width=198" alt="image.png"></p><p>就会变成这个样子  =&gt; </p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1557848474048-a6753a52-c13d-4159-9079-5b9e2ab01419.png#align=left&display=inline&height=146&name=image.png&originHeight=292&originWidth=436&size=41906&status=done&width=218" alt="image.png"></p><blockquote><p>但是当你换成了key</p></blockquote><blockquote><p>可以简单的这样理解：加了key(一定要具有唯一性) id的checkbox跟内容进行了一个关联。是我们想达到的效果 </p></blockquote><p>vue和react的虚拟DOM的Diff算法大致相同，其核心是基于两个简单的假设<br>首先讲一下diff算法的处理方法，对操作前后的dom树同一层的节点进行对比，一层一层对比，如下图：</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1557848744900-ea161cb7-2389-4531-b837-f973dfb63e0c.png#align=left&display=inline&height=318&name=image.png&originHeight=318&originWidth=576&size=40043&status=done&width=576" alt="image.png"><br>当某一层有很多相同的节点时，也就是列表节点时，Diff算法的更新过程默认情况下也是遵循以上原则。<br>比如一下这个情况：<br><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1557848773830-6c12c8a7-8fb7-40f5-845f-155e6db6fa00.png#align=left&display=inline&height=191&name=image.png&originHeight=191&originWidth=477&size=32966&status=done&width=477" alt="image.png"><br>我们希望可以在B和C之间加一个F，Diff算法默认执行起来是这样的：<br><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1557848802730-b07a12c6-76f3-4ea1-9175-0031d6b206f2.png#align=left&display=inline&height=215&name=image.png&originHeight=215&originWidth=572&size=54921&status=done&width=572" alt="image.png"></p><p>即把C更新成F，D更新成C，E更新成D，最后再插入E，是不是很没有效率？<br>所以我们需要使用key来给每个节点做一个唯一标识，Diff算法就可以正确的识别此节点，找到正确的位置区插入新的节点。<br><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1557848842519-638c879e-7617-4697-9b8a-3d87dfacc524.png#align=left&display=inline&height=130&name=image.png&originHeight=130&originWidth=452&size=43650&status=done&width=452" alt="image.png"></p><p>vue中列表循环需加:key=”唯一标识” 唯一标识可以是item里面id index等，因为vue组件高度复用增加Key可以标识组件的唯一性，为了更好地区别各个组件 key的作用主要是为了高效的更新虚拟DOM</p>]]></content>
      
      
      <categories>
          
          <category> Vue基础入门笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue基础入门笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3 数据响应的变化</title>
      <link href="/2019/05/15/Vue.js%202.0%20%E6%89%8B%E6%8A%8A%E6%89%8B%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/3%20%E6%95%B0%E6%8D%AE%E5%93%8D%E5%BA%94%E7%9A%84%E5%8F%98%E5%8C%96/"/>
      <url>/2019/05/15/Vue.js%202.0%20%E6%89%8B%E6%8A%8A%E6%89%8B%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/3%20%E6%95%B0%E6%8D%AE%E5%93%8D%E5%BA%94%E7%9A%84%E5%8F%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<blockquote><p>vue会循环data中的数据(数据劫持) 依次的增加getter和setter</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el:<span class="string">'#content'</span>,</span><br><span class="line">  data:&#123;</span><br><span class="line">    a:&#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>但是这时候我想添加一个school方法，发现没有产生getter和setter</p><h2 id="方法一-set"><a href="#方法一-set" class="headerlink" title="方法一 $set"></a>方法一 $set</h2><blockquote><p>使用变量时 先要初始化，否则新加的属性不会导致页面刷新 </p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vm.$<span class="keyword">set</span>(vm.a,"school",'1')// 此方法可以给对象添加响应式的变化</span><br></pre></td></tr></table></figure><h2 id="方法二-替换原对象"><a href="#方法二-替换原对象" class="headerlink" title="方法二 替换原对象"></a>方法二 替换原对象</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vm.a = &#123;<span class="string">"school"</span>:<span class="string">"heihei"</span>,<span class="attr">age</span>:<span class="number">8</span>&#125;;</span><br></pre></td></tr></table></figure><h2 id="数组问题"><a href="#数组问题" class="headerlink" title="数组问题"></a>数组问题</h2><blockquote><p>去改变数组中的某一项监控不到的，也不能改变数组的长度方法</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el:<span class="string">'#content'</span>,</span><br><span class="line">  data:&#123;</span><br><span class="line">    a:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>错误方法</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vm.a[<span class="number">0</span>] =<span class="number">100</span></span><br><span class="line">vm.a.length -=<span class="number">2</span></span><br></pre></td></tr></table></figure><blockquote><p>变异方法:pop push shift unshit sort reserve splice</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vm.a = vm.a.map(<span class="function"><span class="params">item</span>=&gt;</span>item*<span class="number">3</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue基础入门笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue基础入门笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2 vue基础指令</title>
      <link href="/2019/05/15/Vue.js%202.0%20%E6%89%8B%E6%8A%8A%E6%89%8B%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/2%20vue%E5%9F%BA%E7%A1%80%E6%8C%87%E4%BB%A4/"/>
      <url>/2019/05/15/Vue.js%202.0%20%E6%89%8B%E6%8A%8A%E6%89%8B%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/2%20vue%E5%9F%BA%E7%A1%80%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="安装vue"><a href="#安装vue" class="headerlink" title="安装vue"></a>安装vue</h2><ul><li><p>cnd方式</p><blockquote><script src="https://cdn.jsdelivr.net/npm/vue"></script></blockquote></li><li><p>npm 方式</p></li></ul><h2 id="简单的尝试"><a href="#简单的尝试" class="headerlink" title="简单的尝试"></a>简单的尝试</h2><blockquote><p>这里使用cnd方便测试</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>vue<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- moustache 小胡子语法 表达式 可以放赋值 取值 三元--&gt;</span></span><br><span class="line">        &#123;&#123; msg &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line"><span class="comment">&lt;!-- 使用官网的vue地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 引用vue后会给一个vue构造函数</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123; <span class="comment">// vm === viewModel</span></span></span><br><span class="line"><span class="javascript">        el: <span class="string">'#content'</span>, <span class="comment">// 告诉vue管理哪一部分,querySelector "document.querySelector("#content")"</span></span></span><br><span class="line"><span class="javascript">        data: &#123; <span class="comment">// data中的数据会被vm所代理</span></span></span><br><span class="line"><span class="javascript">            msg: <span class="string">'Hello Vue!'</span> <span class="comment">// 可以通过vm.msg获取对应的呢日用</span></span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">    &#125;)<span class="comment">// Object.defineProperty</span></span></span><br><span class="line"><span class="javascript">    vm.msg = <span class="string">"wjw"</span> <span class="comment">// 修改视图</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1557821762435-5cc94d74-2309-4460-a66c-b42718784e2f.png#align=left&display=inline&height=396&name=image.png&originHeight=244&originWidth=460&size=38937&status=done&width=746" alt="image.png"></p><h2 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h2><blockquote><p>综上所属得出了一套模板语法</p></blockquote><h3 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>Message:&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;number + 1&#125;&#125;</span><br><span class="line">&#123;&#123;ok?&apos;YES&apos;:&apos;NO&apos;&#125;&#125;</span><br><span class="line">&#123;&#123;message.split(&apos;&apos;).reverse().join(&apos;&apos;)&#125;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>但是vue的表单元素 input checkbox textarea radio select 非文本处理</p><p>vue的指令 directive 只是dom上的行间属性，vue给这类属性赋予了一些意义，来实现特殊功能所有指令都以v-开头value属性默认情况下回vue忽略掉 selected checked 都没有意义</p></blockquote><h3 id="表单输入"><a href="#表单输入" class="headerlink" title="表单输入"></a>表单输入</h3><blockquote><p>v-model 会将msg赋予输入框，输入框的值改变会影响数据</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"msg"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">v-model</span>=<span class="string">"msg1"</span> <span class="attr">value</span>=<span class="string">"爬山"</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="原始HTML"><a href="#原始HTML" class="headerlink" title="原始HTML"></a>原始HTML</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Using mustache:<span class="tag">&lt;<span class="name">span</span> <span class="attr">v-html</span>=<span class="string">'rawHtml'</span>&gt;</span><span class="tag">&lt;/<span class="name">spn</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">'seen'</span>&gt;</span>现在看到我了<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:id</span>=<span class="string">'dynamicld'</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Object-defineProperty原理"><a href="#Object-defineProperty原理" class="headerlink" title="Object.defineProperty原理"></a>Object.defineProperty原理</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>vue<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"content"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"input"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> obj = &#123;&#125;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> temp = &#123;&#125;;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">"content"</span>).innerHTML = obj.name</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 'name' 代表属性</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">Object</span>.defineProperty(obj,<span class="string">'name'</span>,&#123;</span></span><br><span class="line"><span class="javascript">        configurable:<span class="literal">false</span>, <span class="comment">//是否可删除</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// writable:true,// 是否可赋值(如果使用set方法,则不能使用)</span></span></span><br><span class="line"><span class="javascript">        enumerable:<span class="literal">true</span>, <span class="comment">// 是否可枚举,也是就for..in..</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// value:1,// 值(如果使用get方法,则不能使用)</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">get</span>()&#123; <span class="comment">// 取obj的name会触发get方法</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> temp[<span class="string">'name'</span>]</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="keyword">set</span>(val)&#123;<span class="comment">// 给obj赋值会触发get方法</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// console.log(val);</span></span></span><br><span class="line"><span class="javascript">            temp[<span class="string">'name'</span>] = val <span class="comment">// 改变temp的结果</span></span></span><br><span class="line"><span class="javascript">            input.value = val <span class="comment">// 将值赋值给输入框</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="javascript">    input.value = obj.name <span class="comment">// 页面一加载，会将调用get方法</span></span></span><br><span class="line"><span class="javascript">    input.addEventListener(<span class="string">'input'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">// 等待输入框的变化</span></span></span><br><span class="line"><span class="javascript">        obj.name = <span class="keyword">this</span>.value <span class="comment">// 当值变化时会调用set方法</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">"content"</span>).innerHTML = obj.name</span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1557825100635-9c7ad9d3-7424-4a48-be61-a27143c1c421.png#align=left&display=inline&height=53&name=image.png&originHeight=106&originWidth=334&size=4802&status=done&width=167" alt="image.png"></p><p>最后可以实现双向绑定的雏形</p>]]></content>
      
      
      <categories>
          
          <category> Vue基础入门笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue基础入门笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1 vue介绍</title>
      <link href="/2019/05/15/Vue.js%202.0%20%E6%89%8B%E6%8A%8A%E6%89%8B%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/1%20vue%E4%BB%8B%E7%BB%8D/"/>
      <url>/2019/05/15/Vue.js%202.0%20%E6%89%8B%E6%8A%8A%E6%89%8B%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/1%20vue%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<h2 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1 介绍"></a>1 介绍</h2><blockquote><p>是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。</p></blockquote><p><a name="fGMqx"></a></p><h2 id="特点"><a href="#特点" class="headerlink" title="特点:"></a>特点:</h2><ul><li>核心只关注视图层(view)</li><li>灵活、轻量、灵活的特点</li><li>适用于移动端项目</li><li>渐进式框架</li></ul><p><a name="bSkNB"></a></p><h2 id="什么是库，什么是框架？"><a href="#什么是库，什么是框架？" class="headerlink" title="什么是库，什么是框架？"></a>什么是库，什么是框架？</h2><ul><li>库是将代码集合成一个产品，库是我们调用库中的方法实现自己的功能</li><li>框架则是为解决一类问题而开发的产品，框架是我们在指定的位置编写代码，框架帮我们调用。</li></ul><blockquote><p>框架是库的升级版</p></blockquote><p><a name="vWDCy"></a></p><h2 id="渐进式"><a href="#渐进式" class="headerlink" title="渐进式"></a>渐进式</h2><ul><li>声明式渲染(无需关心如何实现)</li><li>组件系统</li><li>客户端路由(vue-router)</li><li>大规模状态管理(vuex)</li><li>构建工具(vue-cli)</li></ul><p><a name="VD6t3"></a></p><h2 id="Vue的两个核心点"><a href="#Vue的两个核心点" class="headerlink" title="Vue的两个核心点"></a>Vue的两个核心点</h2><ol><li>响应的数据变化<ol><li>当数据发生改变-&gt;视图的自动更新</li></ol></li><li>组合的视图组件<ol><li>ui页面映射为组件树</li><li>划分组件可维护、可复用、可测试<br><a name="GHpTU"></a><br>##<br><a name="NjiBB"></a><h2 id="MVC-backbone-react"><a href="#MVC-backbone-react" class="headerlink" title="MVC(backbone,react)"></a>MVC(backbone,react)</h2></li></ol></li></ol><ul><li>model 数据</li><li>view  视图</li><li>controller 控制器</li></ul><p><a name="Ze24R"></a></p><h2 id="MVVM-angular-vue-双向"><a href="#MVVM-angular-vue-双向" class="headerlink" title="MVVM(angular,vue) 双向"></a>MVVM(angular,vue) 双向</h2><ul><li>model 数据</li><li>view  视图</li><li>viewModel视图模型</li></ul><p><a name="xOTe8"></a></p><h2 id="Object-defineProperty-es5-没有替代方案"><a href="#Object-defineProperty-es5-没有替代方案" class="headerlink" title="Object.defineProperty(es5)没有替代方案"></a>Object.defineProperty(es5)没有替代方案</h2><ul><li>不支持ie8&lt;=</li></ul>]]></content>
      
      
      <categories>
          
          <category> Vue基础入门笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue基础入门笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>异步处理</title>
      <link href="/2019/05/13/JavaScript%20%7C%20%E5%BC%82%E6%AD%A5%E5%A4%84%E7%90%86/JavaScript%20%7C%20%E5%BC%82%E6%AD%A5%E5%A4%84%E7%90%86/"/>
      <url>/2019/05/13/JavaScript%20%7C%20%E5%BC%82%E6%AD%A5%E5%A4%84%E7%90%86/JavaScript%20%7C%20%E5%BC%82%E6%AD%A5%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h2><ul><li>所谓”异步”，简单说就是一个任务分成两段，先执行第一段，然后转而执行其他任务，等做好了准备，再回过头执行第二段,比如，有一个任务是读取文件进行处理，异步的执行过程就是下面这样。</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1557757262806-925ce8b5-4d7c-4cfd-bbad-bf55f6a1650e.png#align=left&display=inline&height=377&name=image.png&originHeight=754&originWidth=2010&size=464212&status=done&width=1005" alt="image.png"></p><p>这种不连续的执行，就叫做异步。相应地，连续的执行，就叫做同步。</p><h2 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h2><blockquote><p>函数作为一等公民,可以作为参数和返回值,也可以作为函数的参数</p></blockquote><h3 id="可以用于批量生成函数"><a href="#可以用于批量生成函数" class="headerlink" title="可以用于批量生成函数"></a>可以用于批量生成函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断一个参数是否是字符串</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isString</span>(<span class="params">param</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(param) == <span class="string">'[object String]'</span>;</span><br><span class="line">&#125;</span><br><span class="line">isString(<span class="number">123</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断一个参数是否是数组</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isArray</span>(<span class="params">param</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(param) == <span class="string">'[object Array]'</span>;</span><br><span class="line">&#125;</span><br><span class="line">isArray([]);</span><br></pre></td></tr></table></figure><blockquote><p>函数可以作为返回值</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isType</span>(<span class="params">type</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">param</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(param) == <span class="string">`[object <span class="subst">$&#123;type&#125;</span>]`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> isString = isType(<span class="string">'String'</span>);</span><br><span class="line"><span class="keyword">let</span> isArray = isType(<span class="string">'Array'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(isString(&#123;&#125;))</span><br><span class="line"><span class="built_in">console</span>.log(isArray([]))</span><br></pre></td></tr></table></figure><h3 id="可以用于需要调用多次才执行的函数"><a href="#可以用于需要调用多次才执行的函数" class="headerlink" title="可以用于需要调用多次才执行的函数"></a>可以用于需要调用多次才执行的函数</h3><blockquote><p>函数可以作为参数传到另外一个函数里面</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">eat</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"吃完了"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 让他执行几次才会执行</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">after</span>(<span class="params">times,fn</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(count++==times)&#123;</span><br><span class="line">       fn();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> newEat = after(<span class="number">3</span>,eat);</span><br><span class="line">newEat();</span><br><span class="line">newEat();</span><br><span class="line">newEat();</span><br></pre></td></tr></table></figure><h2 id="异步编程的语法目标，就是怎样让它更像同步编程-有以下几种"><a href="#异步编程的语法目标，就是怎样让它更像同步编程-有以下几种" class="headerlink" title="异步编程的语法目标，就是怎样让它更像同步编程,有以下几种"></a>异步编程的语法目标，就是怎样让它更像同步编程,有以下几种</h2><ul><li>回调函数实现</li><li>事件监听</li><li>发布订阅</li><li>Promise/A+ 和生成器函数</li><li>async/await</li></ul><h2 id="回调"><a href="#回调" class="headerlink" title="回调"></a>回调</h2><blockquote><p>比如我现在要读取一个文件，异步读取</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line">fs.readFile(<span class="string">'./1.txt'</span>,<span class="string">'utf8'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(err)&#123; <span class="comment">// 如果err有值，就表示程序出错</span></span><br><span class="line">  <span class="built_in">console</span>.log(err);</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123; <span class="comment">// 如果err为空就表示成功没有错误</span></span><br><span class="line">  <span class="built_in">console</span>.log(data);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>回调函数的问题</p><ol><li>无法捕捉错误 try catch return</li><li>不能return</li><li>回调地狱</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">read</span>(<span class="params">filename</span>)</span>&#123;</span><br><span class="line">fs.readFile(filename,<span class="string">'utf8'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123; <span class="comment">// 如果err有值，就表示程序出错</span></span><br><span class="line">      <span class="built_in">console</span>.log(err);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123; <span class="comment">// 如果err为空就表示成功没有错误</span></span><br><span class="line">      <span class="built_in">console</span>.log(data);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"> read(<span class="string">'1.txt'</span>);</span><br><span class="line">&#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">2</span>);</span><br></pre></td></tr></table></figure><blockquote><p>当你访问服务器的时候，比如请求一个html页面，比如用户列表。服务器一方面会去读取模板文件,可能是ejs、pug、jade、handlebar、另外一方面还要读取数据(可能会放在文件里，也可以会放在数据里)，它们都很慢，所以都是异步的.</p></blockquote><ul><li>这种写法很难看</li><li>非常难以维护</li><li>效率比较低,因为它是串行的 </li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fs.readFile(<span class="string">'./template.txt'</span>,<span class="string">'utf8'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,template</span>)</span>&#123;</span><br><span class="line">  fs.readFile(<span class="string">'./data.txt'</span>,<span class="string">'utf8'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(template+<span class="string">''</span>+data);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>如何解决这个回调嵌套的问题</p></blockquote><h2 id="异步流程解决方案"><a href="#异步流程解决方案" class="headerlink" title="异步流程解决方案"></a>异步流程解决方案</h2><h3 id="通过事件发布订阅来实现"><a href="#通过事件发布订阅来实现" class="headerlink" title="通过事件发布订阅来实现"></a>通过事件发布订阅来实现</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这node核心模块中一个类，通过它可以穿件时间发射器的实例，里面有两个核心方法</span></span><br><span class="line"><span class="comment">// 一个叫on emit,on表示注册监听，emit表示发射事件</span></span><br><span class="line"><span class="keyword">let</span> EventEmitter = <span class="built_in">require</span>(<span class="string">'events'</span>);</span><br><span class="line"><span class="keyword">let</span> eve = <span class="keyword">new</span> EventEmitter();</span><br><span class="line"><span class="comment">// 这个html对象是存放</span></span><br><span class="line"><span class="keyword">let</span> html = &#123;&#125;; <span class="comment">// template data</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听数据获取成功事件,当事件发生之后调用回调函数</span></span><br><span class="line">eve.on(<span class="string">'ready'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">key,value</span>)</span>&#123;</span><br><span class="line">html[key] = value;</span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">Object</span>.key(html).lenght==<span class="number">2</span>)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(html);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">fs.readFile(<span class="string">'./template.txt'</span>,<span class="string">'utf8'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,template</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 1事件名 2参数往后是传递给回调函数的参数</span></span><br><span class="line">eve.emit(<span class="string">'ready'</span>,<span class="string">'template'</span>,template);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">fs.readFile(<span class="string">'./data.txt'</span>,<span class="string">'utf8'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// </span></span><br><span class="line">eve.emit(<span class="string">'ready'</span>,<span class="string">'data'</span>,data);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="哨兵变量"><a href="#哨兵变量" class="headerlink" title="哨兵变量"></a>哨兵变量</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过一个哨兵来解决</span></span><br><span class="line"><span class="keyword">let</span> html = &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">done</span>(<span class="params">key,value</span>)</span>&#123;</span><br><span class="line">html[key]=value;</span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">Object</span>.keys(html).length===<span class="number">2</span>)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(html);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">fs.readFile(<span class="string">'./template.txt'</span>,<span class="string">'utf8'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,template</span>)</span>&#123;</span><br><span class="line">done(<span class="string">"template"</span>,data)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">fs.readFile(<span class="string">'./data.txt'</span>,<span class="string">'utf8'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line">done(<span class="string">"data"</span>,data)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过一个哨兵来解决</span></span><br><span class="line"><span class="keyword">let</span> html = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params">lenght,cb</span>)</span>&#123;</span><br><span class="line"><span class="keyword">let</span> html = &#123;&#125;;</span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">Object</span>.keys(html).length===lenght)&#123;</span><br><span class="line">  cb(html);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> done = render(<span class="number">2</span>,<span class="function"><span class="keyword">function</span>(<span class="params">html</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(html);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">fs.readFile(<span class="string">'./template.txt'</span>,<span class="string">'utf8'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,template</span>)</span>&#123;</span><br><span class="line">done(<span class="string">"template"</span>,data)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">fs.readFile(<span class="string">'./data.txt'</span>,<span class="string">'utf8'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line">done(<span class="string">"data"</span>,data)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="生成器Generators-yield"><a href="#生成器Generators-yield" class="headerlink" title="生成器Generators/ yield"></a>生成器Generators/ yield</h3><p>生成器是一个函数，可以用了生成迭代器<br>生成器函数和普通函数不一样，普通函数一旦调用一定会执行完<br>但是生成器函数中间可以展厅，可以执行一会歇一会</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1557331225522-7a607d4c-21c8-445b-b59b-5b81c7e26609.png#align=left&display=inline&height=152&name=image.png&originHeight=196&originWidth=594&size=66695&status=done&width=461" alt="image.png"></p><blockquote><p>生成器函数有一个特点，需要加个*生成器有若干个阶段，如何划分这些阶段呢<br>yield 定义通过迭代器协议从生成器函数返回的值。如果省略，则返回undefined。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> *<span class="title">go</span>(<span class="params">params</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 此处的b是提供外界输入进来</span></span><br><span class="line">        <span class="comment">// 这一行实现输入和输出，本次的输出放在yield后面，下次的输入放在yield前面</span></span><br><span class="line">        <span class="keyword">let</span> b = <span class="keyword">yield</span> <span class="string">'a'</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">let</span> c = <span class="keyword">yield</span> b;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 生成器函数和普通函数的函数不一样，调用它的话，函数并不会立刻执行</span></span><br><span class="line"><span class="comment">// 它会返回生成器的迭代器，迭代器是一个对象，每调用一次next就可以返回一个值对象</span></span><br><span class="line"><span class="keyword">let</span> it = go();;</span><br><span class="line"><span class="keyword">let</span> r1 = it.next();</span><br><span class="line"><span class="comment">// 第一次调用next返回一个对象，此对象有两个属性，一个value就是yield后面那个值，一个是done表示是否迭代完成</span></span><br><span class="line"><span class="built_in">console</span>.log(r1); <span class="comment">//&#123;value:'a',done:false&#125;;</span></span><br><span class="line"><span class="comment">// next 第一次执行不需要传参，传参是没有意义的</span></span><br><span class="line"><span class="keyword">let</span> r2 = it.next(<span class="string">'B值'</span>);<span class="comment">//传给了b</span></span><br><span class="line"><span class="built_in">console</span>.log(r2); <span class="comment">// &#123;value:'a',done:false&#125;;</span></span><br><span class="line"><span class="keyword">let</span> r3 = it.next();<span class="comment">// &#123;value:undefined,done:true&#125;;</span></span><br><span class="line"><span class="built_in">console</span>.log(r3);</span><br></pre></td></tr></table></figure><h3 id="Promise来处理"><a href="#Promise来处理" class="headerlink" title="Promise来处理"></a>Promise来处理</h3><blockquote><p>Promise 对象是一个代理对象（代理一个值），被代理的值在Promise对象创建时可能是未知的。它允许你为异步操作的成功和失败分别绑定相应的处理方法（handlers）。 </p></blockquote><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">     setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">         resolve(<span class="number">1000</span>)</span><br><span class="line">     &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">p1.then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="promise-all"><a href="#promise-all" class="headerlink" title="promise.all"></a>promise.all</h4><blockquote><p>会接收到promise数组，如果promise全部完成了这个，promise才会成功，如果有一个失败，整体就失败了</p></blockquote><p>同时异步请求多个数据的时候,会用all</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">     setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">         resolve(<span class="number">1000</span>)</span><br><span class="line">     &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">     setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">         resolve(<span class="number">1000</span>)</span><br><span class="line">     &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.all([p1,p2]).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'===================================='</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'===================================='</span>);</span><br><span class="line">&#125;,err=&gt;&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">'===================================='</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'===================================='</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>原理</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">gen</span>(<span class="params">times,cb</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> result = [],count=<span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">i,data</span>)</span>&#123;</span><br><span class="line">        result[i] = data;</span><br><span class="line">        <span class="keyword">if</span> (++count == times) &#123;</span><br><span class="line">            cb(result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.alls = <span class="function"><span class="keyword">function</span> (<span class="params">promises</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resovle, reject</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> result = []</span><br><span class="line">        <span class="keyword">let</span> count =<span class="number">0</span></span><br><span class="line">        <span class="keyword">let</span> done = gen(promises.length,resovle)</span><br><span class="line">        <span class="comment">// function done(i,data)&#123;</span></span><br><span class="line">        <span class="comment">//     result[i] = data;</span></span><br><span class="line">        <span class="comment">//     if (++count== promises.length) &#123;</span></span><br><span class="line">        <span class="comment">//         resovle(result)</span></span><br><span class="line">        <span class="comment">//     &#125;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; promises.length; i++) &#123;</span><br><span class="line">        <span class="comment">//   promises[i].then(done.bind(null,i));</span></span><br><span class="line">             promises[i].then(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">                 done(i,data)</span><br><span class="line">             &#125;, reject);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.alls([p1,p2]).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'===================================='</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'===================================='</span>);</span><br><span class="line">&#125;,error=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'===================================='</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(error);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'===================================='</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="promise-race"><a href="#promise-race" class="headerlink" title="promise.race"></a>promise.race</h4><blockquote><p>会接收到一个promise数组，只要一个成功，则就成功了，只有一个失败就是失败了</p></blockquote><p>当你有三个接口都不稳定，可你可以同时请求三个接口，谁先回来用谁的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">     setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">         resolve(<span class="number">1000</span>)</span><br><span class="line">     &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">     setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">         resolve(<span class="number">1000</span>)</span><br><span class="line">     &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.race([p1,p2]).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'===================================='</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'===================================='</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>原理</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.race = <span class="function"><span class="keyword">function</span> (<span class="params">promises</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resovle, reject</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; promises.length; i++) &#123;</span><br><span class="line">             promises[i].then(resovle, reject);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Co"><a href="#Co" class="headerlink" title="Co"></a>Co</h3><blockquote><p>co是一个为Node.js和浏览器打造的基于生成器的流程控制工具，借助于Promise，你可以使用更加优雅的方式编写非阻塞代码。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readFile</span>(<span class="params">filename</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    fs.readFile(filename, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (err)</span><br><span class="line">        reject(err);</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        resolve(data);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> *<span class="title">read</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> template = <span class="keyword">yield</span> readFile(<span class="string">'./template.txt'</span>);</span><br><span class="line">  <span class="keyword">let</span> data = <span class="keyword">yield</span> readFile(<span class="string">'./data.txt'</span>);</span><br><span class="line">  <span class="keyword">return</span> template + <span class="string">'+'</span> + data;</span><br><span class="line">&#125;</span><br><span class="line">co(read).then(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(err);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">co</span>(<span class="params">gen</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> it = gen();</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    !<span class="function"><span class="keyword">function</span> <span class="title">next</span>(<span class="params">lastVal</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">let</span> &#123;value, done&#125; = it.next(lastVal);</span><br><span class="line">      <span class="keyword">if</span> (done) &#123;</span><br><span class="line">        resolve(value);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        value.then(next, reason =&gt; reject(reason));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Async-await"><a href="#Async-await" class="headerlink" title="Async/ await"></a>Async/ await</h3><blockquote><p>使用<code>async</code>关键字，你可以轻松地达成之前使用生成器和co函数所做到的工作<br>但是其实是它，只要generator+promise语法</p></blockquote><blockquote><p>Async的优点</p></blockquote><ul><li>内置执行器</li><li>更好的语义</li><li>更广的适用性</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">timeout</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="string">'hello world'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">timeout().then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'虽然在后面，但是我先执行'</span>);</span><br></pre></td></tr></table></figure><p>async 返回是一个 promise</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1557754213539-5dd81bf9-7cea-4542-953a-1cd7a17b77fc.png#align=left&display=inline&height=60&name=image.png&originHeight=120&originWidth=666&size=22068&status=done&width=333" alt="image.png"></p><blockquote><p>举一个例子</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loading</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            resolve(<span class="number">2</span> * num)</span><br><span class="line">        &#125;, <span class="number">2000</span>);</span><br><span class="line">    &#125; )</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这是一个函数构造器</span></span><br></pre></td></tr></table></figure><blockquote><p>这时候我想传入三个值30、50、40 通过计算后求和。<br>延迟的时间模拟网络请求时间</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">testResult</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> one = <span class="keyword">await</span> loading(<span class="number">30</span>);</span><br><span class="line">  <span class="keyword">let</span> two = <span class="keyword">await</span> loading(<span class="number">50</span>);</span><br><span class="line">  <span class="keyword">let</span> three = <span class="keyword">await</span> loading(<span class="number">40</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(first + second + third);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">testResult();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 异步处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 异步处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>14 z-index的特点</title>
      <link href="/2019/04/30/css%E5%85%A5%E9%97%A8/14%20z-index%E7%9A%84%E7%89%B9%E7%82%B9/"/>
      <url>/2019/04/30/css%E5%85%A5%E9%97%A8/14%20z-index%E7%9A%84%E7%89%B9%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<ul><li>默认是书写顺序在后的定位元素覆盖在顺序钱的定位元素</li><li>可以使用z-index属性修改定位元素的层级关系</li><li>所有定位元素的z-index默认都是一样的</li><li>z-index值是数字没有单位，支持负数</li><li>一般都是同级元素进行层级的比较</li><li>当参数是相对定位或绝对定位的时候，父级元素之间没有z-index值，子级元素的z-index值会出来比较。</li></ul>]]></content>
      
      
      <categories>
          
          <category> css入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>13 定位</title>
      <link href="/2019/04/30/css%E5%85%A5%E9%97%A8/13%20%E5%AE%9A%E4%BD%8D/"/>
      <url>/2019/04/30/css%E5%85%A5%E9%97%A8/13%20%E5%AE%9A%E4%BD%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="13-定位"><a href="#13-定位" class="headerlink" title="13 定位"></a>13 定位</h1><p><a name="Rvlko"></a></p><h3 id="13-1-绝对定位"><a href="#13-1-绝对定位" class="headerlink" title="13.1 绝对定位"></a>13.1 绝对定位</h3><blockquote><p>position:absolute</p></blockquote><ul><li><p>脱离文档流</p></li><li><p>可以设置参照物，参照物必须是其父级元素(直系父级)，如果直接父级没有会一直往上查，直到找到最外层的根元素为止</p></li><li><p>有宽度和高度的情况下，top和bottom同时有值，top生效，left和right同时有值，left生效</p></li><li><p>没有段杜和高度的情况下，top和bottom同时设置值的情况下，会将在这个盒子拉大，上下值都起作用，左右同理。<br><a name="YXaBN"></a></p><h3 id="13-2-相对定位"><a href="#13-2-相对定位" class="headerlink" title="13.2 相对定位"></a>13.2 相对定位</h3><blockquote><p>position:relative</p></blockquote></li><li><p>不会脱离文档流 占位 所有后面的元素不会往前跑</p></li><li><p>可以设置上下左右四个方位</p><ul><li>如果同时设置top和bottom同时有值，top生效</li><li>如果同时设置left和right同时有值，left生效</li></ul></li><li><p>参照物自己本身</p></li><li><p>z-index 必须和定位元素(绝对，相对，固定)同时使用才起作用</p></li></ul><p><a name="s6Vb3"></a></p><h3 id="13-3-固定定位"><a href="#13-3-固定定位" class="headerlink" title="13.3 固定定位"></a>13.3 固定定位</h3><blockquote><p>position:fixed</p></blockquote><ul><li>脱离文档流</li><li>参照物是浏览器的可视窗口</li><li>任何元素都可以设置固定定位</li><li>可以top/bottom/left/right四个方位</li><li>可以通过z-index改变层级</li></ul><p><a name="Y2Ofx"></a></p><h3 id="13-4-定位的不同点和不同点"><a href="#13-4-定位的不同点和不同点" class="headerlink" title="13.4 定位的不同点和不同点"></a>13.4 定位的不同点和不同点</h3><p><a name="CXXuf"></a></p><h4 id="13-4-1-相同点"><a href="#13-4-1-相同点" class="headerlink" title="13.4.1 相同点"></a>13.4.1 相同点</h4><ul><li><p>可以top/bottom/left四个方位，如果同时有top，bottom只有top作用,如果同有left、right、只有left起作用</p></li><li><p>都设置z-index改变层级 而且z-index越大 越在上<br><a name="S7PPb"></a></p><h4 id="13-4-2-不同点"><a href="#13-4-2-不同点" class="headerlink" title="13.4.2 不同点"></a>13.4.2 不同点</h4></li><li><p>是否脱离文档流</p><ul><li>绝对定位:是</li><li>相对定位:否</li><li>固定定位:是<blockquote><p>只有相对定位没有脱离文档流，绝对和固定定位都会脱离文档流 不占位</p></blockquote></li></ul></li><li><p>参照物</p></li><li><p>绝对定位:是觉有定位元素的父级元素，如果直接父级没有定位元素，则会往上级知道找到我们的根元素html为止   绝对定位元素 一定给他的直接父级元素相对参照物(postion:relative)</p></li><li><p>相对定位:它自己本身</p></li><li><p>固定定位:整个浏览器窗口</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> css入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>12 文档流和脱离文档流</title>
      <link href="/2019/04/30/css%E5%85%A5%E9%97%A8/12%20%E6%96%87%E6%A1%A3%E6%B5%81%E5%92%8C%E8%84%B1%E7%A6%BB%E6%96%87%E6%A1%A3%E6%B5%81/"/>
      <url>/2019/04/30/css%E5%85%A5%E9%97%A8/12%20%E6%96%87%E6%A1%A3%E6%B5%81%E5%92%8C%E8%84%B1%E7%A6%BB%E6%96%87%E6%A1%A3%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<h3 id="12-1-介绍"><a href="#12-1-介绍" class="headerlink" title="12.1 介绍"></a>12.1 介绍</h3><ul><li>文档流:指的是元素排版布局过程中，元素会自动从左到右，从上往下的流式排版。最终窗体自上而下分成一行行，并在每行中从左至右的顺序排放元素</li><li>每个非浮动块级元素都独占一行，浮动元素则按规定浮在行的一端。若当前行容不下则另起新行再浮动</li><li>内联元素也不会独占一行;几乎所有元素(包括块级，内联和列表元素)均可生成子行，用于摆放子元素</li><li>标准文档流等级:分为两个等级，块级元素和行内元素；</li><li>脱离文档流：文档流内的正常元素识别不到这个元素(脱离文档的元素相当于平行漂浮在文档流之上)</li></ul><p>正常的文档流:从左往右 从上往下<br>文档流可以分等级:行内元素和会计元素<br>行内元素  从左往右<br>块级元素  从上往下</p><p><a name="7jfcb"></a></p><h3 id="12-2-面试题-行内元素和块级元素的特点，请列举出标签？"><a href="#12-2-面试题-行内元素和块级元素的特点，请列举出标签？" class="headerlink" title="12.2 面试题:行内元素和块级元素的特点，请列举出标签？"></a>12.2 面试题:行内元素和块级元素的特点，请列举出标签？</h3><p>需求:需要块级元素(比如:div)在一行显示<br>脱离文档流:元素的正常排列方式被打破</p><p>脱离文档流的影响:</p><ol><li>float</li><li>定位</li></ol><p><a name="ZpFGm"></a></p><h3 id="12-3-浮动参数的影响或负作用"><a href="#12-3-浮动参数的影响或负作用" class="headerlink" title="12.3 浮动参数的影响或负作用"></a>12.3 浮动参数的影响或负作用</h3><ol><li>设置背景颜色属性不起作用</li><li>给父元素设置边框border属性没有被撑开</li><li>给父元素设置内边距padding属性也没有被撑开</li></ol><p><a name="UShLz"></a></p><h3 id="12-4-如何清浮动"><a href="#12-4-如何清浮动" class="headerlink" title="12.4 如何清浮动"></a>12.4 如何清浮动</h3><ol><li>给浮动元素的父元素手动添加一个固定的高度(不推荐)</li><li>给浮动元素的父元素设置overflow:hidden/auto</li><li>给浮动元素的父元素结束标签之前加一个具有元素特点的标签(我们一般用div)，给元素clear:both</li><li>clearFix伪元素去清楚浮动 (这种方法是项目中最常用的方法)</li></ol><p>利用伪元素:after清浮动的固定代码；只要清浮动我们在浮动元素的父元素上加一个.clearfix即可</p><p><a name="MKM5H"></a></p><h3 id="12-5-让元素消失在我们的视野中"><a href="#12-5-让元素消失在我们的视野中" class="headerlink" title="12.5 让元素消失在我们的视野中"></a>12.5 让元素消失在我们的视野中</h3><ol><li>透明度opacity:0; [0~1]</li><li>display:node 隐藏</li><li>height:0和overflow:hidden</li><li>line-height:0和overflow:hidden(没有设置高度的情况下)</li><li>visbility:hidden;让所有可见性的元素隐藏</li><li>margin/padding设置足够大  只要能让他消失</li><li>利用transform 属性 让transform坐标足够大</li></ol>]]></content>
      
      
      <categories>
          
          <category> css入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>11 浮动元素的特点</title>
      <link href="/2019/04/30/css%E5%85%A5%E9%97%A8/11%20%E6%B5%AE%E5%8A%A8%E5%85%83%E7%B4%A0%E7%9A%84%E7%89%B9%E7%82%B9/"/>
      <url>/2019/04/30/css%E5%85%A5%E9%97%A8/11%20%E6%B5%AE%E5%8A%A8%E5%85%83%E7%B4%A0%E7%9A%84%E7%89%B9%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h3 id="11-1-float元素的特点"><a href="#11-1-float元素的特点" class="headerlink" title="11.1 float元素的特点"></a>11.1 float元素的特点</h3><ol><li>浮动元素在一行显示</li><li>设置属性值为left时，浮动元素会依次从父级盒子的左侧向右排布，设置属性值为right时，浮动元素会依次从父级盒子的右侧想左排布</li><li>浮动元素自动其有块级元素的属性</li><li>浮动元素脱离文档流</li><li>浮动元素内的子元素，不会继承浮动属性</li><li>浮动元素下面的元素不能识别浮动元素的高度和位置,所以不许display:block了</li></ol>]]></content>
      
      
      <categories>
          
          <category> css入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>10 文本省略号</title>
      <link href="/2019/04/30/css%E5%85%A5%E9%97%A8/10%20%E6%96%87%E6%9C%AC%E7%9C%81%E7%95%A5%E5%8F%B7/"/>
      <url>/2019/04/30/css%E5%85%A5%E9%97%A8/10%20%E6%96%87%E6%9C%AC%E7%9C%81%E7%95%A5%E5%8F%B7/</url>
      
        <content type="html"><![CDATA[<h3 id="10-1-单行文本出现省略号必备的条件（面试题）"><a href="#10-1-单行文本出现省略号必备的条件（面试题）" class="headerlink" title="10.1 单行文本出现省略号必备的条件（面试题）"></a>10.1 单行文本出现省略号必备的条件（面试题）</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">*&#123;</span><br><span class="line"><span class="attribute">margin</span>:<span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h2</span>:&#123;</span><br><span class="line"><span class="attribute">width</span>:<span class="number">600px</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">30px</span>;</span><br><span class="line">  <span class="comment">/*单行文本出现省略好必备的条件*/</span></span><br><span class="line">  <span class="attribute">overflow</span>:hidden;<span class="comment">/*溢出隐藏*/</span></span><br><span class="line">  <span class="attribute">white-space</span>:nowrap;<span class="comment">/*强制文字不折行*/</span></span><br><span class="line">  <span class="attribute">text-overflow</span>:ellipsis;<span class="comment">/*文字隐藏的方式:以省略号的方式隐藏*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="TAoIh"></a></p><h3 id="10-2-多行文本出现省略号必备的条件（面试题）"><a href="#10-2-多行文本出现省略号必备的条件（面试题）" class="headerlink" title="10.2 多行文本出现省略号必备的条件（面试题）"></a>10.2 多行文本出现省略号必备的条件（面试题）</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h2</span>&#123;</span><br><span class="line"><span class="attribute">width</span>:<span class="number">600px</span>;<span class="comment">/*宽度*/</span></span><br><span class="line">  <span class="attribute">display</span>:-webkit-box;<span class="comment">/*弹性盒子模型*/</span></span><br><span class="line">  <span class="attribute">-webkit-line-orient</span>:vertical;<span class="comment">/*规定元素的排行方式:垂直排序*/</span></span><br><span class="line">  <span class="attribute">-webkit-line-clamp</span>:<span class="number">2</span>;<span class="comment">/*文字的行数 需要显示几行 值就写几行*/</span></span><br><span class="line">  <span class="attribute">overflow</span>:hidden;<span class="comment">/*溢出隐藏*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> css入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>9 让多个元素的一行显示的方法</title>
      <link href="/2019/04/30/css%E5%85%A5%E9%97%A8/9%20%E8%AE%A9%E5%A4%9A%E4%B8%AA%E5%85%83%E7%B4%A0%E7%9A%84%E4%B8%80%E8%A1%8C%E6%98%BE%E7%A4%BA%E7%9A%84%E6%96%B9%E6%B3%95/"/>
      <url>/2019/04/30/css%E5%85%A5%E9%97%A8/9%20%E8%AE%A9%E5%A4%9A%E4%B8%AA%E5%85%83%E7%B4%A0%E7%9A%84%E4%B8%80%E8%A1%8C%E6%98%BE%E7%A4%BA%E7%9A%84%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="9-1-让多个元素的一行显示的方法"><a href="#9-1-让多个元素的一行显示的方法" class="headerlink" title="9.1 让多个元素的一行显示的方法"></a>9.1 让多个元素的一行显示的方法</h3><ul><li>display:inline; // 转换为行内元素  但是设置宽高属性之后不起作用</li><li>display:inline-block;  // block可以让元素在一行显示，但是他会受空格/换行建，会产生默认间距<ul><li>去掉空格和换行建的影响 让标签都在一行 (不推荐 阅读性不好)</li><li>给父元素增加一个 font-size:0，然后给子元素增加一个 font-size:14px;（但是我们还会发现一个问题:元素里面如果有文字 文字消失，然后在子元素增加一个属性即可）</li></ul></li><li>float:left/rigjt; // 但是我们清浮动</li></ul><p>** [display:inline-block元素的特点]**</p><ul><li>让盒子横向排列</li><li>vertiacal-align 属性会影响到inline-block元素，你可能会把他的值设置为top</li><li>你需要设置每一列的宽度</li><li>如果html源代码中元素之间有空格，那么列与列之间会产生空隙</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">*&#123;</span><br><span class="line"><span class="attribute">margin</span>:<span class="number">0px</span>;</span><br><span class="line">  <span class="attribute">padding</span>:<span class="number">0px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.content1</span>&#123;</span><br><span class="line"><span class="attribute">display</span>:inline;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">backgournd-color</span>:yellow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.content2</span>&#123;</span><br><span class="line"><span class="attribute">display</span>:inline;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">backgournd-color</span>:yellow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">&lt;div class="content1"&gt;内容1&lt;/div&gt;</span><br><span class="line">&lt;div class="content2"&gt;内容2&lt;/div&gt;</span><br></pre></td></tr></table></figure><blockquote><p>inline-block 在ie7 不兼容</p></blockquote><p>直接让块元素设置为内联对象呈递（设置属性display:inline），然后触发块元素的layout（如：zoom:1 或float属性等）。代码如下</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*推荐:IE6、7*/</span> </span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>:inline-block;</span><br><span class="line">  *zoom:1;</span><br><span class="line">  *<span class="selector-tag">display</span>: <span class="selector-tag">inline</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*推荐*/</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">   <span class="attribute">display</span>:inline-block;</span><br><span class="line">   <span class="attribute">_zoom</span>:<span class="number">1</span>;</span><br><span class="line">   <span class="attribute">_display</span>:inline;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解释: display:inline-block照顾的是ie8+的浏览器，这是正常的设置，在低版本的ie设置下行内块有2个条件，一个行内，一个设置宽高，触发layout即可设置宽度，而div设置了宽度后还是会黄航，layout不是为了水平而设置，所以为了块级元素转行内块上加上”display:inline”属性，但是display:inline不会触发layout，于是加上zoom:1重新触发layout，于是形成了一个跨域设置宽高的行内元素</p>]]></content>
      
      
      <categories>
          
          <category> css入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8 voerflow:hidden</title>
      <link href="/2019/04/30/css%E5%85%A5%E9%97%A8/8%20voerflow_hidden/"/>
      <url>/2019/04/30/css%E5%85%A5%E9%97%A8/8%20voerflow_hidden/</url>
      
        <content type="html"><![CDATA[<h3 id="8-1-overflow溢出隐藏"><a href="#8-1-overflow溢出隐藏" class="headerlink" title="8.1 overflow溢出隐藏"></a>8.1 overflow溢出隐藏</h3><blockquote><p>超过内容之外的部分给隐藏起来</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">p&#123;</span><br><span class="line">width:300px;</span><br><span class="line">  height:10px;</span><br><span class="line">  overfolw:hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>xxxxxxxxxxxxxxxxxxxxxxxx......xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.....<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>用来清楚浮动产生的影响</li><li>解决margin-top的传递问题</li></ol>]]></content>
      
      
      <categories>
          
          <category> css入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7 背景相关</title>
      <link href="/2019/04/29/css%E5%85%A5%E9%97%A8/7%20%E8%83%8C%E6%99%AF%E7%9B%B8%E5%85%B3/"/>
      <url>/2019/04/29/css%E5%85%A5%E9%97%A8/7%20%E8%83%8C%E6%99%AF%E7%9B%B8%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<p><a name="a6a24523"></a></p><h3 id="7-1-背景属性"><a href="#7-1-背景属性" class="headerlink" title="7.1 背景属性"></a>7.1 背景属性</h3><p>背景缩写缩写可以卸载一个声明中设置所有的背景属性<br>背景图像支持引入多个图像<br>主要属性有:<br>background-color<br>background-image<br>background-repeat<br>background-position<br>backgournd-attchment<br>backgournd-size<br>backgournd-origin<br>backgournd-clip<br><a name="6ebf30fe"></a></p><h3 id="7-2-背景颜色"><a href="#7-2-背景颜色" class="headerlink" title="7.2 背景颜色"></a><br>7.2 背景颜色</h3><blockquote><p>background-color</p></blockquote><ul><li>指定要使用的背景颜色 例如:background-color:#ffcc00</li><li>可以简写为background</li><li>backround-color 不能继承，其默认值是trandsparent。trandsparent有透明之意。也就是说，如果一个元素没有指定背景色，那么背景就是透明的，这样其祖先元素的背景才能可见。</li><li>transparent 指定背景颜色应该是透明的，默认值。</li><li>inherit 指定背景颜色，应该从父元素继承</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-class">.box</span>&#123;</span></span><br><span class="line"><span class="css"><span class="selector-tag">width</span><span class="selector-pseudo">:650px</span>;</span></span><br><span class="line"><span class="css">  <span class="selector-tag">height</span><span class="selector-pseudo">:32px</span>;</span></span><br><span class="line">  background-color:orange;// 颜色</span><br><span class="line">  color:#fff; // 字体颜色</span><br><span class="line">  text-aligh:center;//字体内容水平居中</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">div&#123;</span><br><span class="line"><span class="css"><span class="selector-tag">width</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line"><span class="css">  <span class="selector-tag">height</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line"><span class="css">  <span class="selector-tag">backgournd-color</span><span class="selector-pseudo">:darkbule</span>;</span></span><br><span class="line">  margin:0 auto;//上下0 左右auto 块元素水平居中</span><br><span class="line">  line-height:200px;//垂直居中</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a name="af95ce5d"></a></p><h3 id="7-3-背景图片"><a href="#7-3-背景图片" class="headerlink" title="7.3 背景图片"></a>7.3 背景图片</h3><blockquote><p>background-image</p></blockquote><ul><li>url(‘图像的url路径地址’)图像的url</li><li>none 表示北京上没有防止任何图像，这就是默认值</li><li>inherit指定背景图像应该从父元素继承</li><li>一个元素可以引入多张背景图片，指定要使用的一个或者多个背景图像，默认情况下background-image放置在元素的左上角，并重复垂直的水平方向。</li><li>backgournd image:url(‘pic.png’),url(‘pic2.png’)… …</li><li>backgournd image 属性不能继承</li></ul><p><a name="babb6d43"></a></p><h3 id="7-4-背景重复"><a href="#7-4-背景重复" class="headerlink" title="7.4 背景重复"></a>7.4 背景重复</h3><ul><li>指定如何重复背景图像，默认情况下，重复background-image的垂直和水平方向</li><li>repeat 背景图像向垂直和水平方向垂直。这是默认</li><li>repeat-x 只有水平位置会重复背景图像</li><li>repeat-y 只有垂直位置会重复背景图像</li><li>no-repeat background-image不会重复</li><li>inherit 指定背景重复应该从父元素继承</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.logo</span>&#123;</span><br><span class="line"><span class="attribute">width</span>:<span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">backgournd-image</span>:<span class="built_in">url</span>(<span class="string">'../xxx/png'</span>);</span><br><span class="line">  backgournd-repeat:repeat x;//平铺的方式（重复）</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="783a724c"></a></p><h3 id="7-5-背景定位"><a href="#7-5-背景定位" class="headerlink" title="7.5 背景定位"></a>7.5 背景定位</h3><ul><li>backgournd-position属性设置背景图像的起始位置;</li><li>xpos ypos 第一个值的水平位置，第二个值是垂直。左上角是0。单位可以是长度值px，关键字和百分数值</li><li>关键字成对出现left right top bottom center，如果仅指定一个关键字，其他值将会“center”</li><li>x% y%第一个值水平位置，第二值是垂直。左上角是0%0%。</li><li>inherit 指定background-position属性设置应该从父元素继承</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.logo&#123;</span><br><span class="line">width:400px;</span><br><span class="line">height:400px;</span><br><span class="line">backgournd-color:#3385ff;//背景颜色</span><br><span class="line">  backgournd-image:url('./xxx.png');</span><br><span class="line">backgournd-repeat:no-repeat;</span><br><span class="line">  backgournd-position:50px 50px;//x轴的坐标(水平方向)y轴的坐标方向(垂直方向) x轴越大 越往右 x轴越大 越往下</span><br><span class="line">//50% 50% &gt; center center //中心位置</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>经常使用在雪碧图中</p></blockquote><p><a name="28ddf8bd"></a></p><h3 id="7-6-背景关联"><a href="#7-6-背景关联" class="headerlink" title="7.6 背景关联"></a>7.6 背景关联</h3><blockquote><p>backgournd-attachmen</p></blockquote><ul><li>设置背景图像是否固定或者随着页面的其余部分滚动</li><li>scroll 背景图片随页面的其余部分滚动。这是默认</li><li>fixed  背景图像是固定的</li><li>inherit 指定background-attachment的设置应该从父元素继承</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">*&#123;</span><br><span class="line"><span class="attribute">padding</span>:<span class="number">0px</span>;</span><br><span class="line">  <span class="attribute">margin</span>:<span class="number">0px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.banner</span>&#123;</span><br><span class="line"><span class="attribute">width</span>:<span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">800px</span>;</span><br><span class="line">  <span class="attribute">backgournd</span>:<span class="built_in">url</span>(../xxx.png) no-repeat</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.banner01</span>&#123;</span><br><span class="line"><span class="attribute">width</span>:<span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">800px</span>;</span><br><span class="line">  <span class="attribute">backgournd</span>:<span class="built_in">url</span>(../xxx.png) no-repeat</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.banner02</span>&#123;</span><br><span class="line"><span class="attribute">width</span>:<span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">800px</span>;</span><br><span class="line">  <span class="attribute">backgournd</span>:<span class="built_in">url</span>(../xxx.png) no-repeat</span><br><span class="line">   backgournd-attachmen:fixed;// 可以固定不动</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="6300fbbc"></a></p><h3 id="7-7-设置对象的背景图像的尺寸大小"><a href="#7-7-设置对象的背景图像的尺寸大小" class="headerlink" title="7.7 设置对象的背景图像的尺寸大小"></a>7.7 设置对象的背景图像的尺寸大小</h3><blockquote><p>background-size</p></blockquote><ul><li><length>用长度值指定背景图像大小。不允许负值；</length></li><li><percentage>用百分比指定背景图像大小。不允许负值。</percentage></li><li>auto背景图像的真实大小</li><li>cover将背景图等比例缩放到完全覆盖容器，背景图像有可能超出容器；</li><li>contain将背景图像等比例缩放到宽度或高度与容器的宽度或高度相等，背景图像始终被包含在容器内</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.pic</span>&#123;</span><br><span class="line"><span class="attribute">width</span>:<span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">1600px</span>;</span><br><span class="line">  <span class="attribute">background</span>:<span class="built_in">url</span>(<span class="string">'../xx.png'</span>)</span><br><span class="line">  background-size:300px 300px; // x轴  y轴</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="c4ac0b07"></a></p><h3 id="7-8-设置对象的背景图像向外裁剪的区域"><a href="#7-8-设置对象的背景图像向外裁剪的区域" class="headerlink" title="7.8 设置对象的背景图像向外裁剪的区域"></a>7.8 设置对象的背景图像向外裁剪的区域</h3><blockquote><p>background-clip</p></blockquote><ul><li>padding-box:从padding区域(不含padding)开始想外裁剪背景;</li><li>border-box:从border区域(不含border)开始向外裁剪背景</li><li>bontent-box:从content区域开始向外裁剪背景</li><li>text:从前景内容的形状（比如文字）作为裁剪区域向外裁剪，如此极客实现使用背景作为填充色之类的遮罩效果。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.pic</span>&#123;</span><br><span class="line"><span class="attribute">width</span>:<span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">1600px</span>;</span><br><span class="line">  <span class="attribute">background</span>:<span class="built_in">url</span>(<span class="string">'../xx.png'</span>)</span><br><span class="line">  background-size:300px 300px; // x轴  y轴</span><br><span class="line">  <span class="selector-tag">backgound-clip</span><span class="selector-pseudo">:border-box</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="3ca855bd"></a></p><h3 id="7-9-设置背景图像的参考原点-位置"><a href="#7-9-设置背景图像的参考原点-位置" class="headerlink" title="7.9 设置背景图像的参考原点(位置)"></a>7.9 设置背景图像的参考原点(位置)</h3><blockquote><p>background-orign</p></blockquote><ul><li>padding-box:从padding区域(含padding)开始显示背景图像</li><li>border-box:从border区域(含border)开始显示背景图像</li><li>content-box:从content区域开始显示背景图像</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1556008682281-d804bf6d-651c-4570-8664-f1cd7b09daaf.png#align=left&display=inline&height=303&name=image.png&originHeight=370&originWidth=912&size=116416&status=done&width=746" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> css入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6 BFC机制</title>
      <link href="/2019/04/29/css%E5%85%A5%E9%97%A8/6%20BFC%E6%9C%BA%E5%88%B6/"/>
      <url>/2019/04/29/css%E5%85%A5%E9%97%A8/6%20BFC%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<p>BFC全称是Block Formatting Context，即块格式化上下文。它是CSS2.1规范定义的，关于CSS渲染定位的一个概念。它是一个独立的渲染区域，只有Block-level box参与， 它规定了内部的Block-level Box如何布局，并且与这个区域外部毫不相干。<br><a name="90097dcf"></a></p><h3 id="6-1-BFC布局规则"><a href="#6-1-BFC布局规则" class="headerlink" title="6.1 BFC布局规则"></a>6.1 BFC布局规则</h3><ol><li>内部的Box会在垂直方向，一个接一个地放置；</li><li>Box垂直方向的距离由margin决定。属于同一个BFC的两个相邻Box的margin会发生重叠；</li><li>每个元素的margin box的左边， 与包含块border box的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此。；</li><li>BFC的区域不会与float box重叠，常用来清除浮动和布局。；</li><li>BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。；</li><li>计算BFC的高度时，浮动元素也参与计算；<br><a name="694ec134"></a><h3 id="6-2-会生成BFC的元素"><a href="#6-2-会生成BFC的元素" class="headerlink" title="6.2 会生成BFC的元素"></a>6.2 会生成BFC的元素</h3></li></ol><ul><li><strong>根元素</strong>或其它包含它的元素；</li><li><strong>浮动</strong> (元素的<code>float</code>不为<code>none</code>)；</li><li><strong>绝对定位元素</strong> (元素的<code>position</code>为<code>absolute</code>或<code>fixed</code>)；</li><li><strong>行内块</strong><code>inline-blocks</code>(元素的 <code>display: inline-block</code>)；</li><li><strong>表格单元格</strong>(元素的<code>display: table-cell</code>，HTML表格单元格默认属性)；</li><li><code>overflow</code>的值不为<code>visible</code>的元素；</li><li><strong>弹性盒 flex boxes</strong> (元素的<code>display: flex</code>或<code>inline-flex</code>)；<br><a name="50eaf095"></a><h3 id="6-3-BFC的范围"><a href="#6-3-BFC的范围" class="headerlink" title="6.3 BFC的范围"></a>6.3 BFC的范围</h3>BFC的范围在MDN中是这样描述的。<blockquote><p>A block formatting context contains everything inside of the element creating it that is not also inside a descendant element that creates a new block formatting context.</p></blockquote></li></ul><p>中文的意思一个BFC包含创建该上下文元素的所有子元素，但不包括创建了新BFC的子元素的内部元素。<br>插入一段代码方便理解</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'div_1 BFC'</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'div_2'</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'div_3'</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'div_4'</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'div_5 BFC'</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'div_6'</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'div_7'</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>div_1</code>创建了一个块格式上下文，这个上下文包括了<code>div_2</code>、<code>div_3</code>、<code>div_4</code>、<code>div_5</code>。即<code>div_2</code>中的子元素也属于<code>div_1</code>所创建的BFC。但由于<code>div_5</code>创建了新的BFC，所以<code>div_6</code>和<code>div_7</code>就被排除在外层的BFC之外。<br>这就代表着<strong>一个元素不能同时存在于多个BFC中。</strong><br>BFC的一个最重要的效果是，让处于BFC内部的元素与外部的元素相互隔离，使内外元素的定位不会相互影响。这是利用BFC清除浮动所利用的特性。<br><a name="29b3a1c6"></a></p><h3 id="6-4-BFC的常用方式："><a href="#6-4-BFC的常用方式：" class="headerlink" title="6.4 BFC的常用方式："></a>6.4 BFC的常用方式：</h3><p><a name="c0833039"></a></p><h4 id="6-4-1-子级浮动导致父级高度塌陷"><a href="#6-4-1-子级浮动导致父级高度塌陷" class="headerlink" title="6.4.1 子级浮动导致父级高度塌陷"></a>6.4.1 子级浮动导致父级高度塌陷</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.box</span>&#123;</span></span><br><span class="line">            width: 900px;</span><br><span class="line">            background: black;</span><br><span class="line">          height: 300px; // 增加高度</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.box1</span>&#123;</span></span><br><span class="line">            height: 300px;</span><br><span class="line">            width: 300px;</span><br><span class="line">            background: red;</span><br><span class="line">            float: left;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.box2</span>&#123;</span></span><br><span class="line">            height: 300px;</span><br><span class="line">            width: 300px;</span><br><span class="line">            background: blue;</span><br><span class="line">            float: left;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面的代码定义了3个块，一个父级包含了两个子集，但是父级的背景颜色无法显示，是因为子集元素浮动导致了父级高度的塌陷。<br><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1555910652193-8245b415-d1ff-42f8-b7d8-cc23cd31ae61.png#align=left&display=inline&height=239&name=image.png&originHeight=476&originWidth=1486&size=17060&status=done&width=746" alt="image.png"><br><br><br>在为box设置BFC后，box的高度才能找回来。<br><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1555910675579-27de4977-c9c8-4985-895f-935620f26047.png#align=left&display=inline&height=245&name=image.png&originHeight=484&originWidth=1476&size=14251&status=done&width=746" alt="image.png"><br>从而显示出正确的样式。<br><a name="d41d8cd9"></a></p><p>####<br><a name="d12cbf47"></a></p><h4 id="6-4-2-子级margin-top将父级带下-为父级触发BFC"><a href="#6-4-2-子级margin-top将父级带下-为父级触发BFC" class="headerlink" title="6.4.2 子级margin-top将父级带下 为父级触发BFC"></a>6.4.2 子级margin-top将父级带下 为父级触发BFC</h4><p>一个盒子有上边距 另一个有下边距 会出现margin边距的重叠问题<br>并列盒子的margin重写=&gt;双margin的重叠<br>-&gt; 取大值 并不是他们相加之和 也就是谁大听谁的</p><blockquote><p>要将黑色块中的小红块下移一点，直接使用了margin-top，结果黑块一起下移了。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.box</span>&#123;</span></span><br><span class="line">            width: 300px;</span><br><span class="line">            height: 300px;</span><br><span class="line">            background: black;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.box1</span>&#123;</span></span><br><span class="line">            height: 100px;</span><br><span class="line">            width: 100px;</span><br><span class="line">            background: red;</span><br><span class="line">            margin-top: 50px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1555910696569-867333cb-63bd-4a4a-b7f5-7121b42e1331.png#align=left&display=inline&height=293&originHeight=664&originWidth=620&status=done&width=274" alt></p><p>而设置了BFC后，就能正确的下浮红色块</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1555910705446-aaeb919d-7446-475f-aa13-b6fca56ac33d.png#align=left&display=inline&height=269&originHeight=598&originWidth=604&status=done&width=272" alt></p><blockquote><p>margin的兼容问题:margin top的传递问题</p></blockquote><p>大盒子里面嵌套小盒子 给小盒子加margin-top 不但没有实现和大盒子之间的间距 反而传递给大盒子身上 导致整体下移动<br>解决兼容性问题</p><ol><li>overflow:hidden  解决margin-top的传递问题(此处并没有溢出隐藏)</li><li>padding-方位:1px 这种方法影响最后实际宽高 需要在width/height上基础上减掉才不会影响最后实际的宽高</li><li>border-top:1px 这种方法会影响最后实际的高度 需要在高度height上基础上减掉 才不会影响最后实际的高度</li><li>给子元素的margin-top的值改成父元素的padding-top,这样就避免使用margin-top值导致传递的问题</li></ol>]]></content>
      
      
      <categories>
          
          <category> css入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5 css盒子模型</title>
      <link href="/2019/04/29/css%E5%85%A5%E9%97%A8/5%20css%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/"/>
      <url>/2019/04/29/css%E5%85%A5%E9%97%A8/5%20css%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="5-1-css盒子模型图解"><a href="#5-1-css盒子模型图解" class="headerlink" title="5.1 css盒子模型图解"></a>5.1 css盒子模型图解</h3><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1555642917065-07173153-64c4-4418-aec3-260a0567d0af.png#align=left&display=inline&height=310&name=image.png&originHeight=310&originWidth=608&size=79782&status=done&width=608" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1555643131585-10b0af93-c3d1-4bf2-8270-e82e69de0224.png#align=left&display=inline&height=326&name=image.png&originHeight=326&originWidth=388&size=34957&status=done&width=388" alt="image.png"></p><ul><li>margin:外边距</li><li>border:边框</li><li>padding:内边距</li></ul><p><a name="bbfff0e4"></a></p><h3 id="5-2-css盒子模型之宽度和高度"><a href="#5-2-css盒子模型之宽度和高度" class="headerlink" title="5.2 css盒子模型之宽度和高度"></a>5.2 css盒子模型之宽度和高度</h3><ol><li>px 像素写死<br>    2. % 动态计算的单位(自适应 响应式)<br> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">*&#123;</span><br><span class="line"><span class="attribute">margin</span>:<span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.banner</span> <span class="selector-tag">img</span>&#123;</span><br><span class="line"><span class="attribute">width</span>:<span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><a name="b421a9b5"></a></p><h3 id="5-3-内边距padding及简写"><a href="#5-3-内边距padding及简写" class="headerlink" title="5.3 内边距padding及简写"></a>5.3 内边距padding及简写</h3><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1555644224943-24b67769-cf94-4589-99c0-db9ff5305a42.png#align=left&display=inline&height=304&name=image.png&originHeight=350&originWidth=858&size=143618&status=done&width=746" alt="image.png"></p><p><a name="60d1f72d"></a></p><h3 id="5-4-边框线border的使用技巧"><a href="#5-4-边框线border的使用技巧" class="headerlink" title="5.4 边框线border的使用技巧"></a>5.4 边框线border的使用技巧</h3><blockquote><p>border:边框的宽度 边框线类型 边框线的颜色</p></blockquote><p><a name="3fcd0cf7"></a></p><h4 id="5-4-1-边框线类型"><a href="#5-4-1-边框线类型" class="headerlink" title="5.4.1 边框线类型"></a>5.4.1 边框线类型</h4><p><a name="81935414"></a></p><h4 id="5-4-2-边框线类型"><a href="#5-4-2-边框线类型" class="headerlink" title="5.4.2 边框线类型"></a>5.4.2 边框线类型</h4><ul><li>solid 实线</li><li>dashed 虚线</li><li>dotted 点状线</li></ul><p><a name="cdb816d5"></a></p><h4 id="5-4-3-边框线的颜色"><a href="#5-4-3-边框线的颜色" class="headerlink" title="5.4.3 边框线的颜色"></a>5.4.3 边框线的颜色</h4><table><thead><tr><th></th><th>黑色</th><th>白色</th></tr></thead><tbody><tr><td>颜色的英文</td><td>black</td><td>white</td></tr><tr><td>#</td><td>#000</td><td>#fff</td></tr><tr><td>rgb</td><td>rgb(0,0,0)</td><td>rgb(255,255,255)</td></tr></tbody></table><p>border:10px solid #000<br>如果没有知名方向的情况下，表示四个方向都相等<br>border-top  上边<br>border-right  右边<br>border-bottom 下边<br>border-left 左边</p><p><a name="eb824421"></a></p><h4 id="5-4-4-去掉边框"><a href="#5-4-4-去掉边框" class="headerlink" title="5.4.4 去掉边框"></a>5.4.4 去掉边框</h4><p>border:0<br>如果border属性只有边框段杜，没有边框的类型和颜色 导致border属性失效</p><p><a name="bf7bbae0"></a></p><h4 id="5-4-5-面试题-画个三角形"><a href="#5-4-5-面试题-画个三角形" class="headerlink" title="5.4.5 面试题(画个三角形)"></a>5.4.5 面试题(画个三角形)</h4><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1555645454675-2f5867ec-b4f0-4928-b9aa-63abd50cf054.png#align=left&display=inline&height=144&name=image.png&originHeight=144&originWidth=494&size=26972&status=done&width=494" alt="image.png"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"> /* </span><br><span class="line">    三角箭头原理：正方形的任意相邻的两条边线</span><br><span class="line">    然后旋转一定的角度得到我们需要的任意方向的箭头 </span><br><span class="line">    deg 角度单位 rotate旋转角度</span><br><span class="line">    三角形的大小由正方形的宽高去控制</span><br><span class="line">    三角形的粗细是有边框线去控制</span><br><span class="line">    三角形的颜色是有边框线的颜色去控制</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"arrow"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-class">.arrow</span>&#123;</span></span><br><span class="line">  width: 0px;</span><br><span class="line">  height: 0px;</span><br><span class="line">  margin-top: 50px;</span><br><span class="line">  margin-left: 50px;</span><br><span class="line"><span class="css">  <span class="selector-tag">border-width</span><span class="selector-pseudo">:0</span> 30<span class="selector-tag">px</span> 30<span class="selector-tag">px</span>;</span></span><br><span class="line"><span class="css">  <span class="selector-tag">border-style</span><span class="selector-pseudo">:solid</span>;</span></span><br><span class="line"><span class="css">  <span class="selector-tag">border-color</span><span class="selector-pseudo">:transparent</span> <span class="selector-tag">transparent</span> <span class="selector-id">#333</span>;</span></span><br><span class="line">  transform: rotate(90deg);//控制角度</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a name="edd6611e"></a></p><h3 id="5-5-padding"><a href="#5-5-padding" class="headerlink" title="5.5 padding"></a>5.5 padding</h3><blockquote><p>方向上和padding一致</p></blockquote><p><a name="3bdff0b3"></a></p><h3 id="5-6-margin的负值使用技巧"><a href="#5-6-margin的负值使用技巧" class="headerlink" title="5.6 margin的负值使用技巧"></a>5.6 margin的负值使用技巧</h3><p>结构上不动，可以调换div顺序<br><a name="f46b0c8a"></a></p><h3 id="5-7-padding和margin的区别"><a href="#5-7-padding和margin的区别" class="headerlink" title="5.7 padding和margin的区别"></a>5.7 padding和margin的区别</h3><p>padding 是内边距<br>会影响我们在浏览器中看到的元素的实际大小内边距会让元素的内容增大和其它的元素没有关系<br>margin 是外边距<br>不会影响我们在浏览器中看到的元素的实际大小外边距不会让元素的内容增大和另一个元素的间距</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1555904206988-79943594-12d5-497a-a332-762df672d413.png#align=left&display=inline&height=292&name=image.png&originHeight=362&originWidth=924&size=146701&status=done&width=746" alt="image.png"></p><p><a name="95db6d8f"></a></p><h3 id="5-8-盒子模型的计算公式及使用技巧"><a href="#5-8-盒子模型的计算公式及使用技巧" class="headerlink" title="5.8 盒子模型的计算公式及使用技巧"></a>5.8 盒子模型的计算公式及使用技巧</h3><blockquote><p>元素实际宽度</p></blockquote><p>宽度width + padding-left/padding-right+border-left/border-right</p><blockquote><p>元素实际高度</p></blockquote><p>高度height+padding-top/padding-bottom+border-top/border-bottom</p><p>口号: 元素的实际大小智慧padding和border的影响跟margin没有半毛钱的关系<br>如果加了padding和border的值要在width和height的值上减去padding和border的值 否则内容会溢出</p>]]></content>
      
      
      <categories>
          
          <category> css入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4 CSS的三大特性 (继承属性)</title>
      <link href="/2019/04/29/css%E5%85%A5%E9%97%A8/4%20CSS%E7%9A%84%E4%B8%89%E5%A4%A7%E7%89%B9%E6%80%A7%20(%E7%BB%A7%E6%89%BF%E5%B1%9E%E6%80%A7)/"/>
      <url>/2019/04/29/css%E5%85%A5%E9%97%A8/4%20CSS%E7%9A%84%E4%B8%89%E5%A4%A7%E7%89%B9%E6%80%A7%20(%E7%BB%A7%E6%89%BF%E5%B1%9E%E6%80%A7)/</url>
      
        <content type="html"><![CDATA[<h3 id="4-2-无继承性的属性"><a href="#4-2-无继承性的属性" class="headerlink" title="4.2 无继承性的属性"></a>4.2 无继承性的属性</h3><p><a name="3a314dd7"></a></p><h4 id="4-2-1-display"><a href="#4-2-1-display" class="headerlink" title="4.2.1 display"></a>4.2.1 display</h4><ul><li>inline</li><li>block</li><li>inline-block</li><li>table-cell</li><li>none<blockquote><p>规定元素应该生成的框的类型</p></blockquote></li></ul><p><a name="ee565a76"></a></p><h4 id="4-2-2-文本属性："><a href="#4-2-2-文本属性：" class="headerlink" title="4.2.2 文本属性："></a>4.2.2 文本属性：</h4><p>vertical-align：垂直文本对齐<br>text-decoration：规定添加到文本的装饰<br>text-shadow：文本阴影效果<br>white-space：空白符的处理<br>unicode-bidi：设置文本的方向<br><a name="537665bf"></a></p><h4 id="4-3-3-盒子模型的属性："><a href="#4-3-3-盒子模型的属性：" class="headerlink" title="4.3.3 盒子模型的属性："></a>4.3.3 盒子模型的属性：</h4><p>width、height、margin 、margin-top、margin-right、margin-bottom、margin-left、border、border-style、border-top-style、border-right-style、border-bottom-style、border-left-style、border-width、border-top-width、border-right-right、border-bottom-width、border-left-width、border-color、border-top-color、border-right-color、border-bottom-color、border-left-color、border-top、border-right、border-bottom、border-left、padding、padding-top、padding-right、padding-bottom、padding-left<br><a name="245c3651"></a></p><h4 id="4-3-4-背景属性"><a href="#4-3-4-背景属性" class="headerlink" title="4.3.4 背景属性"></a>4.3.4 背景属性</h4><p>background、background-color、background-image、background-repeat、background-position、background-attachment<br><a name="daef0428"></a></p><h4 id="4-3-5-定位属性"><a href="#4-3-5-定位属性" class="headerlink" title="4.3.5 定位属性"></a>4.3.5 定位属性</h4><p>float、clear、position、top、right、bottom、left、min-width、min-height、max-width、max-height、overflow、clip、z-index<br><a name="d2c5cb06"></a></p><h4 id="4-3-6-生成内容属性"><a href="#4-3-6-生成内容属性" class="headerlink" title="4.3.6 生成内容属性"></a>4.3.6 生成内容属性</h4><p>content、counter-reset、counter-increment<br><a name="d04fa3fe"></a></p><h4 id="4-3-7-轮廓样式属性"><a href="#4-3-7-轮廓样式属性" class="headerlink" title="4.3.7 轮廓样式属性"></a>4.3.7 轮廓样式属性</h4><p>outline-style、outline-width、outline-color、outline<br><a name="cb8d84bf"></a></p><h4 id="4-3-8-页面样式属性"><a href="#4-3-8-页面样式属性" class="headerlink" title="4.3.8 页面样式属性"></a>4.3.8 页面样式属性</h4><p>size、page-break-before、page-break-after<br><a name="1682a5fd"></a></p><h4 id="4-3-9-声音样式属性"><a href="#4-3-9-声音样式属性" class="headerlink" title="4.3.9 声音样式属性"></a>4.3.9 声音样式属性</h4><p>pause-before、pause-after、pause、cue-before、cue-after、cue、play-during</p><p><a name="66582b23"></a></p><h3 id="4-3-有继承性的属性"><a href="#4-3-有继承性的属性" class="headerlink" title="4.3 有继承性的属性"></a>4.3 有继承性的属性</h3><p><a name="16cb3fde"></a></p><h4 id="4-3-1-字体系列属性"><a href="#4-3-1-字体系列属性" class="headerlink" title="4.3.1 字体系列属性"></a>4.3.1 字体系列属性</h4><p>font：组合字体<br>font-family：规定元素的字体系列<br>font-weight：设置字体的粗细<br>font-size：设置字体的尺寸<br>font-style：定义字体的风格<br>font-variant：设置小型大写字母的字体显示文本，这意味着所有的小写字母均会被转换为大写，但是所有使用小型大写字体的字母与其余文本相比，其字体尺寸更小。<br>font-stretch：对当前的 font-family 进行伸缩变形。所有主流浏览器都不支持。<br>font-size-adjust：为某个元素规定一个 aspect 值，这样就可以保持首选字体的 x-height。<br><a name="f2838a6b"></a></p><h4 id="4-3-2-文本系列属性"><a href="#4-3-2-文本系列属性" class="headerlink" title="4.3.2 文本系列属性"></a>4.3.2 文本系列属性</h4><p>text-indent：文本缩进<br>text-align：文本水平对齐<br>line-height：行高<br>word-spacing：增加或减少单词间的空白（即字间隔）<br>letter-spacing：增加或减少字符间的空白（字符间距）<br>text-transform：控制文本大小写<br>direction：规定文本的书写方向<br>color：文本颜色<br><a name="00a2debd"></a></p><h4 id="4-3-3-元素可见性"><a href="#4-3-3-元素可见性" class="headerlink" title="4.3.3 元素可见性"></a>4.3.3 元素可见性</h4><p>visibility<br><a name="0cfcc79f"></a></p><h4 id="4-3-4-表格布局属性"><a href="#4-3-4-表格布局属性" class="headerlink" title="4.3.4 表格布局属性"></a>4.3.4 表格布局属性</h4><p>caption-side、border-collapse、border-spacing、empty-cells、table-layout<br><a name="643dc764"></a></p><h4 id="4-3-5-列表布局属性"><a href="#4-3-5-列表布局属性" class="headerlink" title="4.3.5 列表布局属性"></a>4.3.5 列表布局属性</h4><p>list-style-type、list-style-image、list-style-position、list-style<br><a name="d2c5cb06-1"></a></p><h4 id="4-3-6-生成内容属性-1"><a href="#4-3-6-生成内容属性-1" class="headerlink" title="4.3.6 生成内容属性"></a>4.3.6 生成内容属性</h4><p>quotes<br><a name="a6a95512"></a></p><h4 id="4-3-7-光标属性"><a href="#4-3-7-光标属性" class="headerlink" title="4.3.7 光标属性"></a>4.3.7 光标属性</h4><p>cursor<br><a name="42bb3516"></a></p><h4 id="4-3-8-页面样式属性："><a href="#4-3-8-页面样式属性：" class="headerlink" title="4.3.8 页面样式属性："></a>4.3.8 页面样式属性：</h4><p>page、page-break-inside、windows、orphans<br><a name="2c0d48c6"></a></p><h4 id="4-3-9-声音样式属性："><a href="#4-3-9-声音样式属性：" class="headerlink" title="4.3.9 声音样式属性："></a>4.3.9 声音样式属性：</h4><p>speak、speak-punctuation、speak-numeral、speak-header、speech-rate、volume、voice-family、pitch、pitch-range、stress、richness、、azimuth、elevation</p><p><a name="52035ff5"></a></p><h3 id="4-4-所有元素可以继承的属性"><a href="#4-4-所有元素可以继承的属性" class="headerlink" title="4.4 所有元素可以继承的属性"></a>4.4 所有元素可以继承的属性</h3><p>1、元素可见性：visibility<br>2、光标属性：cursor<br><a name="c2c4d0fd"></a></p><h3 id="4-5-内联元素可以继承的属性"><a href="#4-5-内联元素可以继承的属性" class="headerlink" title="4.5 内联元素可以继承的属性"></a>4.5 <strong>内联元素可以继承的属性</strong></h3><p>1、字体系列属性<br>2、除text-indent、text-align之外的文本系列属性<br><a name="bd1843f1"></a></p><h3 id="4-6-块级元素可以继承的属性"><a href="#4-6-块级元素可以继承的属性" class="headerlink" title="4.6 块级元素可以继承的属性"></a>4.6 <strong>块级元素可以继承的属性</strong></h3><p>1、text-indent、text-align</p>]]></content>
      
      
      <categories>
          
          <category> css入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3 CSS的三大特性（重叠性+优先级）</title>
      <link href="/2019/04/29/css%E5%85%A5%E9%97%A8/3%20CSS%E7%9A%84%E4%B8%89%E5%A4%A7%E7%89%B9%E6%80%A7%EF%BC%88%E9%87%8D%E5%8F%A0%E6%80%A7+%E4%BC%98%E5%85%88%E7%BA%A7%EF%BC%89/"/>
      <url>/2019/04/29/css%E5%85%A5%E9%97%A8/3%20CSS%E7%9A%84%E4%B8%89%E5%A4%A7%E7%89%B9%E6%80%A7%EF%BC%88%E9%87%8D%E5%8F%A0%E6%80%A7+%E4%BC%98%E5%85%88%E7%BA%A7%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="3-1-层叠性"><a href="#3-1-层叠性" class="headerlink" title="3.1 层叠性"></a>3.1 层叠性</h3><p>浏览器解析CSS是从上至下，当CSS冲突时以最后定义的CSS为准。<br>层叠性是指多种CSS样式的叠加。例如，当使用内嵌式CSS样式表定义</p><p>标记字号大小为12像素，链入式定义</p><p>标记颜色为红色，那么段落文本将显示为12像素红色，即这两种样式产生了叠加</p><p><a name="fffbf195"></a></p><h3 id="3-2-优先级"><a href="#3-2-优先级" class="headerlink" title="3.2 优先级"></a>3.2 优先级</h3><blockquote><p>优先级顺序为：!important&gt;style&gt;权重值</p></blockquote><p>权重记忆口诀:从0开始，一行内样式+1000，一个id+100，一个属性选择器/class或者一个元素名+10，或者伪元素+1</p><p>规则:相同的权重:以后面出现的选择器为最后规则<br>  不同的权重，权重值生效</p><p><a name="821b5e89"></a></p><h4 id="3-1-1-基本选择器"><a href="#3-1-1-基本选择器" class="headerlink" title="3.1.1 基本选择器"></a>3.1.1 基本选择器</h4><table><thead><tr><th>类型</th><th>权重</th></tr></thead><tbody><tr><td>标签选择器/div</td><td>1</td></tr><tr><td>class/类选择器 .right</td><td>10</td></tr><tr><td>id</td><td>100</td></tr><tr><td>内联</td><td>1000</td></tr><tr><td>*</td><td>0-1</td></tr></tbody></table><ul><li>后代</li><li>子代</li><li>交集</li><li>并集</li><li>相邻兄弟</li><li>兄弟</li><li>属性</li><li>伪类</li><li>伪元素</li></ul><blockquote><p>权重:每个单独的选择器的权重相加之和</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.header</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span>&#123;</span><br><span class="line"><span class="comment">/* 权重 12 : 10+1+1 */</span></span><br><span class="line">  <span class="attribute">backgournd</span>:red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.header</span> <span class="selector-class">.right</span> <span class="selector-tag">li</span>&#123;</span><br><span class="line"><span class="comment">/* 权重 21:10+10+1 */</span></span><br><span class="line">  <span class="attribute">backgournd</span>:<span class="number">#000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>权重相等的情况下比较<blockquote><p>id&gt;class&gt;标签&gt;*</p></blockquote></li></ul><ol><li>权重不相等的情况下: 谁的权重大，听谁的</li><li>权重相等的情况下:遵循就近原则，下面的覆盖上面的</li><li>权重相等,不遵循就近原则,就想听上面的怎么办<ol><li>!important 1000</li></ol></li></ol><p><a name="12251e10"></a></p><h4 id="3-2-1-权重算法"><a href="#3-2-1-权重算法" class="headerlink" title="3.2.1 权重算法"></a>3.2.1 权重算法</h4><p>第一等：代表内联样式，如: style=””，权值为1000。<br>第二等：代表ID选择器，如：#content，权值为0100。<br>第三等：代表类，伪类和属性选择器，如.content，权值为0010。<br>第四等：代表类型选择器和伪元素选择器，如div p，权值为0001。<br>通配符、子选择器、相邻选择器等的。如*、&gt;、+,权值为0000。<br>继承的样式没有权值。<br>优先级从高到低：行内选择符、ID选择符、类别选择符、元素选择符。</p><p>!important &gt; 行内样式&gt;ID选择器 &gt; 类选择器 &gt; 标签 &gt; 通配符 &gt; 继承 &gt; 浏览器默认属性<br>important &gt; 内联 &gt; ID &gt; 伪类|类 | 属性选择  &gt; 标签  &gt; 伪对象 &gt;  通配符 &gt; 继承</p>]]></content>
      
      
      <categories>
          
          <category> css入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2 选择器的世界</title>
      <link href="/2019/04/29/css%E5%85%A5%E9%97%A8/2%20%E9%80%89%E6%8B%A9%E5%99%A8%E7%9A%84%E4%B8%96%E7%95%8C/"/>
      <url>/2019/04/29/css%E5%85%A5%E9%97%A8/2%20%E9%80%89%E6%8B%A9%E5%99%A8%E7%9A%84%E4%B8%96%E7%95%8C/</url>
      
        <content type="html"><![CDATA[<h3 id="2-1-基本选择器"><a href="#2-1-基本选择器" class="headerlink" title="2.1 基本选择器"></a>2.1 基本选择器</h3><h4 id="2-1-1-标签选择器"><a href="#2-1-1-标签选择器" class="headerlink" title="2.1.1 标签选择器"></a>2.1.1 标签选择器</h4><blockquote><p>直接使用元素标签进行选择</p><p></p>  p{color:red;}  权重1<p></p></blockquote><p><a name="38e3a832"></a></p><h4 id="2-1-2-类选择器"><a href="#2-1-2-类选择器" class="headerlink" title="2.1.2 类选择器"></a>2.1.2 类选择器</h4><blockquote><p>通过元素的类名，来选择元素，一个元素可以有多个类名，都代表这个元素类名是元素class属性中的属性值，例如</p><p class="sum"></p>  .sum{} =&gt; 此选择器的权重为10<p></p></blockquote><p><a name="b724e274"></a></p><h4 id="2-1-3-id选择器"><a href="#2-1-3-id选择器" class="headerlink" title="2.1.3 id选择器"></a>2.1.3 id选择器</h4><blockquote><p>通过元素的id名，来选择元素，类名是元素id属性中的属性值，例如</p><p id="sum"></p><p></p><p>#sum{} =&gt; 此选择器的权重为100</p></blockquote><p><a name="2afce436"></a></p><h4 id="2-1-4-通配符选择器"><a href="#2-1-4-通配符选择器" class="headerlink" title="2.1.4 通配符选择器"></a>2.1.4 通配符选择器</h4><blockquote><p>通过*选择全部元素，包括根元素 *{} =&gt; 权重小于1，可以被覆盖</p></blockquote><p><a name="74805b93"></a></p><h3 id="2-2-并集选择器"><a href="#2-2-并集选择器" class="headerlink" title="2.2 并集选择器"></a>2.2 并集选择器</h3><p>你可以对选择器进行分组，这样，被分组的选择器就可以分享想相同的声明。用逗号被需要分组的选择器分开。在下面的例子中，我们对所有的标题元素进行了分组。所有的标题元素都是绿色的。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span>,<span class="selector-tag">h2</span>,<span class="selector-tag">h3</span>,<span class="selector-tag">h4</span>,<span class="selector-tag">h5</span>,<span class="selector-tag">h6</span>&#123;</span><br><span class="line"><span class="attribute">color</span>:green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="f28da659"></a></p><h3 id="2-3-交集选择器"><a href="#2-3-交集选择器" class="headerlink" title="2.3 交集选择器"></a>2.3 交集选择器</h3><p>两种属性同属一个元素的时候，我们可以使用交集选择器来进行元素的准确选择</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;p class=&apos;name1 name2&apos; id=&apos;id1&apos;&gt;&lt;/p&gt;</span><br><span class="line">p.name1&#123;&#125;</span><br><span class="line">p#id1&#123;&#125;</span><br><span class="line">.name1.name2&#123;&#125;</span><br></pre></td></tr></table></figure><p><a name="154ebf86"></a></p><h3 id="2-4-派生-后代-选择器"><a href="#2-4-派生-后代-选择器" class="headerlink" title="2.4 派生(后代)选择器"></a>2.4 派生(后代)选择器</h3><ul><li>通过依据元素在其位置的上下文关系来定义样式，你可以使标记更加简洁，用空格隔开列表中的strong元素变为斜体字，而不是通常的粗体字，可以这样定义一个派生选择器</li><li>后台选择器尽量不要超过3个，没有必要把每一个层级都写出来，只需要写出关键节点极客</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">li</span> <span class="selector-tag">strong</span>&#123;</span><br><span class="line"><span class="attribute">font-style</span>:italic;</span><br><span class="line">  <span class="attribute">font-weight</span>:normal;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;<span class="selector-tag">ol</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">li</span>&gt;</span><br><span class="line">  &lt;strong&gt;我是斜体字。这个因为strong元素位于li元素内。&lt;/stong&gt;</span><br><span class="line">  &lt;/li&gt;</span><br><span class="line">&lt;/ol&gt;</span><br></pre></td></tr></table></figure><p><a name="e4677c6a"></a></p><h3 id="2-5-子代选择器"><a href="#2-5-子代选择器" class="headerlink" title="2.5 子代选择器"></a>2.5 子代选择器</h3><blockquote><p>与后代选择器相比，子元素选择器只有选择作为某元素子元素，符号为大括号</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">h1 &gt; strong &#123;color:red;&#125;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;This is&lt;strong&gt;very&lt;/strong&gt; important.&lt;/h1&gt;</span><br></pre></td></tr></table></figure><p><a name="7f188471"></a></p><h3 id="2-6-相邻兄弟选择器"><a href="#2-6-相邻兄弟选择器" class="headerlink" title="2.6 相邻兄弟选择器"></a>2.6 相邻兄弟选择器</h3><blockquote><p>相邻兄弟选择器可选择紧接在另一元素后的元素，且二者有相同父元素</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">h1+p&#123;</span><br><span class="line">margin-top:50px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="a1d7e0c2"></a></p><h3 id="2-7-属性选择器"><a href="#2-7-属性选择器" class="headerlink" title="2.7 属性选择器"></a>2.7 属性选择器</h3><blockquote><p>对带有指定属性的html元素设置样式 权重10</p></blockquote><p>可以为拥有指定html元素设置样式，而不仅限于class和id属性</p><p>下面的例子为title属性的所有元素设置样式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[title]&#123;color:red;&#125;</span><br></pre></td></tr></table></figure><p>属性和值选择器<br>下面的例子为title=’wjw’的所有元素设置样式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[title=wjw]&#123;color:red;&#125;</span><br></pre></td></tr></table></figure><p>设置表单的样式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">input[type=&apos;text&apos;]&#123;width:150px;display:block;background:yellow&#125;</span><br></pre></td></tr></table></figure><p><a name="5c86d35f"></a></p><h3 id="2-8-伪装选择器"><a href="#2-8-伪装选择器" class="headerlink" title="2.8 伪装选择器"></a>2.8 伪装选择器</h3><ul><li>a:link{color:#ff000}  // 未访问的链接</li><li>a:visited{color::#ff000} // 已访问的链接</li><li>a:hover{color:#ff000} // 鼠标移动到链接上</li><li>a:active{color:#ff000} //选定的链接<blockquote><p>10&lt;权重&lt;11</p></blockquote></li></ul><table><thead><tr><th>选择器<br></th><th>示例</th><th>示例描述</th><th>CSS版本</th></tr></thead><tbody><tr><td><a href="https://www.html.cn/book/css/selectors/element/class.htm" target="_blank" rel="noopener">.class </a></td><td>.demo</td><td>选择 class=”demo” 的所有元素</td><td>1</td></tr><tr><td><a href="https://www.html.cn/book/css/selectors/element/id.htm" target="_blank" rel="noopener">#id</a></td><td>#firstname</td><td>选择 id=”firstname” 的所有元素</td><td>1</td></tr><tr><td><a href="https://www.html.cn/book/css/selectors/element/all.htm" target="_blank" rel="noopener">*</a></td><td>*</td><td>选择所有元素</td><td>2</td></tr><tr><td><a href="https://www.html.cn/book/css/selectors/element/e.htm" target="_blank" rel="noopener">element </a></td><td>p</td><td>选择所有 <p> 元素</p></td><td>1</td></tr><tr><td><a href="https://www.html.cn/book/css/selectors/element/e-e.htm" target="_blank" rel="noopener">element,element</a></td><td>div,p</td><td>选择所有 <div> 元素和所有 <p> 元素</p></div></td><td>1</td></tr><tr><td><a href="https://www.html.cn/book/css/selectors/relationship/ef.htm" target="_blank" rel="noopener">element element</a></td><td>div p</td><td>选择 <div> 元素内部的所有 <p> 元素</p></div></td><td>1</td></tr><tr><td><a href="https://www.html.cn/book/css/selectors/relationship/e-child-f.htm" target="_blank" rel="noopener">element&gt;element</a></td><td>div&gt;p</td><td>选择父元素为 <div> 元素的所有 <p> 元素</p></div></td><td>2</td></tr><tr><td><a href="https://www.html.cn/book/css/selectors/relationship/e-adjacent-f.htm" target="_blank" rel="noopener">element+element</a></td><td>div+p</td><td>选择紧接在 <div> 元素之后的所有 <p> 元素</p></div></td><td>2</td></tr><tr><td><a href="https://www.html.cn/book/css/selectors/attribute/att.htm" target="_blank" rel="noopener">[attribute]</a></td><td>[target]</td><td>选择带有 target 属性所有元素</td><td>2</td></tr><tr><td><a href="https://www.html.cn/book/css/selectors/attribute/att2.htm" target="_blank" rel="noopener">[attribute=value]</a></td><td>[target=_blank]</td><td>选择 target=”_blank” 的所有元素</td><td>2</td></tr><tr><td><a href="https://www.html.cn/book/css/selectors/attribute/att3.htm" target="_blank" rel="noopener">[attribute~=value]</a></td><td>[title~=flower]</td><td>选择 title 属性包含单词 “flower” 的所有元素</td><td>2</td></tr><tr><td>[[attribute</td><td>=value]](<a href="https://www.html.cn/book/css/selectors/attribute/att7.htm" target="_blank" rel="noopener">https://www.html.cn/book/css/selectors/attribute/att7.htm</a>)</td><td>[lang&#124;=en]</td><td>选择 lang 属性值以 “en” 开头的所有元素</td></tr><tr><td><a href="https://www.html.cn/book/css/selectors/pseudo-classes/link.htm" target="_blank" rel="noopener">:link</a></td><td>a:link</td><td>选择所有未被访问的链接</td><td>1</td></tr><tr><td><a href="https://www.html.cn/book/css/selectors/pseudo-classes/visited.htm" target="_blank" rel="noopener">:visited</a></td><td>a:visited</td><td>选择所有已被访问的链接</td><td>1</td></tr><tr><td><a href="https://www.html.cn/book/css/selectors/pseudo-classes/active.htm" target="_blank" rel="noopener">:active</a></td><td>a:active</td><td>选择活动链接</td><td>1</td></tr><tr><td><a href="https://www.html.cn/book/css/selectors/pseudo-classes/hover.htm" target="_blank" rel="noopener">:hover</a></td><td>a:hover</td><td>选择鼠标指针位于其上的链接</td><td>1</td></tr><tr><td><a href="https://www.html.cn/book/css/selectors/pseudo-classes/focus.htm" target="_blank" rel="noopener">:focus</a></td><td>input:focus</td><td>选择获得焦点的 input 元素</td><td>2</td></tr><tr><td><a href="https://www.html.cn/book/css/selectors/pseudo-element/first-letter.htm" target="_blank" rel="noopener">:first-letter</a></td><td>p:first-letter</td><td>选择每个 <p> 元素的首字母</p></td><td>1</td></tr><tr><td><a href="https://www.html.cn/book/css/selectors/pseudo-element/first-line.htm" target="_blank" rel="noopener">:first-line</a></td><td>p:first-line</td><td>选择每个 <p> 元素的首行</p></td><td>1</td></tr><tr><td><a href="https://www.html.cn/book/css/selectors/pseudo-classes/first-child.htm" target="_blank" rel="noopener">:first-child</a></td><td>p:first-child</td><td>选择属于父元素的第一个子元素的每个 <p> 元素</p></td><td>2</td></tr><tr><td><a href="https://www.html.cn/book/css/selectors/pseudo-element/before.htm" target="_blank" rel="noopener">:before</a></td><td>p:before</td><td>在每个 <p> 元素的内容之前插入内容</p></td><td>2</td></tr><tr><td><a href="https://www.html.cn/book/css/selectors/pseudo-element/after.htm" target="_blank" rel="noopener">:after</a></td><td>p:after</td><td>在每个 <p> 元素的内容之后插入内容</p></td><td>2</td></tr><tr><td><a href="https://www.html.cn/book/css/selectors/pseudo-classes/lang(fr).htm" target="_blank" rel="noopener">:lang(language)</a></td><td>p:lang(it)</td><td>选择带有以 “it” 开头的 lang 属性值的每个 <p> 元素</p></td><td>2</td></tr><tr><td><a href="https://www.html.cn/book/css/selectors/relationship/e-brother-f.htm" target="_blank" rel="noopener">element1~element2</a></td><td>p~ul</td><td>选择前面有 <p> 元素的每个 <ul> 元素</ul></p></td><td>3</td></tr><tr><td><a href="https://www.html.cn/book/css/selectors/attribute/att4.htm" target="_blank" rel="noopener">[attribute^=value] </a></td><td>a[src^=”https”]</td><td>选择其 src 属性值以 “https” 开头的每个 <a> 元素</a></td><td>3</td></tr><tr><td><a href="https://www.html.cn/book/css/selectors/attribute/att5.htm" target="_blank" rel="noopener">[attribute$=value]</a></td><td>a[src$=”.pdf”]</td><td>选择其 src 属性以 “.pdf” 结尾的所有 <a> 元素</a></td><td>3</td></tr><tr><td><a href="https://www.html.cn/book/css/selectors/attribute/att6.htm" target="_blank" rel="noopener">[attribute*=value]</a></td><td>a[src*=”abc”]</td><td>选择其 src 属性中包含 “abc” 子串的每个 <a> 元素</a></td><td>3</td></tr><tr><td><a href="https://www.html.cn/book/css/selectors/pseudo-classes/first-of-type.htm" target="_blank" rel="noopener">:first-of-type</a></td><td>p:first-of-type</td><td>选择属于其父元素的首个 <p> 元素的每个 </p><p> 元素</p></td><td>3</td></tr><tr><td><a href="https://www.html.cn/book/css/selectors/pseudo-classes/last-of-type.htm" target="_blank" rel="noopener">:last-of-type</a></td><td>p:last-of-type</td><td>选择属于其父元素的最后 <p> 元素的每个 </p><p> 元素</p></td><td>3</td></tr><tr><td><a href="https://www.html.cn/book/css/selectors/pseudo-classes/only-of-type.htm" target="_blank" rel="noopener">:only-of-type</a></td><td>p:only-of-type</td><td>选择属于其父元素唯一的 <p> 元素的每个 </p><p> 元素</p></td><td>3</td></tr><tr><td><a href="https://www.html.cn/book/css/selectors/pseudo-classes/only-child.htm" target="_blank" rel="noopener">:only-child</a></td><td>p:only-child</td><td>选择属于其父元素的唯一子元素的每个 <p> 元素</p></td><td>3</td></tr><tr><td><a href="https://www.html.cn/book/css/selectors/pseudo-classes/nth-child(n).htm" target="_blank" rel="noopener">:nth-child(n)</a></td><td>p:nth-child(2)</td><td>选择属于其父元素的第二个子元素的每个 <p> 元素</p></td><td>3</td></tr><tr><td><a href="https://www.html.cn/book/css/selectors/pseudo-classes/nth-last-child(n).htm" target="_blank" rel="noopener">:nth-last-child(n) </a></td><td>p:nth-last-child(2)</td><td>同上，从最后一个子元素开始计数</td><td>3</td></tr><tr><td><a href="https://www.html.cn/book/css/selectors/pseudo-classes/nth-of-type(n).htm" target="_blank" rel="noopener">:nth-of-type(n)</a></td><td>p:nth-of-type(2)</td><td>选择属于其父元素第二个 <p> 元素的每个 </p><p> 元素</p></td><td>3</td></tr><tr><td><a href="https://www.html.cn/book/css/selectors/pseudo-classes/nth-last-of-type(n).htm" target="_blank" rel="noopener">:nth-last-of-type(n)</a></td><td>p:nth-last-of-type(2)</td><td>同上，但是从最后一个子元素开始计数</td><td>3</td></tr><tr><td><a href="https://www.html.cn/book/css/selectors/pseudo-classes/last-child.htm" target="_blank" rel="noopener">:last-child </a></td><td>p:last-child</td><td>选择属于其父元素最后一个子元素每个 <p> 元素</p></td><td>3</td></tr><tr><td><a href="https://www.html.cn/book/css/selectors/pseudo-classes/root.htm" target="_blank" rel="noopener">:root</a></td><td>:root</td><td>选择文档的根元素</td><td>3</td></tr><tr><td><a href="https://www.html.cn/book/css/selectors/pseudo-classes/empty.htm" target="_blank" rel="noopener">:empty </a></td><td>p:empty</td><td>选择没有子元素的每个 <p> 元素（包括文本节点）</p></td><td>3</td></tr><tr><td><a href="https://www.html.cn/book/css/selectors/pseudo-classes/target.htm" target="_blank" rel="noopener">:target</a></td><td>#news:target</td><td>选择当前活动的 #news 元素</td><td>3</td></tr><tr><td><a href="https://www.html.cn/book/css/selectors/pseudo-classes/enabled.htm" target="_blank" rel="noopener">:enabled </a></td><td>input:enabled</td><td>选择每个启用的 <input> 元素</td><td>3</td></tr><tr><td><a href="https://www.html.cn/book/css/selectors/pseudo-classes/disabled.htm" target="_blank" rel="noopener">:disabled</a></td><td>input:disabled</td><td>选择每个禁用的 <input> 元素</td><td>3</td></tr><tr><td><a href="https://www.html.cn/book/css/selectors/pseudo-classes/checked.htm" target="_blank" rel="noopener">:checked</a></td><td>input:checked</td><td>选择每个被选中的 <input> 元素</td><td>3</td></tr><tr><td><a href="https://www.html.cn/book/css/selectors/pseudo-classes/not(s).htm" target="_blank" rel="noopener">:not(selector)</a></td><td>:not(p)</td><td>选择非 <p> 元素的每个元素</p></td><td>3</td></tr><tr><td><a href="https://www.html.cn/book/css/selectors/pseudo-element/selection.htm" target="_blank" rel="noopener">::selection </a></td><td>::selection</td><td>选择被用户选取的元素部分</td><td>3</td></tr><tr><td><a href="https://www.html.cn/book/css/selectors/element/out-of-range.htm" target="_blank" rel="noopener">:out-of-range </a></td><td>:out-of-range</td><td>匹配值在指定区间之外的input元素</td><td>3</td></tr><tr><td><a href="https://www.html.cn/book/css/selectors/element/in-range.htm" target="_blank" rel="noopener">:in-range</a></td><td>:in-range</td><td>匹配值在指定区间之内的input元素</td><td>3</td></tr><tr><td><a href="https://www.html.cn/book/css/selectors/element/read-write.htm" target="_blank" rel="noopener">:read-write </a></td><td>:read-write</td><td>用于匹配可读及可写的元素</td><td>3</td></tr><tr><td><a href="https://www.html.cn/book/css/selectors/element/read-only.htm" target="_blank" rel="noopener">:read-only</a></td><td>:read-only</td><td>用于匹配设置 “readonly”（只读） 属性的元素</td><td>3</td></tr><tr><td><a href="https://www.html.cn/book/css/selectors/element/optional.htm" target="_blank" rel="noopener">:optional</a></td><td>:optional</td><td>用于匹配可选的输入元素</td><td>3</td></tr><tr><td><a href="https://www.html.cn/book/css/selectors/element/required.htm" target="_blank" rel="noopener">:required</a></td><td>:required</td><td>用于匹配设置了 “required” 属性的元素</td><td>3</td></tr><tr><td><a href="https://www.html.cn/book/css/selectors/element/valid.htm" target="_blank" rel="noopener">:valid </a></td><td>:valid</td><td>用于匹配输入值为合法的元素</td><td>3</td></tr><tr><td><a href="https://www.html.cn/book/css/selectors/element/invalid.htm" target="_blank" rel="noopener">:invalid</a></td><td>:invalid</td><td>用于匹配输入值为非法的元素</td><td>3</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> css入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1 css引入与规范</title>
      <link href="/2019/04/28/css%E5%85%A5%E9%97%A8/1%20css%E5%BC%95%E5%85%A5%E4%B8%8E%E8%A7%84%E8%8C%83/"/>
      <url>/2019/04/28/css%E5%85%A5%E9%97%A8/1%20css%E5%BC%95%E5%85%A5%E4%B8%8E%E8%A7%84%E8%8C%83/</url>
      
        <content type="html"><![CDATA[<h3 id="1-1-导入式"><a href="#1-1-导入式" class="headerlink" title="1.1 导入式"></a>1.1 导入式</h3><p>导入式会在整个网页装载完后再装载CSS文件，因此这就导致了一个问题，如果网页比较大则会儿出现先显示无样式的页面，闪烁一下之后，再出现网页的样式。这是导入式固有的一个缺陷。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">media</span>=<span class="string">"screen"</span>&gt;</span>   </span><br><span class="line"><span class="css">@<span class="keyword">import</span> url(<span class="string">"CSS文件"</span>);   </span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><br><a id="more"></a>### 1.2 外链式引入一个外部的css样式表<br>语言:link标签 href="css样式路径名称" 可以放在head标签或者body标签里面<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=<span class="string">"stylesheet"</span> type=<span class="string">"text/css"</span> href=<span class="string">"index.css"</span>&gt;</span><br></pre></td></tr></table></figure><p><a name="ea268ffe"></a></p><h3 id="1-3-外链式和导入式的区别"><a href="#1-3-外链式和导入式的区别" class="headerlink" title="1.3 外链式和导入式的区别"></a>1.3 外链式和导入式的区别</h3><ul><li>link和@import虽然都是引入外部的css文件，但是他们是有天差地别的区别的</li><li>link是html标签，@import完全是css提供的方式，要写在css文件或者style标签中。</li><li>他们的加载顺序也是有区别的，当一个页面被加载的时间，link引用的css文件会被同时加载，而@import引入的css文件会等页面全部下载完后再加载。</li><li>当使用JavaScript控制DOM去改变css样式的时间，只能使用link标签，因为import是不能被DOM控制的</li></ul><p><a name="41d63a8b"></a></p><h3 id="1-4-行内式"><a href="#1-4-行内式" class="headerlink" title="1.4 行内式"></a>1.4 行内式</h3><blockquote><p>通过style这个标签属性，将css键值对直接写入标签内</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p style="width:100px;height:100px;background-color:red;"&lt;/p&gt;</span><br></pre></td></tr></table></figure><p><a name="93b452a1"></a></p><h3 id="1-5-内嵌式"><a href="#1-5-内嵌式" class="headerlink" title="1.5 内嵌式"></a>1.5 内嵌式</h3><p>可以放在head或者body里 建议放在head标签里面title标签的下面<style><br /></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">  选择器&#123;</span><br><span class="line">  声明;</span><br><span class="line">    声明;</span><br><span class="line">    ....</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a name="bxENs"></a></p><h3 id="1-6-css的代码规范"><a href="#1-6-css的代码规范" class="headerlink" title="1.6 css的代码规范"></a>1.6 css的代码规范</h3><ul><li>必须使用英文开头，硬切开头字母一律小写</li><li>所有的命名最好都小写</li><li>尽量不要用缩写英文，除非可以一目了然的</li><li>如果遇到相差不大class或者id，主功能识别字母在钱，位置识别字母在后，位置识别字母第一个可大写（如：navTop，menuLeft）</li><li>遵循驼峰命名法:第一个单词的首字母小写，其余每一个有意义的单词的首字母大写(如:studentInfo、getElementById)</li></ul></style></p>]]></content>
      
      
      <categories>
          
          <category> css入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7 服务器</title>
      <link href="/2019/04/15/%E5%89%8D%E7%AB%AF%E4%BC%98%E5%8C%96%E6%96%B9%E6%A1%88/7%20%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2019/04/15/%E5%89%8D%E7%AB%AF%E4%BC%98%E5%8C%96%E6%96%B9%E6%A1%88/7%20%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="7-1-Gzip组件"><a href="#7-1-Gzip组件" class="headerlink" title="7.1 Gzip组件"></a>7.1 Gzip组件</h3><p>　　前端工程师可以想办法明显地缩短通过网络传输HTTP请求和响应的时间。毫无疑问，终端用户的带宽速度，网络服务商，对等交换点的距离等等，都是开发团队所无法控制的。但还有别的能够影响响应时间的因素，压缩可以通过减少HTTP响应的大小来缩短响应时间。<br>从HTTP/1.1开始，web客户端就有了支持压缩的Accept-Encoding HTTP请求头。</p><table><thead><tr><th>1</th><th><code>Accept-Encoding: gzip, deflate</code></th></tr></thead></table><p>　　如果web服务器看到这个请求头，它就会用客户端列出的一种方式来压缩响应。web服务器通过Content-Encoding相应头来通知客户端。</p><table><thead><tr><th>1</th><th><code>Content-Encoding: gzip</code></th></tr></thead></table><p>　　尽可能多地用gzip压缩能够给页面减肥，这也是提升用户体验最简单的方法。<br> <br><br><a name="6481396a"></a></p><h3 id="7-2-避免图片src属性为空"><a href="#7-2-避免图片src属性为空" class="headerlink" title="7.2 避免图片src属性为空"></a>7.2 避免图片src属性为空</h3><p>Image with empty string <strong>src</strong>属性是空字符串的图片很常见，主要以两种形式出现：</p><ol><li><p>straight HTML</p></li><li><img src="””"></li><li><p>JavaScript</p></li><li><p>var img = new Image();<br>img.src = “”;</p></li></ol><p>这两种形式都会引起相同的问题：浏览器会向服务器发送另一个请求。<br>　<a name="e3f8790b"></a></p><h3 id="7-3-配置ETags"><a href="#7-3-配置ETags" class="headerlink" title="7.3 配置ETags"></a>7.3 配置ETags</h3><p>　　实体标签（ETags），是服务器和浏览器用来决定浏览器缓存中组件与源服务器中的组件是否匹配的一种机制（“实体”也就是组件：图片，脚本，样式表等等）。添加ETags可以提供一种实体验证机制，比最后修改日期更加灵活。一个ETag是一个字符串，作为一个组件某一具体版本的唯一标识符。唯一的格式约束是字符串必须用引号括起来，源服务器用相应头中的<code>ETag</code>来指定组件的ETag：</p><table><thead><tr><th>1<br>2<br>3<br>4</th><th><code>HTTP/1.1 200 OK</code><br><code>``Last-Modified: Tue, 12 Dec 2006 03:03:59 GMT</code><br><code>``ETag: &quot;10c24bc-4ab-457e1c1f&quot;</code><br><code>``Content-Length: 12195</code></th></tr></thead></table><p>　　然后，如果浏览器必须验证一个组件，它用<code>If-None-Match</code>请求头来把ETag传回源服务器。如果ETags匹配成功，会返回一个304状态码，这样就减少了12195个字节的响应体。<br>GET /i/yahoo.gif HTTP/1.1<br>      Host: us.yimg.com<br>      If-Modified-Since: Tue, 12 Dec 2006 03:03:59 GMT<br>      If-None-Match: “10c24bc-4ab-457e1c1f”<br>      HTTP/1.1 304 Not Modified<br><br><br>** **<a name="1e49a106"></a></p><h3 id="7-4-对Ajax用GET请求"><a href="#7-4-对Ajax用GET请求" class="headerlink" title="7.4 对Ajax用GET请求"></a>7.4 对Ajax用GET请求</h3><p>　　邮箱团队发现使用<code>XMLHttpRequest</code>时，浏览器的POST请求是通过一个两步的过程来实现的：先发送HTTP头，在发送数据。所以最好用GET请求，它只需要发送一个TCP报文（除非cookie特别多）。IE的URL长度最大值是2K，所以如果要发送的数据超过2K就无法使用GET了。<br>POST请求的一个有趣的副作用是实际上没有发送任何数据，就像GET请求一样。正如<a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html" target="_blank" rel="noopener">HTTP说明文档</a>中描述的，GET请求是用来检索信息的。所以它的语义只是用GET请求来请求数据，而不是用来发送需要存储到服务器的数据。<br> <br><br><a name="4fdc0fc0"></a></p><h3 id="7-5-尽早清空缓冲区"><a href="#7-5-尽早清空缓冲区" class="headerlink" title="7.5 尽早清空缓冲区"></a>7.5 尽早清空缓冲区</h3><p>　当用户请求一个页面时，服务器需要用大约200到500毫秒来组装HTML页面，在这期间，浏览器闲等着数据到达。PHP中有一个<a href="http://php.net/flush" target="_blank" rel="noopener">flush()</a>函数，允许给浏览器发送一部分已经准备完毕的HTML响应，以便浏览器可以在后台准备剩余部分的同时开始获取组件，好处主要体现在很忙的后台或者很“轻”的前端页面上（P.S. 也就是说，响应时耗主要在后台方面时最能体现优势）。<br>　　较理想的清空缓冲区的位置是HEAD后面，因为HTML的HEAD部分通常更容易生成，并且允许引入任何CSS和JavaScript文件，这样就可以让浏览器在后台还在处理的时候就开始并行获取组件。<br>例如：<br>… <!-- css, js --><br>    <br>    <?php flush(); ?><br>    <body><br>      … <!-- content --><br><br><a name="2db42cb3"></a></body></p><h3 id="7-6-使用CDN（内容分发网络）"><a href="#7-6-使用CDN（内容分发网络）" class="headerlink" title="7.6 使用CDN（内容分发网络）"></a>7.6 使用CDN（内容分发网络）</h3><p>　　用户与服务器的物理距离对响应时间也有影响。把内容部署在多个地理位置分散的服务器上能让用户更快地载入页面。但具体要怎么做呢？<br>　　实现内容在地理位置上分散的第一步是：不要尝试去重新设计你的web应用程序来适应分布式结构。这取决于应用程序，改变结构可能包括一些让人望而生畏的任务，比如同步会话状态和跨服务器复制数据库事务（翻译可能不准确）。缩短用户和内容之间距离的提议可能被推迟，或者根本不可能通过，就是因为这个难题。<br>　　记住终端用户80%到90%的响应时间都花在下载页面组件上了：图片，样式，脚本，Flash等等，这是业绩黄金法则。最好先分散静态内容，而不是一开始就重新设计应用程序结构。这不仅能够大大减少响应时间，还更容易表现出CDN的功劳。<br>　　内容分发网络（CDN）是一组分散在不同地理位置的web服务器，用来给用户更高效地发送内容。典型地，选择用来发送内容的服务器是基于网络距离的衡量标准的。例如：选跳数（hop）最少的或者响应时间最快的服务器。<br><br><a name="d59ef000"></a></p><h3 id="7-7-添上Expires或者Cache-Control-HTTP头"><a href="#7-7-添上Expires或者Cache-Control-HTTP头" class="headerlink" title="7.7 添上Expires或者Cache-Control HTTP头"></a>7.7 添上Expires或者Cache-Control HTTP头</h3><p>这条规则有两个方面：</p><ul><li>对于静态组件：通过设置一个遥远的将来时间作为<code>Expires</code>来实现永不失效</li><li>多余动态组件：用合适的<code>Cache-Control</code>HTTP头来让浏览器进行条件性的请求</li></ul><p>　　网页设计越来越丰富，这意味着页面里有更多的脚本，图片和Flash。站点的新访客可能还是不得不提交几个HTTP请求，但通过使用有效期能让组件变得可缓存，这避免了在接下来的浏览过程中不必要的HTTP请求。有效期HTTP头通常被用在图片上，但它们应该用在所有组件上，包括脚本、样式和Flash组件。<br>　　浏览器（和代理）用缓存来减少HTTP请求的数目和大小，让页面能够更快加载。web服务器通过有效期HTTP响应头来告诉客户端，页面的各个组件应该被缓存多久。用一个遥远的将来时间做有效期，告诉浏览器这个响应在2010年4月15日前不会改变。</p><table><thead><tr><th>1</th><th><code>Expires: Thu, 15 Apr 2010 20:00:00 GMT</code></th></tr></thead></table><p><br>如果你用的是Apache服务器，用ExpiresDefault指令来设置相对于当前日期的有效期。下面的例子设置了从请求时间起10年的有效期：<br>ExpiresDefault “access plus 10 years”<br> <br> <br><br><a name="401c9742"></a></p><h3 id="7-8-减少dns查询"><a href="#7-8-减少dns查询" class="headerlink" title="7.8 减少dns查询"></a>7.8 减少dns查询</h3><p>域名系统建立了主机名和IP地址间的映射，就像电话簿上人名和号码的映射一样。当你在浏览器输入<a href="http://www.shanghai70.com的时候，浏览器就会联系DNS解析器返回服务器的IP地址。DNS是有成本的，它需要20到120毫秒去查找给定主机名的IP地址。在DNS查找完成之前，浏览器无法从主机名下载任何东西。" target="_blank" rel="noopener">www.shanghai70.com的时候，浏览器就会联系DNS解析器返回服务器的IP地址。DNS是有成本的，它需要20到120毫秒去查找给定主机名的IP地址。在DNS查找完成之前，浏览器无法从主机名下载任何东西。</a><br>　　DNS查找被缓存起来更高效，由用户的ISP（网络服务提供商）或者本地网络存在一个特殊的缓存服务器上，但还可以缓存在个人用户的计算机上。DNS信息被保存在操作系统的DNS cache(微软Windows上的”DNS客户端服务”)里。大多数浏览器有独立于操作系统的自己的cache。只要浏览器在自己的cache里还保留着这条记录，它就不会向操作系统查询DNS。<br>　　IE默认缓存DNS查找30分钟，写在<code>DnsCacheTimeout</code>注册表设置中。Firefox缓存1分钟，可以用<code>network.dnsCacheExpiration</code>配置项设置。(Fasterfox把缓存时间改成了1小时 P.S. Fasterfox是FF的一个提速插件)<br>　　如果客户端的DNS cache是空的（包括浏览器的和操作系统的），DNS查找数等于页面上不同的主机名数，包括页面URL，图片，脚本文件，样式表，Flash对象等等组件中的主机名，减少不同的主机名就可以减少DNS查找。<br>　　减少不同主机名的数量同时也减少了页面能够并行下载的组件数量，避免DNS查找削减了响应时间，而减少并行下载数量却增加了响应时间。我的原则是把组件分散在2到4个主机名下，这是同时减少DNS查找和允许高并发下载的折中方案。</p><p><a name="9782a1e6"></a></p><h3 id="7-9-避免重定向"><a href="#7-9-避免重定向" class="headerlink" title="7.9 避免重定向"></a>7.9 避免重定向</h3><p>重定向用301和302状态码，下面是一个有301状态码的HTTP头</p><blockquote><p>HTTP/1.1 301 Moved Permanently<br>      Location: <a href="http://example.com/newuri" target="_blank" rel="noopener">http://example.com/newuri</a><br>      Content-Type: text/html</p></blockquote><p>浏览器会自动跳转到<code>Location</code>域指明的URL。重定向需要的所有信息都在HTTP头部，而响应体一般是空的。其实额外的HTTP头，比如<code>Expires</code>和<code>Cache-Control</code>也表示重定向。除此之外还有别的跳转方式：refresh元标签和JavaScript，但如果你必须得做重定向，最好用标准的3xxHTTP状态码，主要是为了让返回按钮能正常使用。<br>　　牢记重定向会拖慢用户体验，在用户和HTML文档之间插入重定向会延迟页面上的所有东西，页面无法渲染，组件也无法开始下载，直到HTML文档被送达浏览器。<br>　　有一种常见的极其浪费资源的重定向，而且web开发人员一般都意识不到这一点，就是URL尾部缺少一个斜线的时候。例如，跳转到<a href="http://astrology.yahoo.com/astrology" target="_blank" rel="noopener">http://www.shanghai70.com/a</a>会返回一个重定向到<a href="http://astrology.yahoo.com/astrology" target="_blank" rel="noopener">http://www.shanghai70.com/</a>b的301响应（注意添在尾部的斜线）。在Apache中可以用<code>Alias</code>，<code>mod_rewrite</code>或者<code>DirectorySlash</code>指令来取消不必要的重定向。<br>　　重定向最常见的用途是把旧站点连接到新的站点，还可以连接同一站点的不同部分，针对用户的不同情况（浏览器类型，用户帐号类型等等）做一些处理。用重定向来连接两个网站是最简单的，只需要少量的额外代码。虽然在这些时候使用重定向减少了开发人员的开发复杂度，但降低了用户体验。一种替代方案是用<code>Alias</code>和<code>mod_rewrite</code>，前提是两个代码路径都在相同的服务器上。如果是因为域名变化而使用了重定向，就可以创建一条CNAME（创建一个指向另一个域名的DNS记录作为别名）结合<code>Alias</code>或者<code>mod_rewrite</code>指令。</p><p><a name="dcc80b83"></a></p><h3 id="7-10-Json格式传输"><a href="#7-10-Json格式传输" class="headerlink" title="7.10 Json格式传输"></a>7.10 Json格式传输</h3><p>在客户端和服务器端进行数据通信的时候，我们尽量采用json格式进行数据传输</p><ul><li>json格式的数据，能够清晰明了的展示出数据结构，而且也方便我们获取的操作</li><li>相对于很早以前的xml格式传输，json格式的数据更加轻量级</li><li>客户端和服务器端都支持json格式数据的处理，处理起来非常的方便</li></ul><p>真实项目中:并不是所有的数据都基于json，我们尽可能这样做，但是对于某些特殊的需求(例如文件流的传输或者文档传输)，使用json就不合适了</p>]]></content>
      
      
      <categories>
          
          <category> 前端优化方案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端优化方案 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6 cookie</title>
      <link href="/2019/04/15/%E5%89%8D%E7%AB%AF%E4%BC%98%E5%8C%96%E6%96%B9%E6%A1%88/6%20cookie/"/>
      <url>/2019/04/15/%E5%89%8D%E7%AB%AF%E4%BC%98%E5%8C%96%E6%96%B9%E6%A1%88/6%20cookie/</url>
      
        <content type="html"><![CDATA[<h3 id="6-1-给Cookie减肥"><a href="#6-1-给Cookie减肥" class="headerlink" title="6.1 给Cookie减肥"></a>6.1 给Cookie减肥</h3><p>使用cookie的原因有很多，比如授权和个性化。HTTP头中cookie信息在web服务器和浏览器之间交换。重要的是保证cookie尽可能的小，以最小化对用户响应时间的影响。</p><ul><li>清除不必要的cookie</li><li>保证cookie尽可能小，以最小化对用户响应时间的影响</li><li>注意给cookie设置合适的域级别，以免影响其它子域</li><li>设置合适的有效期，更早的有效期或者none可以更快的删除cookie，提高用户响应时间</li></ul><p><a name="42ef8014"></a></p><h3 id="6-2-把组件放在不含cookie的域下"><a href="#6-2-把组件放在不含cookie的域下" class="headerlink" title="6.2 把组件放在不含cookie的域下"></a>6.2 把组件放在不含cookie的域下</h3><p>当浏览器发送对静态图像的请求时，cookie也会一起发送，而服务器根本不需要这些cookie。所以它们只会造成没有意义的网络通信量，应该确保对静态组件的请求不含cookie。可以创建一个子域，把所有的静态组件都部署在那儿。<br>如果域名是<a href="http://www.example.org，可以把静态组件部署到static.example.org。然而，如果已经在顶级域example.org或者www.example.org设置了cookie，那么所有对static.example.org的请求都会含有这些cookie。这时候可以再买一个新域名，把所有的静态组件部署上去，并保持这个新域名不含cookie。Yahoo!用的是yimg.com，YouTube是ytimg.com，Amazon是images-amazon.com等等。" target="_blank" rel="noopener">www.example.org，可以把静态组件部署到static.example.org。然而，如果已经在顶级域example.org或者www.example.org设置了cookie，那么所有对static.example.org的请求都会含有这些cookie。这时候可以再买一个新域名，把所有的静态组件部署上去，并保持这个新域名不含cookie。Yahoo!用的是yimg.com，YouTube是ytimg.com，Amazon是images-amazon.com等等。</a><br> 把静态组件部署在不含cookie的域下还有一个好处是有些代理可能会拒绝缓存带cookie的组件。有一点需要注意：如果不知道应该用example.org还是<a href="http://www.example.org作为主页，可以考虑一下cookie的影响。省略www的话，就只能把cookie写到*.example.org，所以因为性能原因最好用www子域，并且把cookie写到这个子域下。" target="_blank" rel="noopener">www.example.org作为主页，可以考虑一下cookie的影响。省略www的话，就只能把cookie写到*.example.org，所以因为性能原因最好用www子域，并且把cookie写到这个子域下。</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端优化方案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端优化方案 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5 移动端</title>
      <link href="/2019/04/15/%E5%89%8D%E7%AB%AF%E4%BC%98%E5%8C%96%E6%96%B9%E6%A1%88/5%20%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
      <url>/2019/04/15/%E5%89%8D%E7%AB%AF%E4%BC%98%E5%8C%96%E6%96%B9%E6%A1%88/5%20%E7%A7%BB%E5%8A%A8%E7%AB%AF/</url>
      
        <content type="html"><![CDATA[<p><a name="bba78aed"></a></p><h3 id="5-1-保证所有组件都小于25K"><a href="#5-1-保证所有组件都小于25K" class="headerlink" title="5.1 保证所有组件都小于25K"></a>5.1 保证所有组件都小于25K</h3><p>这个限制是因为iPhone不能缓存大于25K的组件，注意这里指的是未压缩的大小。这就是为什么缩减内容本身也很重要，因为单纯的gzip可能不够。<br><a name="84c8c3ad"></a></p><h3 id="5-2-把组件打包到一个复合文档里"><a href="#5-2-把组件打包到一个复合文档里" class="headerlink" title="5.2 把组件打包到一个复合文档里"></a>5.2 把组件打包到一个复合文档里</h3><p>把各个组件打包成一个像有附件的电子邮件一样的复合文档里，可以用一个HTTP请求获取多个组件（记住一点：HTTP请求是代价高昂的）。用这种方式的时候，要先检查用户代理是否支持（iPhone就不支持）。</p>]]></content>
      
      
      <categories>
          
          <category> 前端优化方案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端优化方案 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4 优化html</title>
      <link href="/2019/04/15/%E5%89%8D%E7%AB%AF%E4%BC%98%E5%8C%96%E6%96%B9%E6%A1%88/4%20%E4%BC%98%E5%8C%96html/"/>
      <url>/2019/04/15/%E5%89%8D%E7%AB%AF%E4%BC%98%E5%8C%96%E6%96%B9%E6%A1%88/4%20%E4%BC%98%E5%8C%96html/</url>
      
        <content type="html"><![CDATA[<p><a name="1301f740"></a></p><h3 id="4-1-audio或者video标签"><a href="#4-1-audio或者video标签" class="headerlink" title="4.1 audio或者video标签"></a>4.1 audio或者video标签</h3><p>如果当页面中出现audio或者video标签，我们最好设置它们的preload=:页面加载的时候，音视频资源不进行加载，播放的时候再开始加载(减少页面首次加载http请求的次数)</p><ul><li>preload=auto 页面首次加载的时候就把音频资源进行加载</li><li>preload=metadata 页面首次加载的时候只能音视资源的头部信息进行加载</li></ul><p><a name="59738ecf"></a></p><h3 id="4-2-尽量少用iframe"><a href="#4-2-尽量少用iframe" class="headerlink" title="4.2 尽量少用iframe"></a>4.2 尽量少用iframe</h3><p>　　用iframe可以把一个HTML文档插入到父文档里，重要的是明白iframe是如何工作的并高效地使用它。<br><code>&lt;iframe&gt;</code>的优点：</p><ul><li>引入缓慢的第三方内容，比如标志和广告</li><li>安全沙箱</li><li>并行下载脚本</li></ul><p><code>&lt;iframe&gt;</code>的缺点：</p><ul><li>代价高昂，即使是空白的iframe</li><li>阻塞页面加载</li><li>非语义</li></ul><p><a name="d501e480"></a></p><h3 id="4-3-杜绝404"><a href="#4-3-杜绝404" class="headerlink" title="4.3 杜绝404"></a>4.3 杜绝404</h3><p>　　HTTP请求代价高昂，完全没有必要用一个HTTP请求去获取一个无用的响应（比如404 Not Found），只会拖慢用户体验而没有任何好处。<br>　　有些站点用的是有帮助的404——“你的意思是xxx？”，这样做有利于用户体验，，但也浪费了服务器资源（比如数据库等等）。最糟糕的是链接到的外部JavaScript有错误而且结果是404。首先，这种下载将阻塞并行下载。其次，浏览器会试图解析404响应体，因为它是JavaScript代码，需要找出其中可用的部分。</p>]]></content>
      
      
      <categories>
          
          <category> 前端优化方案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端优化方案 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3 优化js</title>
      <link href="/2019/04/15/%E5%89%8D%E7%AB%AF%E4%BC%98%E5%8C%96%E6%96%B9%E6%A1%88/3%20%E4%BC%98%E5%8C%96js/"/>
      <url>/2019/04/15/%E5%89%8D%E7%AB%AF%E4%BC%98%E5%8C%96%E6%96%B9%E6%A1%88/3%20%E4%BC%98%E5%8C%96js/</url>
      
        <content type="html"><![CDATA[<h3 id="3-1-去除重复脚本"><a href="#3-1-去除重复脚本" class="headerlink" title="3.1 去除重复脚本"></a>3.1 去除重复脚本</h3><p>页面含有重复的脚本文件会影响性能，这可能和你想象的不一样。在对美国前10大web站点的评审中，发现只有2个站点含有重复脚本。两个主要原因增加了在单一页面中出现重复脚本的几率：团队大小和脚本数量。在这种情况下，重复脚本会创建不必要的HTTP请求，执行无用的JavaScript代码，而影响页面性能。<br>　　IE会产生不必要的HTTP请求，而Firefox不会。在IE中，如果一个不可缓存的外部脚本被页面引入了两次，它会在页面加载时产生两个HTTP请求。即使脚本是可缓存的，在用户重新加载页面时也会产生额外的HTTP请求。<br>　　除了产生没有意义的HTTP请求之外，多次对脚本求值也会浪费时间。因为无论脚本是否可缓存，在Firefox和IE中都会执行冗余的JavaScript代码。<br>　　避免不小心把相同脚本引入两次的一种方法就是在模版系统中实现脚本管理模块。典型的脚本引入方法就是在HTML页面中用SCRIPT标签：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"menu_1.0.17.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><a name="1ada9ae6"></a></p><h3 id="3-2-尽量减少DOM访问"><a href="#3-2-尽量减少DOM访问" class="headerlink" title="3.2 尽量减少DOM访问"></a>3.2 尽量减少DOM访问</h3><p>一个复杂的页面意味着要下载更多的字节，而且用JavaScript访问DOM也会更慢。举个例子，想要添加一个事件处理器的时候，循环遍历页面上的500个DOM元素和5000个DOM元素是有区别的。<br>操作dom的弊端</p><ul><li>dom存在映射在机制(js中的dom元素对象和页面中dom结构是存在映射机制的，一改则都改)，这种映射机制，是浏览器安卓w3c标准完成对js语言的构建和dom的构建(其实就是构建一个监听机制)，操作dom是同事修改两个地址，相对于一些其他的js编程来说消耗性能的。</li><li>页面中的dom结构改变或者样式改变，会触发浏览器的回流(浏览器会把dom结构重新进行计算，这个操作很耗性能)和重绘(吧一个元素的样式重新渲染)</li></ul><p>在做dom事件绑定的时候，尽量避免一个个的事件绑定，二采用性能更高的事件委托来实现</p><blockquote><p>事件委托(事件代理)<br>把时间板顶给外层容器，当里面的后代元素相关行为被处罚，外层容器绑定的方法也会被触发执行(冒泡传播机制导致)，通过的事件源是谁，我们做不同的操作即可</p></blockquote><p><br>用JavaScript访问DOM元素是很慢的，所以，为了让页面反应更迅速，应该：</p><ul><li>缓存已访问过的元素的索引</li><li>先“离线”更新节点，再把它们添到DOM树上</li><li>避免用JavaScript修复布局问题</li></ul><p><br>DOM元素的数量很容易测试，只需要在控制台里输入<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementsByTagName(<span class="string">'*'</span>).length</span><br></pre></td></tr></table></figure><p><a name="6bccd519"></a></p><h3 id="3-3-用智能的事件处理器"><a href="#3-3-用智能的事件处理器" class="headerlink" title="3.3 用智能的事件处理器"></a>3.3 用智能的事件处理器</h3><p>　有时候感觉页面反映不够灵敏，是因为有太多频繁执行的事件处理器被添加到了DOM树的不同元素上，这就是推荐使用事件委托的原因。如果一个<code>div</code>里面有10个按钮，应该只给div容器添加一个事件处理器，而不是给每个按钮都添加一个。事件能够冒泡，所以可以捕获事件并得知哪个按钮是事件源。</p><p><a name="68d3d8d0"></a></p><h3 id="3-4-更多异步操作编译"><a href="#3-4-更多异步操作编译" class="headerlink" title="3.4 更多异步操作编译"></a>3.4 更多异步操作编译</h3><ul><li><p>同步编程会导致:上面东西完不成，下面任务也做不了，我们开发的时候，可以把某一个区域模块都设置为异步编程，这样只要模块之间没有必然的先后顺序，都可以独立进行加载，不会受到上面模块的堵塞影响(用的不多)</p></li><li><p>尤其是ajax数据请求，我们一般都要使用异步编程，最好是基于promise设计模式进行管理(项目中经常使用fetch、vue、axios)等插件进行ajax请求处理，因为这些插件中就是基于promise设计模式对ajax进行了封装处理</p></li><li><p>在真实的项目中，我们尽可能避免一次性循环过多数据(因为循环操作是同步编程)，尤其是要避免while导致的死循环操作<br><a name="d41d8cd9"></a><br>###<br><a name="bd92af56"></a></p><h3 id="3-5-JS中避免使用eval"><a href="#3-5-JS中避免使用eval" class="headerlink" title="3.5 JS中避免使用eval"></a>3.5 JS中避免使用eval</h3></li><li><p>性能消耗大</p></li><li><p>代码压缩后，容易出现代码执行错乱问题</p></li></ul><p><a name="a628d98f"></a></p><h3 id="3-6-JS中尽量减少闭包的使用"><a href="#3-6-JS中尽量减少闭包的使用" class="headerlink" title="3.6 JS中尽量减少闭包的使用"></a>3.6 JS中尽量减少闭包的使用</h3><ul><li>闭包会形成一个不销毁的栈内存，过多的栈内存累积影响页面的性能</li><li>还会容易导致内存的泄露</li><li>闭包也有自己的优势:保存和保护，我们只能尽量减少，但是无法避免<br><a name="d41d8cd9-1"></a><br>####<br><a name="f3161c6e"></a><h3 id="3-7-尽量使用css3动替代js动画"><a href="#3-7-尽量使用css3动替代js动画" class="headerlink" title="3.7 尽量使用css3动替代js动画"></a>3.7 尽量使用css3动替代js动画</h3>css3的动画或者变形都开启了硬件加速，性能比js动画好</li></ul><p><a name="5eddf87e"></a></p><h3 id="3-8-缓存做处理"><a href="#3-8-缓存做处理" class="headerlink" title="3.8 缓存做处理"></a>3.8 缓存做处理</h3><p>对于不经常更新的数据，最好采用浏览器的304缓存做处理<br>例如:<br>第一次请求css和js下拉，浏览器会把请求的内容缓存起来，如果做了304处理，用户再次请求css和js直接从缓存中读取，不需要再去服务器获取了(减少了http请求次数)<br>当用户强制刷新页面(ctrl+f5)或者当前缓存的css或者js发生了变动，都会从新从服务器端拉取<br>对于客户端来讲，我们还可以基于localStronge来做一些本地存储，例如:第一次请求的数据或者不经常更新的css和js，我们都可以吧内容存储在本地，下一次页面加载，我们从本地中获取即可，我们设定一定的期限或者一些标识，可以控制在某个阶段重新从服务器获取</p><p><a name="db22f898"></a></p><h3 id="3-9-设计模式"><a href="#3-9-设计模式" class="headerlink" title="3.9 设计模式"></a>3.9 设计模式</h3><p>编写js代码的时候尽可能使用设计模式来构建体系，方便后期的维护，也提高了扩充性等</p><p><a name="7e6b48f9"></a></p><h3 id="3-10-把脚本放在底部"><a href="#3-10-把脚本放在底部" class="headerlink" title="3.10 把脚本放在底部"></a>3.10 把脚本放在底部</h3><p>脚本会阻塞并行下载，HTTP/1.1官方文档建议浏览器每个主机名下并行下载的组件数不要超过两个，如果图片来自多个主机名，并行下载的数量就可以超过两个。如果脚本正在下载，浏览器就不开始任何其它下载任务，即使是在不同主机名下的。<br>　　有时候，并不容易把脚本移动到底部。举个例子，如果脚本是用<code>document.write</code>插入到页面内容中的，就没办法再往下移了。还可能存在作用域问题，在多数情况下，这些问题都是可以解决的。<br>　　一个常见的建议是用推迟（deferred）脚本，有<code>DEFER</code>属性的脚本意味着不能含有document.write，并且提示浏览器告诉他们可以继续渲染。不幸的是，Firefox不支持<code>DEFER</code>属性。在IE中，脚本可能被推迟，但不尽如人意。如果脚本可以推迟，我们就可以把它放到页面底部，页面就可以更快地载入。<br></p><p><a name="0dd60414"></a></p><h3 id="3-11-压缩js"><a href="#3-11-压缩js" class="headerlink" title="3.11 压缩js"></a>3.11 压缩js</h3><ul><li>使用在线网站进行压缩<br></li><li>使用html-minifier 对html 中的css 进行压缩<br></li><li>使用uglifjs2对js进行压缩</li><li>webpack,gulp打包工具</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端优化方案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端优化方案 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2 优化图片</title>
      <link href="/2019/04/15/%E5%89%8D%E7%AB%AF%E4%BC%98%E5%8C%96%E6%96%B9%E6%A1%88/2%20%E4%BC%98%E5%8C%96%E5%9B%BE%E7%89%87/"/>
      <url>/2019/04/15/%E5%89%8D%E7%AB%AF%E4%BC%98%E5%8C%96%E6%96%B9%E6%A1%88/2%20%E4%BC%98%E5%8C%96%E5%9B%BE%E7%89%87/</url>
      
        <content type="html"><![CDATA[<p><a name="03721654"></a></p><h3 id="2-1-图片格式"><a href="#2-1-图片格式" class="headerlink" title="2.1 图片格式"></a>2.1 图片格式</h3><p>尝试把GIF格式转换成PNG格式，看看是否节省空间。在所有的PNG图片上运行pngcrush（或者其它PNG优化工具）<br></p><p><a name="7ca81980"></a></p><h3 id="2-2-优化CSS-Sprite"><a href="#2-2-优化CSS-Sprite" class="headerlink" title="2.2 优化CSS Sprite"></a>2.2 优化CSS Sprite</h3><blockquote><p>采用css雪碧图(css sprit/css 图片精灵)技术，吧一些小图合并在一张大图上面，使用的时候，通过北京图片定位，定位到具体的某一张小图上</p></blockquote><ul><li>在Sprite图片中横向排列一般都比纵向排列的最终文件小</li><li>组合Sprite图片中的相似颜色可以保持低色数，最理想的是256色以下PNG8格式</li><li>“对移动端友好”，不要在Sprite图片中留下太大的空隙。虽然不会在很大程度上影响图片文件的大小，但这样做可以节省用户代理把图片解压成像素映射时消耗的内存。100×100的图片是1万个像素，而1000×1000的图片就是100万个像素了。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.pubBg</span>&#123;</span><br><span class="line"><span class="attribute">background</span>:<span class="built_in">url</span>(<span class="string">'../img/sprit.png'</span>) no-repeat;</span><br><span class="line">  background-size:x y; // 和原图的大小保持一致</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">background-position:x y; // 通过背景定位，定位到具体的位置，展示不同的图片极客</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>页面中没法送一次http请求，都需要完成请求+响应这个完整的http事务，会消耗一些时间，也可能会导致http链接通道的堵塞,为了提高页面的加载速度和运行的性能，我们应该减少http的请求次数和减少请求内容的大小。</p></blockquote><p><a name="d9e99a1a"></a></p><h3 id="2-3-图像映射"><a href="#2-3-图像映射" class="headerlink" title="2.3 图像映射"></a>2.3 图像映射</h3><p>可以把多张图片合并成单张图片，总大小是一样的，但减少了请求数并加速了页面加载。图片映射只有在图像在页面中连续的时候才有用，比如导航条。给image map设置坐标的过程既无聊又容易出错，用image map来做导航也不容易，所以不推荐用这种方式。</p><p><a name="d80f8e80"></a></p><h3 id="2-4-行内图片（Base64编码）"><a href="#2-4-行内图片（Base64编码）" class="headerlink" title="2.4 行内图片（Base64编码）"></a>2.4 行内图片（Base64编码）</h3><p>用data: URL模式来把图片嵌入页面。这样会增加HTML文件的大小，把行内图片放在（缓存的）样式表中是个好办法，而且成功避免了页面变“重”。但目前主流浏览器并不能很好地支持行内图片。<br>减少页面的HTTP请求数是个起点，这是提升站点首次访问速度的重要指导原则。</p><p><a name="66880f80"></a></p><h3 id="2-5-不要用HTML缩放图片"><a href="#2-5-不要用HTML缩放图片" class="headerlink" title="2.5 不要用HTML缩放图片"></a>2.5 不要用HTML缩放图片</h3><p> 不要因为在HTML中可以设置宽高而使用本不需要的大图。如果需要</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">width</span>=<span class="string">"100"</span> <span class="attr">height</span>=<span class="string">"100"</span> <span class="attr">src</span>=<span class="string">"mycat.jpg"</span> <span class="attr">alt</span>=<span class="string">"My Cat"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p> 那么图片本身（mycat.jpg）应该是100x100px的，而不是去缩小500x500px的图片。</p><p><a name="02b0cda0"></a></p><h3 id="2-6-用小的可缓存的favicon-ico（P-S-收藏夹图标）"><a href="#2-6-用小的可缓存的favicon-ico（P-S-收藏夹图标）" class="headerlink" title="2.6 用小的可缓存的favicon.ico（P.S. 收藏夹图标）"></a>2.6 用小的可缓存的favicon.ico（P.S. 收藏夹图标）</h3><p>favicon.ico是放在服务器根目录的图片，它会带来一堆麻烦，因为即便你不管它，浏览器也会自动请求它，所以最好不要给一个404 Not Found响应。而且只要在同一个服务器上，每次请求它时都会发送cookie，此外这个图片还会干扰下载顺序，例如在IE中，当你在onload中请求额外组件时，将会先下载favicon。<br>所以为了缓解favicon.ico的缺点，应该确保：</p><ul><li>足够小，最好在1K以下</li><li>设置合适的有效期HTTP头（以后如果想换的话就不能重命名了），把有效期设置为几个月后一般比较安全，可以通过检查当前favicon.ico的最后修改日期来确保变更能让浏览器知道。</li></ul><p><a name="79a822c5"></a></p><h3 id="2-7-压缩image"><a href="#2-7-压缩image" class="headerlink" title="2.7 压缩image"></a>2.7 压缩image</h3><ul><li>使用雪花图<br><ul><li>使用雪花图 <a href="http://www.spritecow.com/" target="_blank" rel="noopener">http://www.spritecow.com/</a><br></li></ul></li><li>使用矢量图<br><ul><li>使用矢量图字体  <a href="http://fontawesome.dashgame.com/" target="_blank" rel="noopener">http://fontawesome.dashgame.com/</a><br></li><li>使用阿里矢量图库 <a href="http://www.iconfont.cn/" target="_blank" rel="noopener">http://www.iconfont.cn/</a><br></li><li>使用矢量图转成字体 <a href="https://icomoon.io/" target="_blank" rel="noopener">https://icomoon.io/</a><br></li></ul></li><li>使用base64转换<br></li><li>使用网站压缩  <br><ul><li>使用无损压缩 <a href="https://tinypng.com/" target="_blank" rel="noopener">https://tinypng.com/</a><br></li><li>png转换webp <a href="http://zhitu.isux.us/" target="_blank" rel="noopener">http://zhitu.isux.us/</a><br></li></ul></li><li>合理使用格式图片<br><ul><li>jpg有损压缩，压缩率搞，不支持透明<br></li><li>png支持透明，浏览器兼容好<br></li><li>webp压缩程度更好，在ios webview有兼容性问题<br></li><li>svg矢量图，代码内嵌，相对于较小，图片样式相对简单的场景<br></li></ul></li></ul><p>在使用webp的过程中，会产生一些浏览器兼容问题</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkWebp</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">document</span>.createElement(<span class="string">'canvas'</span>).toDataURL(<span class="string">'image/webp'</span>).indexOf(<span class="string">'data:image/webp'</span>) == <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">       &#125;<span class="keyword">catch</span>(err) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> webp_good = checkWebp();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(webp_good == <span class="literal">false</span>) &#123;</span><br><span class="line"></span><br><span class="line">            $(<span class="string">'img'</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> src = $(<span class="keyword">this</span>).attr(<span class="string">'src'</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">typeof</span> src != <span class="string">'undefined'</span>) &#123;</span><br><span class="line"></span><br><span class="line">                src = src.replace(<span class="string">'/format,webp'</span>, <span class="string">'/format,jpg'</span>); <span class="comment">//将webp格式转换成jpg格式</span></span><br><span class="line"></span><br><span class="line">                $(<span class="keyword">this</span>).attr(<span class="string">'src'</span>, src);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> original = $(<span class="keyword">this</span>).attr(<span class="string">'original'</span>);        <span class="comment">//针对用了懒加载的情况</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">typeof</span> original != <span class="string">'undefined'</span>) &#123;</span><br><span class="line"></span><br><span class="line">                original = original.replace(<span class="string">'/format,webp'</span>, <span class="string">'/format,jpg'</span>); <span class="comment">//将webp格式转换成jpg格式</span></span><br><span class="line"></span><br><span class="line">                $(<span class="keyword">this</span>).attr(<span class="string">'original'</span>, original);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><a name="c1926126"></a></p><h3 id="2-8-图片懒加载"><a href="#2-8-图片懒加载" class="headerlink" title="2.8 图片懒加载"></a>2.8 图片懒加载</h3><p>采用图片懒加载技术，在页面开始加载时候，不请求真实的图片地址，而是默认图占位，当页面加载完成后，在根据相关的条件依次加载真实的图片(减少页面首次加载http请求的次数)<br>真实项目中，我们开始图片都不加载，页面首次加载完成，先把第一屏幕中看见的图片进行加载，随着页面的滚动，在下面区域中能够呈现出来的图片进行加载</p><ul><li>根据图片懒加载技术，我们还可以扩充出，数据懒加载</li></ul><p>开始加载页面的时候，我们只把首屏或者前两屏的数据从服务器进行请求(有些网站首屏数据是后台渲染好，整体返回给客户端呈现的)</p><ul><li>当页面下拉，滚动到哪个区域，在把这个区域需要的数据进行请求(请求回来数据绑定以及图片延迟加载等)</li><li>分页展示技术采用的也是数据懒加载思想实现的:如果我们开始请求获取的数据是很多的数据，我们最好分批请求，开始只请求第一页的数据，当页面点击第二页(微博是下拉到一定距离后，再请求第二页数据)的时候请求第二页数据。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端优化方案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端优化方案 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1 优化css</title>
      <link href="/2019/04/15/%E5%89%8D%E7%AB%AF%E4%BC%98%E5%8C%96%E6%96%B9%E6%A1%88/1%20%E4%BC%98%E5%8C%96css/"/>
      <url>/2019/04/15/%E5%89%8D%E7%AB%AF%E4%BC%98%E5%8C%96%E6%96%B9%E6%A1%88/1%20%E4%BC%98%E5%8C%96css/</url>
      
        <content type="html"><![CDATA[<h3 id="1-1-避免使用CSS表达式"><a href="#1-1-避免使用CSS表达式" class="headerlink" title="1.1 避免使用CSS表达式"></a>1.1 避免使用CSS表达式</h3><p>用CSS表达式动态设置CSS属性，是一种强大又危险的方式。从IE5开始支持，但从IE8起就不推荐使用了。例如，可以用CSS表达式把背景颜色设置成按小时交替的</p><ul><li>尽量减少标签选择器的使用</li><li>尽可能少使用id选择器，多使用样式选择器(通用性强)</li><li>减少选择器前缀，例如.headerBox .nav .left a{} 选择器是从右向左查询的</li><li>避免使用css表达式</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background-color</span>: <span class="selector-tag">expression</span>( (<span class="selector-tag">new</span> <span class="selector-tag">Date</span>())<span class="selector-class">.getHours</span>()%2 ? "<span class="selector-id">#B8D4FF</span>" : "<span class="selector-id">#F08A00</span>" );</span><br></pre></td></tr></table></figure><p><a name="cdf0508c"></a></p><h3 id="1-2-减少页面中的冗余代码"><a href="#1-2-减少页面中的冗余代码" class="headerlink" title="1.2 减少页面中的冗余代码"></a>1.2 减少页面中的冗余代码</h3><p>尽可能提高方法的重复使用率：“低耦合高内聚”</p><p><a name="a5919800"></a></p><h3 id="1-3-选择舍弃-import"><a href="#1-3-选择舍弃-import" class="headerlink" title="1.3 选择舍弃@import"></a>1.3 选择<link>舍弃@import</h3><blockquote><p>前面提到了一个最佳实践：为了实现逐步渲染，CSS应该放在顶部。<br>在IE中用<code>@import</code>与在底部用<code>&lt;link&gt;</code>效果一样，所以最好不要用它。</p></blockquote><p><a name="545e9579"></a></p><h3 id="1-4-避免使用滤镜"><a href="#1-4-避免使用滤镜" class="headerlink" title="1.4 避免使用滤镜"></a>1.4 避免使用滤镜</h3><p>IE专有的<code>AlphaImageLoader</code>滤镜可以用来修复IE7之前的版本中半透明PNG图片的问题。在图片加载过程中，这个滤镜会阻塞渲染，卡住浏览器，还会增加内存消耗而且是被应用到每个元素的，而不是每个图片，所以会存在一大堆问题。<br>最好的方法是干脆不要用<code>AlphaImageLoader</code>，而优雅地降级到用在IE中支持性很好的PNG8图片来代替。如果非要用<code>AlphaImageLoader</code>，应该用下划线hack：<code>_filter</code>来避免影响IE7及更高版本的用户。<br><a name="d41d8cd9"></a></p><p>###<br><a name="c066b667"></a></p><h3 id="1-5-把样式表放在顶部"><a href="#1-5-把样式表放在顶部" class="headerlink" title="1.5 把样式表放在顶部"></a>1.5 把样式表放在顶部</h3><p>把样式表放到文档的HEAD部分能让页面看起来加载地更快。这是因为把样式表放在head里能让页面逐步渲染。<br>　　关注性能的前端工程师想让页面逐步渲染。也就是说，我们想让浏览器尽快显示已有内容，这在页面上有一大堆内容或者用户网速很慢时显得尤为重要。给用户显示反馈（比如进度指标）的重要性已经被广泛研究过，并且被记录下来了。在我们的例子中，HTML页面就是进度指标！当浏览器逐渐加载页面头部，导航条，顶部logo等等内容的时候，这些都被正在等待页面加载的用户当作反馈，能够提高整体用户体验。</p><p><a name="517c6177"></a></p><h3 id="1-6-压缩-css"><a href="#1-6-压缩-css" class="headerlink" title="1.6 压缩 css"></a>1.6 压缩 css</h3><ul><li>使用在线网站进行压缩</li><li>使用html-minifier 对html 中的css 进行压缩<br></li><li>使用clean-css 对css进行压缩</li><li>webpack,gulp打包工具</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端优化方案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端优化方案 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>11.函数基础</title>
      <link href="/2019/04/10/JavaScript%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/11%20%E5%87%BD%E6%95%B0%E5%9F%BA%E7%A1%80/"/>
      <url>/2019/04/10/JavaScript%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/11%20%E5%87%BD%E6%95%B0%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<ul><li>函数是指一段在一起的、可以做某一件事儿的程序。也叫做子程序、(OOP中)方法</li><li>函数实现某一个功能的方法</li></ul><h2 id="创建函数"><a href="#创建函数" class="headerlink" title="创建函数"></a>创建函数</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">functoin [函数名]()&#123;</span><br><span class="line"><span class="comment">// =&gt; [函数体]</span></span><br><span class="line">    <span class="comment">// 实现功能的具体js代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="执行函数"><a href="#执行函数" class="headerlink" title="执行函数"></a>执行函数</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">函数名(); <span class="comment">// 创建的函数执行，而且这个函数可以执行很多次</span></span><br><span class="line">函数名();</span><br></pre></td></tr></table></figure><p>每一次执行都相当于把函数体重实现功能的js代码重复执行了一遍</p><blockquote><p>在真实的项目中，我们一般都会把实现一个具体功能的代码封装到函数中</p></blockquote><ul><li>如果当前这个功能需要在页面中执行多次，不封装成为函数，每一次实现这个功能，都需要重新吧代码写一遍，浪费时间；而封装在一个函数中，以后想实现多次这个功能，我们就没有必要在重新写代码，只需要把函数重新的执行即可，提高了开发效率</li><li>封装在一个函数，页面中就基本上很难重复一样的代码了，减少了页面中代码的冗余度，提高了代码的重复利用率: <code>低耦合高内聚</code></li></ul><blockquote><p>我们把以上的特点成为<strong>函数封装</strong> (OOP面向对象编程思想，需要我们掌握的就是类的继承、封装、多态)</p></blockquote><h2 id="JS中函数的核心原理"><a href="#JS中函数的核心原理" class="headerlink" title="JS中函数的核心原理"></a>JS中函数的核心原理</h2><blockquote><p>函数作为js中引用数据类型中的一种，也是按照引用地址操作的</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> total = <span class="number">1</span>+<span class="number">1</span>;</span><br><span class="line">  total *= <span class="number">20</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(total.toFixed(<span class="number">2</span>));</span><br><span class="line">&#125;</span><br><span class="line">sum();</span><br></pre></td></tr></table></figure><h3 id="创建函数-1"><a href="#创建函数-1" class="headerlink" title="创建函数"></a>创建函数</h3><ul><li>首先会在当前作用中声明一个函数名(声明的函数和使用var声明变量是一样的操作:var sum;function cum;这两个名字算重复了)</li><li>浏览器首先会开辟一个新的内存空间(奉陪一个16进制地址)，把函数体重写好的代码当做普通字符串存储在这个内存空间(创建一个函数如果不执行，函数没有意义)</li><li>把内存空间的地址赋值给之前声明的那个函数名</li></ul><h3 id="函数执行"><a href="#函数执行" class="headerlink" title="函数执行"></a>函数执行</h3><ul><li>目的:把之前存储的实现具体功能的js代码执行</li><li>函数执行，浏览器首先会为其开辟新的<code>私有作用域</code>(只能执行函数中之前编写的js代码)</li><li>形参赋值</li><li>私有作用中的变量升级</li><li>把之前穿件时间存储的那些js代码字符串，拿到自由作用域中，然后把题目变成js表达式从上到下执行</li><li>私有作用域是否销毁的问题</li></ul><br>![image.png](https://cdn.nlark.com/yuque/0/2019/png/271124/1553076800854-5e22d4eb-aa50-40a1-a8de-6abbd5cf8939.png#align=left&display=inline&height=203&name=image.png&originHeight=406&originWidth=986&size=115231&status=done&width=493)<br><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><blockquote><p>函数执行会形成一个私有的作用域，让里面的私有变量和外界互不影响(相互干扰、外面的无法直接获取里面的变量值)，此时我们可以理解为私有作用域把私有变量保护起来，我们把这种保护机制称为为<code>闭包</code></p></blockquote><h3 id="栈内存"><a href="#栈内存" class="headerlink" title="栈内存"></a>栈内存</h3><blockquote><p>作用域(全局作用域/私有作用域):提供一个供js代码执行的环境</p></blockquote><h3 id="堆内存"><a href="#堆内存" class="headerlink" title="堆内存"></a>堆内存</h3><blockquote><p>所有的引用数据类型，他们需要存储的内容都是堆内存中(相当于一个仓库，目的是存储信息)</p></blockquote><ul><li>对象会吧键值队存储起来</li><li>函数会把代码当做字符串存储起来</li></ul><h2 id="函数中形参和实参"><a href="#函数中形参和实参" class="headerlink" title="函数中形参和实参"></a>函数中形参和实参</h2><ul><li>形参:相当于生成洗衣机的时候提供的入口，需要用户执行函数的时候把需要的值传递进来，形参是个变量，用来春初和接口那些值</li><li>实参:用户执行的时候传递给形参的具体指</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 随便求出两个数的和</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">num1,num2</span>)</span>&#123; <span class="comment">//num1/num2就是形参变量(类似于var了一下)</span></span><br><span class="line"><span class="keyword">var</span> total = num1 + num2;</span><br><span class="line">    total*=<span class="number">10</span>;</span><br><span class="line">    total=total.toFixed(<span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(total);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sum(<span class="number">10</span>,<span class="number">20</span>);<span class="comment">//10/20是实参  num1=10 num2=20</span></span><br><span class="line">sum(<span class="number">10</span>); <span class="comment">// num1=10 num2=undefined 定义了形参但是执行的时候，没有传递实参，默认实参就是undefined</span></span><br></pre></td></tr></table></figure><h2 id="arguments实参集合"><a href="#arguments实参集合" class="headerlink" title="arguments实参集合"></a>arguments实参集合</h2><blockquote><p>当我们不知道用户具体要传递几个值的时候(传递几个值都行)，此时我们无法设置形参的个数:遇到此类需要，需要使用函数内置的实参集合：arguments</p></blockquote><ul><li>argument 只有函数才有</li><li>不管执行函数的时候是否传递实参，arguments天生就纯在，没有传递实参ARG是个空的集合传递了ARG中包含了所有传递的实参值</li><li>不管是否设置了形参，ARG中始终存储了所有的实参信息</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">arguments</span>)</span><br><span class="line">&#125;</span><br><span class="line">sum(<span class="number">10</span>,<span class="number">20</span>,<span class="string">'wjh'</span>,&#123;<span class="attr">name</span>:<span class="string">'wjw'</span>&#125;);</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1553077856793-ee7e01c4-6aff-4baf-b57a-4a6a01f7e9b2.png#align=left&display=inline&height=153&name=image.png&originHeight=306&originWidth=1272&size=59435&status=done&width=636" alt="image.png"></p><ul><li>arguments 是个类数组集合<ul><li>以数字作为索引(属性名)，从0开始</li><li>arguments[0] 第一个实参信息</li><li>arguments[2] 第三个实参信息</li><li>arguments[n] 第n+1个实参信息</li></ul></li><li>有一个length的属性，存储的是当前几个的长度(当前传递实参的个数)<ul><li>arguments.length</li><li>arguments[‘length’]</li><li>arguments.calle 存储的是当前函数本身</li><li>arguments.calle.caller 存储的是当前函数只在哪执行的(宿主函数)，在全局作用域下执行的，结果是null</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">arguments</span>.callee.caller);<span class="comment">//f</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">sum(<span class="number">10</span>,<span class="number">20</span>,<span class="string">'wjh'</span>,&#123;<span class="attr">name</span>:<span class="string">'wjw'</span>&#125;);</span><br><span class="line">&#125;</span><br><span class="line">fn();</span><br></pre></td></tr></table></figure><p>// arguments.call或者arguments.call.caller一般真正项目中很少使用，因为是在严格js模式下不允许我们直接使用这两个属性，然而现有项目大部分都是基于严格模式来的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 任意数求和</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> total = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i =<span class="number">0</span>;i&lt;<span class="built_in">arguments</span>.length;i++)&#123;</span><br><span class="line">  <span class="keyword">var</span> cur = <span class="built_in">Number</span>(<span class="built_in">arguments</span>[i]);</span><br><span class="line">    !<span class="built_in">isNaN</span>(cur)?total += cur : <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">  consloe.log(total);</span><br><span class="line">  <span class="keyword">return</span> total;</span><br><span class="line">  <span class="comment">// return 后面跟着的都是值(返回的都是值):此处不少TOTAL变量返回，而是吧total存储到值返回而已</span></span><br><span class="line">  <span class="comment">// return 60;</span></span><br><span class="line">&#125;</span><br><span class="line">sum(<span class="number">10</span>,<span class="number">20</span>,<span class="number">20</span>);</span><br><span class="line">sum();</span><br><span class="line">sum(<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="string">'wjw'</span>)</span><br><span class="line"><span class="comment">// console.log(total); </span></span><br><span class="line"><span class="comment">//=&gt;Uncaught ReferenceError: total is not defined 闭包的保护机制导致作用域会保护里面的私有变量</span></span><br></pre></td></tr></table></figure><h2 id="JS中的返回值return"><a href="#JS中的返回值return" class="headerlink" title="JS中的返回值return"></a>JS中的返回值return</h2><blockquote><p>返回值是函数提供的一个出口:我们如果想在外面使用函数私有的一些信息，那么就需要通过return，把这些信息返回出来供外面使用</p></blockquote><p>sum:代表的是函数本身<br>sum() 让函数先执行，代表的是当前函数返回的结果(return)后面是啥，相当于函数返回的是啥</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> total = <span class="number">0</span>;</span><br><span class="line">    renturn</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sum());</span><br><span class="line"><span class="comment">// 如果函数中没有return或者return后面啥也没有，默认返回的结果是undefined</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> total = <span class="number">0</span>;</span><br><span class="line">    renturn;</span><br><span class="line">    <span class="built_in">console</span>.log(sum());</span><br><span class="line">  <span class="comment">// 函数体重遇到return后，return后面的代码都不在执行了</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="js中匿名函数"><a href="#js中匿名函数" class="headerlink" title="js中匿名函数"></a>js中匿名函数</h2><blockquote><p>没有名字的函数</p></blockquote><ul><li>函数表达式</li><li>自执行函数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">oBox.onclick = function()&#123;</span><br><span class="line">// 把一个码云名字的函数(有名字的也无所谓)作为值赋值给一个变量或者一个元素的某一个事件等,函数表达式</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(function(n)&#123;</span><br><span class="line">// 创建函数和执行函数放在一起，穿件完成立马之执行:自执行函数</span><br><span class="line">  // n 形参 n=10</span><br><span class="line">&#125;)(10)</span><br><span class="line"></span><br><span class="line">// 以下都是自执行函数，符号只有控制语法规范</span><br><span class="line">~function()&#123;&#125;(10)</span><br><span class="line">-function()&#123;&#125;(10)</span><br><span class="line">+function()&#123;&#125;(10)</span><br><span class="line">!function()&#123;&#125;(10)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript基础入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript基础入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>10.数组的函数</title>
      <link href="/2019/04/10/JavaScript%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/10%20%E6%95%B0%E7%BB%84%E7%9A%84%E5%87%BD%E6%95%B0/"/>
      <url>/2019/04/10/JavaScript%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/10%20%E6%95%B0%E7%BB%84%E7%9A%84%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="数组的基础结构"><a href="#数组的基础结构" class="headerlink" title="数组的基础结构"></a>数组的基础结构</h2><ul><li>数组也是对象数据类型 typeof [] -&gt; ‘object’</li><li>数组也是属性名，只不过属性名是数字，我们把数字属性名称之为它的索引:数组是以数字为索引，索引从零开始，有一个length属性代表数组的长度</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1553145017026-b9ebbcdf-4f0a-427b-ad67-d539a8d3150e.png#align=left&display=inline&height=190&name=image.png&originHeight=380&originWidth=536&size=31500&status=done&width=268" alt="image.png"><br></p><blockquote><p>类数组：类似于数组，但是不是数组</p></blockquote><ul><li>通过getElementsByTageName 获取的元素集合是类数组</li><li>函数中的实参集合argument也是类数组</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1553145133119-f28b8564-9f9f-452f-85d0-c35fd41ec072.png#align=left&display=inline&height=107&name=image.png&originHeight=214&originWidth=366&size=42973&status=done&width=183" alt="image.png"><br> </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// for 循环操作</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i =<span class="number">0</span>;i&lt;ary.length;i++)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(ary[i])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// for in 循环操作</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> ary)&#123;</span><br><span class="line"><span class="comment">// key:属性名(数组中的属性名是索引)</span></span><br><span class="line"><span class="built_in">console</span>.log(ary[key]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// for 循环只能遍历到数组私有的一些属性，而for in 循环可以吧一些自定义的公共属性也能遍历到</span></span><br></pre></td></tr></table></figure><h2 id="数组中的常用方法"><a href="#数组中的常用方法" class="headerlink" title="数组中的常用方法"></a>数组中的常用方法</h2><blockquote><p>数组中有很多方法</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.dir(<span class="built_in">Array</span>.prototype)</span><br></pre></td></tr></table></figure><ul><li>方法的意义和作用</li><li>方法的形参</li><li>方法的返回值</li><li>通过此方法，原来的数组是否发生了改变</li></ul><blockquote><p>实现数组的增加、修改、删除</p></blockquote><h3 id="增加"><a href="#增加" class="headerlink" title="增加"></a>增加</h3><h3 id="push-向数组的末尾追加新内容"><a href="#push-向数组的末尾追加新内容" class="headerlink" title="push : 向数组的末尾追加新内容"></a>push : 向数组的末尾追加新内容</h3><p>参数:一到多个，任何数据类型都可以，想要给数组末尾追加什么，直接传递到push方法中极客，传递多个逗号隔开<br>返回值:新增后数组的长度<br>原有数组改变了</p><h3 id="unshift-向数组开头追加新内容"><a href="#unshift-向数组开头追加新内容" class="headerlink" title="unshift:向数组开头追加新内容"></a>unshift:向数组开头追加新内容</h3><p>参数:需要追加的内容(可以是多个任何数据类型的值)<br>返回值:新增后 数组的长度<br>原来数组改变了</p><p>把数组当做一个普通的对象，使用对象键值对的操作，给其设置新的属性(索引)<br>ary[ary.length]=xxx 向数组的末尾追加了新的内容</p><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><h3 id="pop-删除数组最后一项"><a href="#pop-删除数组最后一项" class="headerlink" title="pop 删除数组最后一项"></a>pop 删除数组最后一项</h3><p>参数:无<br>返回值:被删除的那一项内容<br>原有数组改变了</p><h3 id="shift-删除数组第一项"><a href="#shift-删除数组第一项" class="headerlink" title="shift:删除数组第一项"></a>shift:删除数组第一项</h3><p>参数:无<br>返回值:被删除那一项的内容<br>原有数组改变了<br>使用shift删除第一项之后，后面每一项的索引都要向前进一位(导致后面项的索引发生了改变)</p><p>把数组当做一个普通对象操作<br>delete删除:delete ary[索引]删除指定索引这一项(当前项被删除后),原有数组其它项的索引不会改变:当前数组的length也不会改变</p><p>ary.length–:删除数组最后一项</p><h3 id="splice-数组中内置的方法，可以实现数组的增加、修改、删除"><a href="#splice-数组中内置的方法，可以实现数组的增加、修改、删除" class="headerlink" title="splice:数组中内置的方法，可以实现数组的增加、修改、删除"></a>splice:数组中内置的方法，可以实现数组的增加、修改、删除</h3><p>splice实现删除<br>splice(n,m):从索引n开始删除m个(m不写是个删除列数组的末尾，n也不写)<br>返回值:被删除的内容(以一个新数组保存)<br>原有数组改变了<br>splice(0) 清空数组<br>splice() 一项都不删除，返回一个新的空数组<br>splice(0,1)删除第一项</p><h3 id="splice实现修改"><a href="#splice实现修改" class="headerlink" title="splice实现修改"></a>splice实现修改</h3><p>splice(n,m,x):在原有删除的基础上，用x代替删除的内容</p><p>splice实现增加<br>splice(n,0,x):在修改的基础上，我们一项都不删除，把x插入到索引n的前面<br>ary.splice(0,0,x)  向数组末尾追加新元素</p><p>数组的查询</p><h3 id="slice-数组的查询"><a href="#slice-数组的查询" class="headerlink" title="slice 数组的查询"></a>slice 数组的查询</h3><ul><li>参数:slice(n,m) 从索引n开始找到索引m处(不包含m)</li><li>返回值:吧找到的部分已一个新数组返回</li><li>原来的数组不变</li></ul><p>slice(n) 从索引n开始找到末尾<br>slice(0) /slice() 数组克隆，克隆一份和原来数组一模一样的的新数组<br>slice支持负载索引，如果传递的索引为负数，浏览器解析的时候是按照总长度+负数索引 来处理的</p><h3 id="将两个数组进行拼接"><a href="#将两个数组进行拼接" class="headerlink" title="将两个数组进行拼接"></a>将两个数组进行拼接</h3><p>concat:将多个数组拼接在一起</p><ul><li>参数:要拼接的内容(把内容放在原数组的后面)，可以是一个数组</li><li>返回:拼接后的新数组</li></ul><p>原有数组不变<br><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1553240058209-2b8bf72e-c869-4a20-93e9-2d4d7b554f01.png#align=left&display=inline&height=94&name=image.png&originHeight=188&originWidth=698&size=91943&status=done&width=349" alt="image.png"></p><h2 id="数组的查询"><a href="#数组的查询" class="headerlink" title="数组的查询"></a>数组的查询</h2><p>slice: 数组的查询<br>参数: slice(n,m) 从索引n开始找到索引为m处(不包含m)<br>返回值:把找到的部分已一个新数组返回<br>原来的数组不变</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">slice(n) 从索引n开始找到末尾</span><br><span class="line">slice(<span class="number">0</span>) / slice() 数组克隆，克隆一份和原来数组一模一样的新数组</span><br><span class="line">slice 支持负数索引，如果传递的索引为负数，浏览器解析的时候是按照，总长度+负数索引 来处理的</span><br></pre></td></tr></table></figure><h2 id="数组的拼接"><a href="#数组的拼接" class="headerlink" title="数组的拼接"></a>数组的拼接</h2><p>concat:将多个数组拼接在一起<br>参数:要拼接的内容(把内容放在原数组的后面),可以是一个数组，也可以是一些数据值<br>返回:拼接后的新数组<br>原有的数组不变</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">0</span>,<span class="number">100</span>]</span><br><span class="line">arr.concat([<span class="number">100</span>,<span class="number">200</span>],[<span class="number">200</span>,<span class="number">300</span>],<span class="number">12</span>)</span><br></pre></td></tr></table></figure><p>concat() 什么都没有拼接，相当于吧原有数组克隆一份一模一样的出来<br><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1553587618858-28ea0dc4-f2fc-41a6-ad95-f6dce2fff131.png#align=left&display=inline&height=71&name=image.png&originHeight=142&originWidth=448&size=48113&status=done&width=224" alt="image.png"></p><h2 id="数组转字符串"><a href="#数组转字符串" class="headerlink" title="数组转字符串"></a>数组转字符串</h2><h3 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString"></a>toString</h3><blockquote><p>实现吧数组转化为字符串(转换后的字符串逗号分隔每一项)</p></blockquote><p>参数:无<br>返回值:转换的字符串<br>原有数组不变</p><h3 id="join"><a href="#join" class="headerlink" title="join"></a>join</h3><blockquote><p>把数组按照指定的分隔符转换为字符串，和字符串中的split相对应</p></blockquote><ul><li>参数:指定的链接符号</li><li>返回值:转换后的字符串</li><li>原有数组不变</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1553588129014-79ede44c-43c8-479e-ab04-7d9dfd247c0a.png#align=left&display=inline&height=122&name=image.png&originHeight=244&originWidth=440&size=70751&status=done&width=220" alt="image.png"></p><blockquote><p>已知数组的每一项都是数字，想事先数组求和，我们如何实现？</p></blockquote><p>循环实现</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> total = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;ary.length;i++)&#123;</span><br><span class="line">total+=ary[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用join</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> total = <span class="built_in">eval</span>(ary.join(<span class="string">'+'</span>)) <span class="comment">// evel:把字符串变为js表达式执行</span></span><br></pre></td></tr></table></figure><h2 id="实现数组中每一项的排序和排列"><a href="#实现数组中每一项的排序和排列" class="headerlink" title="实现数组中每一项的排序和排列"></a>实现数组中每一项的排序和排列</h2><h3 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h3><blockquote><p>把数组中每一项倒过来排序</p></blockquote><p>参数:无<br>返回值:排序后的数组<br>原有数组改变</p><h3 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h3><blockquote><p>实现数组的排序</p></blockquote><p>参数:无或者回调函数<br>返回值:排序后的数组<br>原有数组改变<br>      不传递参数的情况下:可以给10以内的数字进行升序排列，但是超过10的就无法处理(多位数值识别第一位)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ary.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> a-b; <span class="comment">//升序</span></span><br><span class="line">  <span class="keyword">return</span> b-a; <span class="comment">//降序</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="验证数组中是否包含某一项"><a href="#验证数组中是否包含某一项" class="headerlink" title="验证数组中是否包含某一项"></a>验证数组中是否包含某一项</h2><h3 id="indexOf-lastindexOf"><a href="#indexOf-lastindexOf" class="headerlink" title="indexOf / lastindexOf"></a>indexOf / lastindexOf</h3><blockquote><p>获取当前现在数组中第一次或者最后一次出现的位置索引</p></blockquote><ul><li>数组的这两个方法在IE6-IE8下不兼容</li><li>字符串的这两个方法兼容所有的浏览器 </li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(ary.indexOf(<span class="number">12</span>)&gt;<span class="number">-1</span>)&#123;</span><br><span class="line"><span class="comment">// 数组中包含12</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.myIndexOf = <span class="function"><span class="keyword">function</span> <span class="title">myIndexOf</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> result = <span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i =<span class="number">0</span>;i&lt;<span class="keyword">this</span>.length;i++)&#123;</span><br><span class="line">  <span class="keyword">if</span>(value===<span class="keyword">this</span>[i])&#123;</span><br><span class="line">    result = i;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="遍历数组每一项的方法"><a href="#遍历数组每一项的方法" class="headerlink" title="遍历数组每一项的方法"></a>遍历数组每一项的方法</h2><blockquote><p>以下方法ie6-8下都不兼容</p></blockquote><h3 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h3><blockquote><p>遍历数组中的每一项</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ary.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">value,index</span>)</span>&#123;</span><br><span class="line"><span class="comment">/* 数组中有多少项，当前回调函数执行多少次，妹妹一次传进来的value就是当前遍历数组这一项的值，index</span></span><br><span class="line"><span class="comment">     就是遍历这一项的索引</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><blockquote><p>遍历数组中的每一项，在forEach的基础上，可以修改每一项的值</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ary.map(<span class="function"><span class="keyword">function</span>(<span class="params">value,index</span>)</span>&#123;</span><br><span class="line"><span class="comment">/* 数组中有多少项，当前回调函数执行多少次，妹妹一次传进来的value就是当前遍历数组这一项的值，index</span></span><br><span class="line"><span class="comment">     就是遍历这一项的索引</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">return</span> xxx;</span><br><span class="line">  <span class="comment">// return 后面返回的结果就是当前遍历的这一项修改为xxx</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>filter<br>find<br>reduce<br>every<br>…</p><h2 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h2><blockquote><p>var ary = [1,2,3,4,5,6,7,1,3,4,5];</p></blockquote><h3 id="方案一-最简单数组去重法"><a href="#方案一-最简单数组去重法" class="headerlink" title="方案一 最简单数组去重法"></a>方案一 最简单数组去重法</h3><p>遍历数组的每一项，拿每一项和它后面的项依次比较,如果相同了，则把相同的这一项在原来数组中删除即可</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 新建一新数组，遍历传入数组，值不在新数组就push进该新数组中</span></span><br><span class="line"><span class="comment">* IE8以下不支持数组的indexOf方法</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">uniq</span>(<span class="params">array</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> temp = []; <span class="comment">//一个新的临时数组</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; array.length; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(temp.indexOf(array[i]) == <span class="number">-1</span>)&#123;</span><br><span class="line">            temp.push(array[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> aa = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">5</span>];</span><br><span class="line"><span class="built_in">console</span>.log(uniq(aa));</span><br></pre></td></tr></table></figure><h3 id="方案二-对象键值法去重"><a href="#方案二-对象键值法去重" class="headerlink" title="方案二 对象键值法去重"></a>方案二 对象键值法去重</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 速度最快， 占空间最多（空间换时间）</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* 该方法执行的速度比其他任何方法都快， 就是占用的内存大一些。</span></span><br><span class="line"><span class="comment">* 现思路：新建一js对象以及新数组，遍历传入数组时，判断值是否为js对象的键，</span></span><br><span class="line"><span class="comment">* 不是的话给对象新增该键并放入新数组。</span></span><br><span class="line"><span class="comment">* 注意点：判断是否为js对象键时，会自动对传入的键执行“toString()”，</span></span><br><span class="line"><span class="comment">* 不同的键可能会被误认为一样，例如n[val]-- n[1]、n["1"]；</span></span><br><span class="line"><span class="comment">* 解决上述问题还是得调用“indexOf”。*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">uniq</span>(<span class="params">array</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> temp = &#123;&#125;, r = [], len = array.length, val, type;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        val = array[i];</span><br><span class="line">        type = <span class="keyword">typeof</span> val;</span><br><span class="line">        <span class="keyword">if</span> (!temp[val]) &#123;</span><br><span class="line">            temp[val] = [type];</span><br><span class="line">            r.push(val);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (temp[val].indexOf(type) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            temp[val].push(type);</span><br><span class="line">            r.push(val);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> aa = [<span class="number">1</span>,<span class="number">2</span>,<span class="string">"2"</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="string">"a"</span>,<span class="string">"a"</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">5</span>];</span><br><span class="line"><span class="built_in">console</span>.log(uniq(aa));</span><br></pre></td></tr></table></figure><h3 id="方案三-排序后相邻去除法"><a href="#方案三-排序后相邻去除法" class="headerlink" title="方案三 排序后相邻去除法"></a>方案三 排序后相邻去除法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 给传入数组排序，排序后相同值相邻，</span></span><br><span class="line"><span class="comment">* 然后遍历时,新数组只加入不与前一值重复的值。</span></span><br><span class="line"><span class="comment">* 会打乱原来数组的顺序</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">uniq</span>(<span class="params">array</span>)</span>&#123;</span><br><span class="line">    array.sort();</span><br><span class="line">    <span class="keyword">var</span> temp=[array[<span class="number">0</span>]];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; array.length; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>( array[i] !== temp[temp.length<span class="number">-1</span>])&#123;</span><br><span class="line">            temp.push(array[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> aa = [<span class="number">1</span>,<span class="number">2</span>,<span class="string">"2"</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="string">"a"</span>,<span class="string">"a"</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">5</span>];</span><br><span class="line"><span class="built_in">console</span>.log(uniq(aa));</span><br></pre></td></tr></table></figure><h3 id="方案四-数组下标法"><a href="#方案四-数组下标法" class="headerlink" title="方案四  数组下标法"></a>方案四  数组下标法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* 还是得调用“indexOf”性能跟方法1差不多，</span></span><br><span class="line"><span class="comment">* 实现思路：如果当前数组的第i项在当前数组中第一次出现的位置不是i，</span></span><br><span class="line"><span class="comment">* 那么表示第i项是重复的，忽略掉。否则存入结果数组。</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">uniq</span>(<span class="params">array</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> temp = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">        <span class="comment">//如果当前数组的第i项在当前数组中第一次出现的位置是i，才存入数组；否则代表是重复的</span></span><br><span class="line">        <span class="keyword">if</span>(array.indexOf(array[i]) == i)&#123;</span><br><span class="line">            temp.push(array[i])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> aa = [<span class="number">1</span>,<span class="number">2</span>,<span class="string">"2"</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="string">"a"</span>,<span class="string">"a"</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">5</span>];</span><br><span class="line"><span class="built_in">console</span>.log(uniq(aa));</span><br></pre></td></tr></table></figure><h3 id="方案五-优化遍历数组法"><a href="#方案五-优化遍历数组法" class="headerlink" title="方案五  优化遍历数组法"></a>方案五  优化遍历数组法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 思路：获取没重复的最右一值放入新数组</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 推荐的方法</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* 方法的实现代码相当酷炫，</span></span><br><span class="line"><span class="comment">* 实现思路：获取没重复的最右一值放入新数组。</span></span><br><span class="line"><span class="comment">* （检测到有重复值时终止当前循环同时进入顶层循环的下一轮判断）*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">uniq</span>(<span class="params">array</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> temp = [];</span><br><span class="line">    <span class="keyword">var</span> index = [];</span><br><span class="line">    <span class="keyword">var</span> l = array.length;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; l; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> j = i + <span class="number">1</span>; j &lt; l; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (array[i] === array[j])&#123;</span><br><span class="line">                i++;</span><br><span class="line">                j = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        temp.push(array[i]);</span><br><span class="line">        index.push(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(index);</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> aa = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">5</span>];</span><br><span class="line"><span class="built_in">console</span>.log(uniq(aa));</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript基础入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript基础入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>9.Date的基础知识</title>
      <link href="/2019/04/10/JavaScript%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/9%20Date%E7%9A%84%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
      <url>/2019/04/10/JavaScript%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/9%20Date%E7%9A%84%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h2 id="Data-是日期类"><a href="#Data-是日期类" class="headerlink" title="Data 是日期类"></a>Data 是日期类</h2><blockquote><p>通过它可以对时间进行处理</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> time = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="comment">// 获取当前客户端本机时间(当前获取的时间不能作为重要的参考依据)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取结果是一个日期格式的对象</span></span><br><span class="line"><span class="comment">// Wed Mar 20 2019 17:37:16 GMT+0800 (中国标准时间)</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="keyword">new</span> <span class="built_in">Date</span>() -&gt; object</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">time.getFullYear() 获取四位数整年</span><br><span class="line">time.getMonth() 获取月份</span><br><span class="line">time.getDate() 获取日</span><br><span class="line">time.getDay() 获取星期(<span class="number">0</span><span class="number">-6</span>代表周日-周六)</span><br><span class="line">time.getHours() 获取小时</span><br><span class="line">time.getMinutes() 获取分钟</span><br><span class="line">time.getSeconds() 获取秒</span><br><span class="line">time.getMilliseconds() 获取毫秒</span><br><span class="line">time.getTime() 获取当前日期距离<span class="string">'1970-01-01 00:00:00'</span>的毫秒差</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> time = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2017-10-22'</span>); </span><br><span class="line"><span class="comment">// 当new Date 中传递一个时间格式的字符串，相当于把这个字符串换位标准时间对象</span></span><br><span class="line"><span class="comment">// (转换完成后，就可以调取上面我们讲的那些方法)</span></span><br></pre></td></tr></table></figure><p>// 时间格式的字符串<br>‘2017-10-22’ (IE下识别不了)<br>‘2017/10/22 16:15:34’<br>‘1508659621314’(如果传递的是距离1970年那个毫秒查，也可以识别转换的,但是只能是数字，不能是字符串)<br> </p>]]></content>
      
      
      <categories>
          
          <category> JavaScript基础入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript基础入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8.字符串及常用的方法</title>
      <link href="/2019/04/10/JavaScript%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/8%20%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8F%8A%E5%B8%B8%E7%94%A8%E7%9A%84%E6%96%B9%E6%B3%95/"/>
      <url>/2019/04/10/JavaScript%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/8%20%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8F%8A%E5%B8%B8%E7%94%A8%E7%9A%84%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在js中用单(双)引号包裹起来的都是字符串</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var str = &apos;welcome to credan!&apos;</span><br></pre></td></tr></table></figure><p>字符串就是由零到多个字符串组成的</p><p>第一个字符索引0<br>第二个字符索引1<br>…<br>有length的属性，存储的是当前字符串中字符的个数(字符串的长度)</p><p>以数字作为索引，从零开始的</p><p>str[0] -&gt; ‘w’ 第一个字符<br>strlength-&gt; 46<br>str[str.length-1] -&gt; ‘!’ 最后一个字符<br>str[100] -&gt; undefined 如果指定的索引不存在获取的结果是undefined</p><p>真实项目中，我们经常操作字符串，此时我们需要掌握常用的一些字符床操作方法</p><blockquote><p>console.dir(String.prototype)</p></blockquote><p>charAt &amp;&amp; charCodeAt</p><blockquote></blockquote><h2 id="str-charCodeAt-索引"><a href="#str-charCodeAt-索引" class="headerlink" title="str.charCodeAt(索引)"></a>str.charCodeAt(索引)</h2><p>在charAt 基础上，把获取的字符变为Unicode编码值(对应ASCll码表)</p><ul><li>48-57 0-9</li><li>65-90 A-Z</li><li>97-122 a-z</li><li>…</li></ul><p>String.fromCharCode(十进制的Unicode值)，把值按照ascll码表中的信息，转为原有字符，charCodeAt正好对应<br><br><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1553008294829-62711c49-3c5a-449f-aed3-3f1c718032bd.png#align=left&display=inline&height=153&name=image.png&originHeight=306&originWidth=680&size=52212&status=done&width=340" alt="image.png"></p><h2 id="substr-amp-amp-substring-amp-amp-slice"><a href="#substr-amp-amp-substring-amp-amp-slice" class="headerlink" title="substr &amp;&amp; substring &amp;&amp; slice"></a>substr &amp;&amp; substring &amp;&amp; slice</h2><ul><li>实现字符串截取的三个办法</li><li>str.substr(n.m) : 从索引n开始，截取m个字符</li><li>str.substring(n,m):从索引n开始，截取到索引为m处(包含m)，把找到的部分截取</li><li>str.slice(n,m):和substring语法意义，区别在于slice支持一负数做索引</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1553008704722-782c7139-f3ba-4a79-8488-3603bda3135b.png#align=left&display=inline&height=183&name=image.png&originHeight=366&originWidth=460&size=70209&status=done&width=230" alt="image.png"></p><p>当索引是负数的时候，浏览器在处理的时候，是用字符串的总长度加上负数索引，然后按照正数处理操作</p><p>细节:</p><ul><li>如果只传递了n(str.substr(n)/str.substring(n)),相当于索引n开始的一直截取到字符串的末尾</li><li>如果传递的索引超出最大限制，也是吧能截取的部分截取掉即可</li><li>如果一个参数都不传递:相当于吧证书字符串都截取(字符串的克隆)</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1553008990121-ada3ebf4-1471-4f9e-903c-18fb84a143ed.png#align=left&display=inline&height=212&name=image.png&originHeight=424&originWidth=700&size=200574&status=done&width=350" alt="image.png"></p><p>indexOf &amp;&amp; lastIndexOf</p><ul><li>str.indexOf 获取当前字符在字符串中第一次出现位置的索引</li><li>str.lastIndexOf 获取的是最后一次出现位置的索引</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1553009435307-f79d0556-5031-4bf0-8923-60844406763a.png#align=left&display=inline&height=134&name=image.png&originHeight=268&originWidth=680&size=63046&status=done&width=340" alt="image.png"></p><blockquote><p>如果当前字符在字符串中没有出现过，结果是-1:我们根据这个规律可言验证一下当前字符串中是否包含某个字符</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">if(str.indexOf(&apos;?&apos;)===-1)&#123;</span><br><span class="line">// =&gt; 没有出现过</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if(str.indexOf(&apos;?&apos;)&gt;=-1)&#123;</span><br><span class="line">// =&gt; 出现过</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="split"><a href="#split" class="headerlink" title="split"></a>split</h2><blockquote><p>str.split 按照某个字符串分成数组中的某一项，和数组中的join方法是对应</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1553009620417-1162e2ed-dd4c-47c0-994f-a5c532df1c54.png#align=left&display=inline&height=147&name=image.png&originHeight=294&originWidth=396&size=64417&status=done&width=198" alt="image.png"></p><h2 id="replace"><a href="#replace" class="headerlink" title="replace"></a>replace</h2><blockquote><p>str.replace 实现字符的替换<br>执行一次replace 只能替换一次，如果有好几个都需要替换，在不适用正则的情况下，我们需要执行很多次replace</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1553009732430-9c95ed06-0e1b-4140-aabb-9d935ac7932f.png#align=left&display=inline&height=143&name=image.png&originHeight=286&originWidth=476&size=113815&status=done&width=238" alt="image.png"></p><blockquote><p>有些需求及时执行很多次repalce也实现不了，此时需要使用正则处理，真实项目中replace一般都是和正则搭配使用的</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1553009814591-925001c7-48f4-4a3c-8dde-0e6d338e6535.png#align=left&display=inline&height=176&name=image.png&originHeight=352&originWidth=560&size=238758&status=done&width=280" alt="image.png"></p><h2 id="trim-amp-amp-trimLeft-amp-amp-trimRight"><a href="#trim-amp-amp-trimLeft-amp-amp-trimRight" class="headerlink" title="trim &amp;&amp; trimLeft &amp;&amp; trimRight"></a>trim &amp;&amp; trimLeft &amp;&amp; trimRight</h2><ul><li>str.trimLeft : 去除字符串开始的口空格</li><li>str.trimRight : 去除字符串结尾的口空格</li><li>str.trim 去除字符串首位的空格</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1553009902075-a5b83b2e-7afa-4211-8e40-80473d5c2505.png#align=left&display=inline&height=164&name=image.png&originHeight=328&originWidth=454&size=60432&status=done&width=227" alt="image.png"></p><blockquote><p>获取地址栏的值</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">queryURLPrameter</span>(<span class="params">url</span>)</span>&#123;</span><br><span class="line"><span class="comment">// =&gt; url 传递的参数</span></span><br><span class="line">  <span class="keyword">var</span> quesIndex = url.indexOf(<span class="string">'?'</span>),</span><br><span class="line">   obj = &#123;&#125;</span><br><span class="line">  <span class="keyword">if</span>(quesIndex === <span class="number">-1</span>)&#123; <span class="comment">// url中没有问号传参 直接返回空</span></span><br><span class="line">  retrun obj;</span><br><span class="line">  &#125;</span><br><span class="line">  url = url.substr(quesIndex + <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">var</span> ary = url.split(<span class="string">'&amp;'</span>);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i =<span class="number">0</span>;i&lt;ary.length;i++)&#123;</span><br><span class="line">  <span class="keyword">var</span> curAry = ary[i].split(<span class="string">'='</span>);</span><br><span class="line">    obj[curAry[<span class="number">0</span>]] = curAry[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> obj</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span>.prototype.myQueryURLParameter = <span class="function"><span class="keyword">function</span></span></span><br><span class="line"><span class="function"><span class="title">myQueryURLParamter</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> obj = <span class="regexp">/([^=?&amp;]+)=([^=?&amp;]+)/g</span>;</span><br><span class="line">  <span class="keyword">this</span>.replace(reg,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> arg = argments;</span><br><span class="line">    obj[arg[<span class="number">1</span>]] = arg[<span class="number">2</span>]</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'https://www/baidu.com/s?wd=1233213&amp;issp=1'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.myQueryURLParameter());</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript基础入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript基础入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>11 限制返回结果的数量（limit）</title>
      <link href="/2019/04/10/mongoose/11%20%E9%99%90%E5%88%B6%E8%BF%94%E5%9B%9E%E7%BB%93%E6%9E%9C%E7%9A%84%E6%95%B0%E9%87%8F%EF%BC%88limit%EF%BC%89/"/>
      <url>/2019/04/10/mongoose/11%20%E9%99%90%E5%88%B6%E8%BF%94%E5%9B%9E%E7%BB%93%E6%9E%9C%E7%9A%84%E6%95%B0%E9%87%8F%EF%BC%88limit%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.ctx.model.Article.limit(<span class="number">3</span>);</span><br></pre></td></tr></table></figure><ul><li>对Article表中的数据进行返回，返回为前面3条数据</li></ul>]]></content>
      
      
      <categories>
          
          <category> mongoose </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mongoose </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7 查询数据</title>
      <link href="/2019/04/10/mongoose/7%20%E6%9F%A5%E8%AF%A2%E6%95%B0%E6%8D%AE/"/>
      <url>/2019/04/10/mongoose/7%20%E6%9F%A5%E8%AF%A2%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="7-1-获取所有数据，返回是一个数组"><a href="#7-1-获取所有数据，返回是一个数组" class="headerlink" title="7.1 获取所有数据，返回是一个数组"></a>7.1 获取所有数据，返回是一个数组</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.ctx.model.Article.find()</span><br></pre></td></tr></table></figure><p><a name="ZZuEs"></a></p><h3 id="7-2-获取一个数据，返回是一个对象"><a href="#7-2-获取一个数据，返回是一个对象" class="headerlink" title="7.2 获取一个数据，返回是一个对象"></a>7.2 获取一个数据，返回是一个对象</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.ctx.model.Article.findOne()</span><br></pre></td></tr></table></figure><p><a name="wtdxK"></a></p><p>###<br><a name="VnZJE"></a></p><h3 id="7-3-条件查询"><a href="#7-3-条件查询" class="headerlink" title="7.3 条件查询"></a>7.3 条件查询</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.ctx.model.Article.find(conditions,callback);</span><br></pre></td></tr></table></figure><p>condition有以下几种类型</p><p><a name="rm2Sn"></a></p><h4 id="7-3-1-根据具体数据进行查询"><a href="#7-3-1-根据具体数据进行查询" class="headerlink" title="7.3.1 根据具体数据进行查询"></a>7.3.1 根据具体数据进行查询</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.ctx.model.Article.find(&#123;_id：<span class="number">5</span>c4a819fb87ba4002a47bc4f,<span class="attr">title</span>:<span class="string">"123"</span>&#125;,callback);</span><br></pre></td></tr></table></figure><ul><li>返回_id为5c4a819fb87ba4002a47bc4f，title为123的结果</li></ul><p><a name="5vqIb"></a></p><h4 id="7-3-2-条件查询"><a href="#7-3-2-条件查询" class="headerlink" title="7.3.2 条件查询"></a>7.3.2 条件查询</h4><table><thead><tr><th>“$lt”</th><th>小于</th></tr></thead><tbody><tr><td>“$lte”</td><td>小于等于</td></tr><tr><td>“$gt”</td><td>大于</td></tr><tr><td>“$gte”</td><td>大于等于</td></tr><tr><td>“$ne”</td><td>不等于</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.ctx.model.Article.find(&#123;“sort”:&#123; <span class="attr">$get</span>:<span class="number">18</span> , <span class="attr">$lte</span>:<span class="number">30</span> &#125;);</span><br></pre></td></tr></table></figure><ul><li>返回Article表中sort 大于等于18并小于等于30的结果</li></ul><p><a name="QEYAx"></a></p><h4 id="7-3-3-或查询-OR"><a href="#7-3-3-或查询-OR" class="headerlink" title="7.3.3 或查询 OR"></a>7.3.3 或查询 OR</h4><table><thead><tr><th>“$in”</th><th>一个键对应多个值</th></tr></thead><tbody><tr><td>“$nin”</td><td>同上取反, 一个键不对应指定值</td></tr><tr><td>“$or”</td><td>多个条件匹配, 可以嵌套 $in 使用</td></tr><tr><td>“$not”</td><td>同上取反, 查询与特定模式不匹配的文档</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.ctx.model.Article.find(&#123;<span class="string">"title"</span>:&#123; <span class="attr">$in</span>:[<span class="number">20</span>,<span class="number">21</span>,<span class="number">22.</span><span class="string">"haha"</span>]&#125; );</span><br></pre></td></tr></table></figure><ul><li>返回Article表中title等于20或21或21或”haha”的结果</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.ctx.model.Article.find(&#123;<span class="string">"$or"</span> :  [ &#123;<span class="string">"age"</span>:<span class="number">18</span>&#125; , &#123;<span class="string">"name"</span>:<span class="string">"wxw"</span>&#125; ] &#125;);</span><br></pre></td></tr></table></figure><ul><li>返回Article表中age等于18或 name等于”wxw”的结果</li></ul><p><a name="jP1SW"></a></p><h4 id="7-3-4-类型查询（”-exists”条件判定）"><a href="#7-3-4-类型查询（”-exists”条件判定）" class="headerlink" title="7.3.4 类型查询（”$exists”条件判定）"></a>7.3.4 类型查询（”$exists”条件判定）</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.ctx.model.Article.find(&#123;<span class="attr">name</span>: &#123;<span class="attr">$exists</span>: <span class="literal">true</span>&#125;&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">error,docs</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//返回Article表中所有存在name属性的结果</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.ctx.model.Article.find(&#123;<span class="attr">telephone</span>: &#123;<span class="attr">$exists</span>: <span class="literal">false</span>&#125;&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">error,docs</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//返回Article表中所有不存在telephone属性的结果</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><a name="cxIaA"></a></p><h4 id="7-3-5-匹配正则表达式查询"><a href="#7-3-5-匹配正则表达式查询" class="headerlink" title="7.3.5 匹配正则表达式查询"></a>7.3.5 匹配正则表达式查询</h4><p>MongoDb 是使用 Prel兼容的正则表达式库来匹配正则表达式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.ctx.model.Article.find( &#123;<span class="string">"name"</span> : <span class="regexp">/joe/i</span> &#125; );</span><br></pre></td></tr></table></figure><ul><li>返回Article表中name为 joe 的结果, 并忽略大小写</li></ul><p><a name="xW33h"></a></p><h4 id="7-3-6-查询数组"><a href="#7-3-6-查询数组" class="headerlink" title="7.3.6 查询数组"></a>7.3.6 查询数组</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.ctx.model.Article.find(&#123;<span class="string">"array"</span>:<span class="number">10</span>&#125; );</span><br></pre></td></tr></table></figure><ul><li>返回Article表中array(数组类型)键中有10的文档, array : [1,2,3,4,5,10] 会匹配到</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.ctx.model.Article.find(&#123;<span class="string">"array[5]"</span>:<span class="number">10</span>&#125;  );</span><br></pre></td></tr></table></figure><ul><li>返回Article表中array(数组类型)键中下标5对应的值是10, array : [1,2,3,4,5,10] 会匹配到</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.ctx.model.Article.find(&#123;<span class="string">"array"</span>:[<span class="number">5</span>,<span class="number">10</span>]&#125;);</span><br></pre></td></tr></table></figure><ul><li>返回Article表中查询匹配array数组中既有5又有10的结果</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.ctx.model.Article.find(&#123;<span class="string">"array"</span>:&#123;<span class="attr">$size</span> : <span class="number">3</span>&#125; &#125;);</span><br></pre></td></tr></table></figure><ul><li>返回Article表中查询匹配array数组长度为3 的的结果</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.ctx.model.Article.find(&#123;<span class="string">"array"</span>:&#123;<span class="attr">$slice</span> : <span class="number">10</span>&#125; &#125;);</span><br></pre></td></tr></table></figure><ul><li>返回Article表中查询匹配array数组的前10个元素</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.ctx.model.Article.find(&#123;<span class="string">"array"</span>:&#123;<span class="attr">$slice</span> :  [<span class="number">5</span>,<span class="number">10</span>]&#125; &#125;);</span><br></pre></td></tr></table></figure><ul><li>返回Article表中查询匹配array数组的第5个到第10个元素</li></ul><p><a name="yjNm0"></a></p><h4 id="7-3-7-where"><a href="#7-3-7-where" class="headerlink" title="7.3.7 where"></a>7.3.7 where</h4><p>用它可以执行任意javacript语句作为查询的一部分,如果回调函数返回 true 文档就作为结果的一部分返回</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.ctx.model.Article.find( &#123;<span class="string">"$where"</span> :  <span class="string">"this.x + this.y === 10"</span> &#125; );</span><br><span class="line"><span class="keyword">this</span>.ctx.model.Article.find( &#123;<span class="string">"$where"</span> : <span class="string">" function()&#123; return this.x + this.y ===10; &#125; "</span> &#125; )</span><br></pre></td></tr></table></figure><ul><li>其中this为数据表中的数据，上述返回Article表中属性x+属性y=10的所有数据</li></ul>]]></content>
      
      
      <categories>
          
          <category> mongoose </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mongoose </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>9 更新数据</title>
      <link href="/2019/04/10/mongoose/9%20%E6%9B%B4%E6%96%B0%E6%95%B0%E6%8D%AE/"/>
      <url>/2019/04/10/mongoose/9%20%E6%9B%B4%E6%96%B0%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="9-1-更新数据"><a href="#9-1-更新数据" class="headerlink" title="9.1 更新数据"></a>9.1 更新数据</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.ctx.model.Article.update(conditions, update, callback)</span><br></pre></td></tr></table></figure><ul><li>参数1:查询条件, 参数2:更新对象,可以使用MondoDB的更新修改器</li></ul><p>备注：conditions与查询数据中介绍的一样</p><p><a name="ooX86"></a></p><h3 id="9-2-update为更新对象"><a href="#9-2-update为更新对象" class="headerlink" title="9.2 update为更新对象"></a>9.2 update为更新对象</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> post = &#123;</span><br><span class="line">    wid: <span class="string">'5c492c57acbe363fd4824446'</span>,</span><br><span class="line">    column: [ <span class="string">'新闻'</span> ],</span><br><span class="line">    titleHead: <span class="string">''</span>,</span><br><span class="line">    img: <span class="string">''</span>,</span><br><span class="line">    isAbstract: <span class="string">'false'</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.ctx.model.Article.update(&#123; <span class="attr">_id</span>: <span class="string">'5c4a819fb87ba4002a47bc4f '</span> &#125;, post)</span><br></pre></td></tr></table></figure><ul><li>查询Article表中特定_id，并对post中所包含的属性进行更新。</li></ul><blockquote><p>update使用MondoDB的更新修改器，有以下几种使用场景</p></blockquote><p><a name="HBe4R"></a></p><h4 id="9-2-1-“-inc”增减修改器-只对数字有效"><a href="#9-2-1-“-inc”增减修改器-只对数字有效" class="headerlink" title="9.2.1 “$inc”增减修改器,只对数字有效"></a>9.2.1 “$inc”增减修改器,只对数字有效</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.ctx.model.Article.update(&#123;<span class="string">"age"</span>:<span class="number">22</span>&#125;, &#123;<span class="attr">$inc</span>:&#123;<span class="string">"age"</span>:<span class="number">1</span>&#125; &#125;  );</span><br></pre></td></tr></table></figure><ul><li>找到age=22的文档,修改文档的age值自增1</li></ul><p><a name="eixNN"></a></p><h4 id="9-2-2-‘-set’-指定一个键的值-这个键不存在就创建它-可以是任何MondoDB支持的类型"><a href="#9-2-2-‘-set’-指定一个键的值-这个键不存在就创建它-可以是任何MondoDB支持的类型" class="headerlink" title="9.2.2 ‘$set’ 指定一个键的值,这个键不存在就创建它.可以是任何MondoDB支持的类型."></a>9.2.2 ‘$set’ 指定一个键的值,这个键不存在就创建它.可以是任何MondoDB支持的类型.</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.ctx.model.Article.update(&#123; _id：<span class="number">5</span>c4a819fb87ba4002a47bc4f &#125;, &#123; <span class="attr">$set</span>: &#123; <span class="attr">isDelete</span>: <span class="literal">true</span> &#125; &#125;);</span><br></pre></td></tr></table></figure><ul><li>对5c4a819fb87ba4002a47bc4f 表进行软删除，找到特定_id数据，增加或者修改isDelete属性</li></ul><p><a name="zb6ui"></a></p><h4 id="9-2-3-“-unset”同上取反-删除一个键"><a href="#9-2-3-“-unset”同上取反-删除一个键" class="headerlink" title="9.2.3 “$unset”同上取反,删除一个键"></a>9.2.3 “$unset”同上取反,删除一个键</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.ctx.model.Article.update(&#123;<span class="attr">age</span>:<span class="number">22</span>&#125;, &#123;<span class="attr">$unset</span>:&#123;<span class="attr">age</span>:<span class="number">18</span>&#125; &#125; );</span><br></pre></td></tr></table></figure><ul><li>执行后age键不存在</li></ul><p><a name="flvCB"></a></p><h4 id="9-2-4-‘-push’给一个键push一个数组成员-键不存在会创建-对数组有效"><a href="#9-2-4-‘-push’给一个键push一个数组成员-键不存在会创建-对数组有效" class="headerlink" title="9.2.4 ‘$push’给一个键push一个数组成员,键不存在会创建,对数组有效"></a>9.2.4 ‘$push’给一个键push一个数组成员,键不存在会创建,对数组有效</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.ctx.model.Article.update(&#123;<span class="attr">name</span>:<span class="string">'wxw'</span>&#125;, &#123;<span class="attr">$push</span>:&#123;<span class="attr">array</span>:<span class="number">10</span>&#125; &#125; );</span><br></pre></td></tr></table></figure><ul><li>返回Article表中name为wxw的数据，增加一个array键,类型为数组,有一个成员 10</li></ul><p><a name="6iju1"></a></p><h4 id="9-2-5-‘-addToSet’向数组中添加一个元素-如果存在就不添加"><a href="#9-2-5-‘-addToSet’向数组中添加一个元素-如果存在就不添加" class="headerlink" title="9.2.5 ‘$addToSet’向数组中添加一个元素,如果存在就不添加"></a>9.2.5 ‘$addToSet’向数组中添加一个元素,如果存在就不添加</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.ctx.model.Article.update(&#123;<span class="attr">name</span>:<span class="string">'wxw'</span>&#125;,&#123;<span class="attr">$addToSet</span>:&#123;<span class="attr">array</span>:<span class="number">10</span>&#125; &#125; );</span><br></pre></td></tr></table></figure><ul><li>返回Article表中name为wxw的数据，array中有10所以不会添加</li></ul><p><a name="dnC34"></a></p><h4 id="9-2-6-‘-each’遍历数组和-push-修改器配合可以插入多个值"><a href="#9-2-6-‘-each’遍历数组和-push-修改器配合可以插入多个值" class="headerlink" title="9.2.6 ‘$each’遍历数组和 $push 修改器配合可以插入多个值"></a>9.2.6 ‘$each’遍历数组和 $push 修改器配合可以插入多个值</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.ctx.model.Article.update(&#123;<span class="attr">name</span>:<span class="string">'wxw'</span>&#125;, &#123;<span class="attr">$push</span>:&#123;<span class="attr">array</span>:&#123;<span class="attr">$each</span>: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]&#125;&#125; &#125; );</span><br></pre></td></tr></table></figure><ul><li>返回Article表中name为wxw的数据，执行后array : [10,1,2,3,4,5]</li></ul><p><a name="67S6t"></a></p><h4 id="9-2-7-‘-pop’-向数组中尾部删除一个元素"><a href="#9-2-7-‘-pop’-向数组中尾部删除一个元素" class="headerlink" title="9.2.7 ‘$pop’ 向数组中尾部删除一个元素"></a>9.2.7 ‘$pop’ 向数组中尾部删除一个元素</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.ctx.model.Article.update(&#123;<span class="attr">name</span>:<span class="string">'wxw'</span>&#125;, &#123;<span class="attr">$pop</span>:&#123;<span class="attr">array</span>:<span class="number">1</span>&#125; &#125; );</span><br></pre></td></tr></table></figure><ul><li>返回Article表中name为wxw的数据，其中array : [10,1,2,3,4,5]，执行后 array : [10,1,2,3,4]</li><li>tip:将1改成-1可以删除数组首部元素</li></ul><p><a name="3ayVU"></a></p><h4 id="9-2-8-‘-pull’-向数组中删除指定元素"><a href="#9-2-8-‘-pull’-向数组中删除指定元素" class="headerlink" title="9.2.8 ‘$pull’ 向数组中删除指定元素"></a>9.2.8 ‘$pull’ 向数组中删除指定元素</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.ctx.model.Article.update(&#123;<span class="attr">name</span>:<span class="string">'wxw'</span>&#125;, &#123;<span class="attr">$pull</span>:&#123;<span class="attr">array</span>:<span class="number">10</span>&#125; &#125;);</span><br></pre></td></tr></table></figure><ul><li>返回Article表中name为wxw的数据，匹配到array中的10后将其删除。</li></ul>]]></content>
      
      
      <categories>
          
          <category> mongoose </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mongoose </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8 删除数据</title>
      <link href="/2019/04/10/mongoose/8%20%E5%88%A0%E9%99%A4%E6%95%B0%E6%8D%AE/"/>
      <url>/2019/04/10/mongoose/8%20%E5%88%A0%E9%99%A4%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.ctx.model.Article.remove(conditions,callback);</span><br></pre></td></tr></table></figure><p>备注：conditions为查询条件，与查询数据介绍的一样，eg：{ _id：5c4a819fb87ba4002a47bc4f }，找到_id为5c4a819fb87ba4002a47bc4f的数据，callback为操作成功后的回调函数</p>]]></content>
      
      
      <categories>
          
          <category> mongoose </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mongoose </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6 增加数据</title>
      <link href="/2019/04/10/mongoose/6%20%E5%A2%9E%E5%8A%A0%E6%95%B0%E6%8D%AE/"/>
      <url>/2019/04/10/mongoose/6%20%E5%A2%9E%E5%8A%A0%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.ctx.model.Article.create(post,callback);</span><br></pre></td></tr></table></figure><blockquote><p>备注：其中post为json数据结构，callback为操作后的回调函数</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> mongoose </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mongoose </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5 设计数据库模型</title>
      <link href="/2019/04/10/mongoose/5%20%E8%AE%BE%E8%AE%A1%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A8%A1%E5%9E%8B/"/>
      <url>/2019/04/10/mongoose/5%20%E8%AE%BE%E8%AE%A1%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="5-1-定义模型，也就是数据表"><a href="#5-1-定义模型，也就是数据表" class="headerlink" title="5.1 定义模型，也就是数据表"></a>5.1 定义模型，也就是数据表</h3><blockquote><p>在{workplace}/app/model/article.js定义数据表</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">app</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> mongoose = app.mongoose;</span><br><span class="line">  <span class="keyword">const</span> Schema = mongoose.Schema;</span><br><span class="line">  <span class="keyword">const</span> RoleSchema = <span class="keyword">new</span> Schema(&#123;</span><br><span class="line">    role: &#123;</span><br><span class="line">      type: <span class="built_in">String</span>,</span><br><span class="line">      index: &#123;</span><br><span class="line">        unique: <span class="literal">true</span>,</span><br><span class="line">      &#125;, <span class="comment">// 该字段为唯一字段</span></span><br><span class="line">      <span class="built_in">require</span>: <span class="literal">true</span>, <span class="comment">// 必填项</span></span><br><span class="line">    &#125;,</span><br><span class="line">    roleName: &#123;</span><br><span class="line">      type: <span class="built_in">String</span>,</span><br><span class="line">      <span class="built_in">require</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 备注</span></span><br><span class="line">    note: &#123;</span><br><span class="line">      type: <span class="built_in">String</span>,</span><br><span class="line">      <span class="built_in">require</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> mongoose.model(<span class="string">'Role'</span>, RoleSchema, <span class="string">'role'</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><a name="a9DzB"></a></p><h3 id="5-2-数据类型"><a href="#5-2-数据类型" class="headerlink" title="5.2 数据类型"></a>5.2 数据类型</h3><table><thead><tr><th align="center">数据类型</th><th></th></tr></thead><tbody><tr><td align="center">Number</td><td>数字</td></tr><tr><td align="center">String</td><td>字符串</td></tr><tr><td align="center">Boolean</td><td>布尔值</td></tr><tr><td align="center">ObjectId</td><td>对象ID</td></tr><tr><td align="center">Array</td><td>数组</td></tr><tr><td align="center">Date</td><td>日期</td></tr><tr><td align="center">Buffer</td><td>二进制</td></tr><tr><td align="center">Mixed</td><td>混合类型</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> mongoose </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mongoose </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4 egg-mongoose 配置</title>
      <link href="/2019/04/10/mongoose/4%20egg-mongoose%20%E9%85%8D%E7%BD%AE/"/>
      <url>/2019/04/10/mongoose/4%20egg-mongoose%20%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="4-1-安装"><a href="#4-1-安装" class="headerlink" title="4.1 安装"></a>4.1 安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install egg-mongoose --save</span><br></pre></td></tr></table></figure><p><a name="Wmyad"></a></p><h3 id="4-2-配置"><a href="#4-2-配置" class="headerlink" title="4.2 配置"></a>4.2 配置</h3><blockquote><p>改变Egg项目中的配置文件{workplace}/config/plugin.js中来启用 egg-mongoose 插件:</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">exports.mongoose = &#123;</span><br><span class="line">  enable: true,</span><br><span class="line">  package: &apos;egg-mongoose&apos;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><a name="OpgPS"></a></p><p>##<br><a name="xrnpV"></a></p><h3 id="4-3-Egg连接mongoose"><a href="#4-3-Egg连接mongoose" class="headerlink" title="4.3 Egg连接mongoose"></a>4.3 Egg连接mongoose</h3><blockquote><p>在Egg项目中的配置文件{workplace}/config/default.js配置项config添加属性</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">config.mongoose = &#123;</span><br><span class="line">    url: process.env.EGG_MONGODB_URL || <span class="string">'mongodb://127.0.0.1/website'</span>,</span><br><span class="line">    options: &#123;</span><br><span class="line">      server: &#123;</span><br><span class="line">        poolSize: <span class="number">40</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><blockquote><p>连接方法</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">config.mongoose = &#123;</span><br><span class="line">   client: &#123;</span><br><span class="line">     url: <span class="string">'mongodb://账号:密码@服务器:端口/库名'</span>,</span><br><span class="line">     options: &#123;&#125;,</span><br><span class="line">   &#125;,</span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> mongoose </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mongoose </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3 数据备份还原</title>
      <link href="/2019/04/10/mongoose/3%20%E6%95%B0%E6%8D%AE%E5%A4%87%E4%BB%BD%E8%BF%98%E5%8E%9F/"/>
      <url>/2019/04/10/mongoose/3%20%E6%95%B0%E6%8D%AE%E5%A4%87%E4%BB%BD%E8%BF%98%E5%8E%9F/</url>
      
        <content type="html"><![CDATA[<blockquote><p>当mongodb 数据库打开了 auth认证 以后 就不能直接使用 dump 而需要提供对应的账号密码 如下</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongodump -h 127.0.0.1:27017 -d asGiant -u <span class="string">'myz'</span> -p <span class="string">'123456'</span> -o /usr/<span class="built_in">local</span>/mongodb/dump</span><br></pre></td></tr></table></figure><p>-h 地址<br>-d 数据库名称<br>-u 用户名<br>-p 密码<br>-o 输出地址<br>–authenticationDatabase admin  验证账户的数据库</p><p>mongorestore命令脚本语法如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongorestore -h &lt;hostname&gt;&lt;:port&gt; -d dbname &lt;path&gt;</span><br></pre></td></tr></table></figure><ul><li><strong>–host &lt;:port&gt;, -h &lt;:port&gt;：</strong>MongoDB所在服务器地址，默认为： localhost:27017<br></li><li><strong>–db , -d ：</strong>需要恢复的数据库实例，例如：test，当然这个名称也可以和备份时候的不一样，比如test2<br></li><li><strong>–drop：</strong>恢复的时候，先删除当前数据，然后恢复备份的数据。就是说，恢复后，备份后添加修改的数据都会被删除，慎用哦！<br></li><li><strong><path>：</path></strong>mongorestore 最后的一个参数，设置备份数据所在位置，例如：/usr/local/mongodb/dump。<br>你不能同时指定 <path> 和 –dir 选项，–dir也可以设置备份目录。<br></path></li><li><strong>–dir：</strong>指定备份的目录<br>你不能同时指定 <path> 和 –dir 选项。</path></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongorestore -h localhost:27017 -d asGiant -c user --dir /usr/local/mongodb/dump -u myz -p 12346</span><br></pre></td></tr></table></figure><blockquote><p>mongodump -u root -p 123456</p></blockquote><blockquote><p>mongorestore  -u root -p 123456</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> mongoose </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mongoose </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2 工具连接</title>
      <link href="/2019/04/10/mongoose/2%20%E5%B7%A5%E5%85%B7%E8%BF%9E%E6%8E%A5/"/>
      <url>/2019/04/10/mongoose/2%20%E5%B7%A5%E5%85%B7%E8%BF%9E%E6%8E%A5/</url>
      
        <content type="html"><![CDATA[<h3 id="2-1-下载robo-3t"><a href="#2-1-下载robo-3t" class="headerlink" title="2.1 下载robo 3t"></a>2.1 下载robo 3t</h3><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1558111776384-626142fe-a6ae-4c93-8bfc-f09fd60ff3d0.png#align=left&display=inline&height=79&name=image.png&originHeight=158&originWidth=1488&size=22566&status=done&width=744" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1558111823432-c99dc6e6-270f-49f3-8ef1-b501e39fc33b.png#align=left&display=inline&height=66&name=image.png&originHeight=132&originWidth=1026&size=23704&status=done&width=513" alt="image.png"></p><p>创建一个连接</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1558111889974-b7860918-3830-4fed-b853-323e6df926fa.png#align=left&display=inline&height=447&name=image.png&originHeight=894&originWidth=1100&size=102242&status=done&width=550" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1558111935730-d21176ff-a5c1-41c0-8a87-ef3f3cf7b4c4.png#align=left&display=inline&height=451&name=image.png&originHeight=902&originWidth=1090&size=117520&status=done&width=545" alt="image.png"></p><blockquote><p>点击test</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1558111963540-8040ab62-243e-436c-a37d-48ac84a667c9.png#align=left&display=inline&height=196&name=image.png&originHeight=392&originWidth=736&size=36463&status=done&width=368" alt="image.png"></p><blockquote><p>安装完成</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1558111987942-c4daba07-9070-4a96-8e1f-31c154415841.png#align=left&display=inline&height=103&name=image.png&originHeight=206&originWidth=538&size=20486&status=done&width=269" alt="image.png"></p><p><a name="IzoQQ"></a></p><h3 id="2-2-连接加密数据库"><a href="#2-2-连接加密数据库" class="headerlink" title="2.2 连接加密数据库"></a>2.2 连接加密数据库</h3><p><code>xxx.db(&#39;mongodb://your name: your pwd@ip:27017/asgiant&#39;);</code><br><code>your name</code>：为用户名<br><code>your pwd</code>:为密码</p>]]></content>
      
      
      <categories>
          
          <category> mongoose </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mongoose </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>12 跳过前3个文档,返回其余的（skip）</title>
      <link href="/2019/04/10/mongoose/12%20%E8%B7%B3%E8%BF%87%E5%89%8D3%E4%B8%AA%E6%96%87%E6%A1%A3,%E8%BF%94%E5%9B%9E%E5%85%B6%E4%BD%99%E7%9A%84%EF%BC%88skip%EF%BC%89/"/>
      <url>/2019/04/10/mongoose/12%20%E8%B7%B3%E8%BF%87%E5%89%8D3%E4%B8%AA%E6%96%87%E6%A1%A3,%E8%BF%94%E5%9B%9E%E5%85%B6%E4%BD%99%E7%9A%84%EF%BC%88skip%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.ctx.model.Article.skip(<span class="number">3</span>);</span><br></pre></td></tr></table></figure><ul><li>对Article表中的数据进行返回，跳过前面3条数据，返回其余数据</li></ul><p>附：综合使用最后三个方法进行分页查询</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.ctx.model.Article.find(&#123; _id：<span class="number">5</span>c4a819fb87ba4002a47bc4f &#125;).skip(pageSize * (pageNum - <span class="number">1</span>)).limit(<span class="built_in">parseInt</span>(pageSize)).sort(&#123; <span class="attr">isSetTop</span>: <span class="number">-1</span>, <span class="attr">sort</span>: <span class="number">1</span>, <span class="attr">editTime</span>: <span class="number">-1</span> &#125;);</span><br></pre></td></tr></table></figure><ul><li>其中pageSize和pageNum为动态传递数据，返回Article表中特定_id在每页数据为pageSize条件下的第pageNum页中的数据，并按照“isSetTop”降序，再按“sort”升序，最后按“editTime”降序进行排序。</li></ul>]]></content>
      
      
      <categories>
          
          <category> mongoose </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mongoose </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7.Math的常用方法</title>
      <link href="/2019/04/10/JavaScript%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/7%20Math%E7%9A%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/"/>
      <url>/2019/04/10/JavaScript%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/7%20Math%E7%9A%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h2><blockquote><p>但是他是对象数据类型的</p></blockquote><ul><li>‘object’</li><li>Math对象中给我们提供了很多常用操作数字的方法</li><li>console.dir(Math) // 查看所有方法</li></ul><h3 id="abs"><a href="#abs" class="headerlink" title="abs"></a><code>abs</code></h3><blockquote><p>Math.abs 取绝对值</p></blockquote><h3 id="cell-floor"><a href="#cell-floor" class="headerlink" title="cell / floor"></a><code>cell / floor</code></h3><blockquote><p>cell: 向上取整<br>floor: 向下取整</p></blockquote><h3 id="round"><a href="#round" class="headerlink" title="round"></a><code>round</code></h3><blockquote><p>round: 四舍五入</p></blockquote><h3 id="random"><a href="#random" class="headerlink" title="random"></a><code>random</code></h3><blockquote><p>random: 获取一个[0,1]之间的一个随机小数</p></blockquote><h3 id="max-minx"><a href="#max-minx" class="headerlink" title="max/minx"></a><code>max/minx</code></h3><blockquote><p>max 获取一组值中的最大值<br>minx 获取一组值中的最小值</p></blockquote><h3 id="PI"><a href="#PI" class="headerlink" title="PI"></a><code>PI</code></h3><blockquote><p>Math.PI 获取圆周率</p></blockquote><h3 id="pow-sqrt"><a href="#pow-sqrt" class="headerlink" title="pow / sqrt"></a><code>pow / sqrt</code></h3><blockquote><p>pow  获取一个值的多少幂<br>sqrt  获取一个值的开平方</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> JavaScript基础入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript基础入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>10 排序（sort）</title>
      <link href="/2019/04/10/mongoose/10%20%E6%8E%92%E5%BA%8F%EF%BC%88sort%EF%BC%89/"/>
      <url>/2019/04/10/mongoose/10%20%E6%8E%92%E5%BA%8F%EF%BC%88sort%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.ctx.model.Article.sort(&#123; <span class="attr">isSetTop</span>: <span class="number">-1</span>, <span class="attr">sort</span>: <span class="number">1</span>, <span class="attr">editTime</span>: <span class="number">-1</span> &#125;);</span><br></pre></td></tr></table></figure><ul><li>对Article表中的数据进行排序，先按“isSetTop”降序，再按“sort”升序，最后按“editTime”降序</li></ul><p>备注：键对应数据中的键名，值代表排序方向，1 升序, -1降序。</p>]]></content>
      
      
      <categories>
          
          <category> mongoose </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mongoose </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1 安装与配置</title>
      <link href="/2019/04/10/mongoose/1%20%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
      <url>/2019/04/10/mongoose/1%20%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="1-0-介绍"><a href="#1-0-介绍" class="headerlink" title="1.0 介绍"></a>1.0 介绍</h3><p>MongoDB 是由C++语言编写的，是一个基于分布式文件存储的开源数据库系统。<br>在高负载的情况下，添加更多的节点，可以保证服务器性能。<br>MongoDB 旨在为WEB应用提供可扩展的高性能数据存储解决方案。<br>MongoDB 将数据存储为一个文档，数据结构由键值(key=&gt;value)对组成。MongoDB 文档类似于 JSON 对象。字段值可以包含其他文档，数组及文档数组</p><p><a name="yUwuU"></a></p><h3 id="1-1-mac电脑安装教程"><a href="#1-1-mac电脑安装教程" class="headerlink" title="1.1 mac电脑安装教程"></a>1.1 mac电脑安装教程</h3><p><a name="B29TT"></a></p><h4 id="1-1-1-安装homebrew"><a href="#1-1-1-安装homebrew" class="headerlink" title="1.1.1 安装homebrew"></a>1.1.1 安装homebrew</h4><p><strong>homebrew</strong>的安装查看官网，安装完成后，在终端中输入以下命令更新<strong>homebrew</strong>的<strong>package</strong>数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew update</span><br></pre></td></tr></table></figure><blockquote><p><strong>提示：</strong><code>brew update</code>升级<strong>brew</strong>的版本库，<code>brew outdated</code> 查看<strong>outdated</strong>的库和应用，<code>brew upgrade</code> 升级<strong>outdated</strong>的库和应用，<code>brew cleanup</code> 清理调过期的库和应用</p></blockquote><p><a name="d41d8cd9"></a></p><p>###<br><a name="obbjh"></a></p><h4 id="1-1-2-安装mongodb"><a href="#1-1-2-安装mongodb" class="headerlink" title="1.1.2 安装mongodb"></a>1.1.2 安装mongodb</h4><p>使用<strong>homebrew</strong>安装<strong>mongodb</strong>，在MAC的终端中输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install mongodb</span><br></pre></td></tr></table></figure><p>若要查看安装信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew info mongodb</span><br></pre></td></tr></table></figure><p>查看<strong>mongodb</strong>的版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongo --version</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">which mongod</span><br></pre></td></tr></table></figure><blockquote><p>/usr/local/bin/mongod</p></blockquote><p>如果这样了就安装成功了</p><p>启动服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mongod</span><br></pre></td></tr></table></figure><p><a name="QOeHY"></a></p><h3 id="1-2-手动部署服务器"><a href="#1-2-手动部署服务器" class="headerlink" title="1.2 手动部署服务器"></a>1.2 手动部署服务器</h3><p><a name="Nt3mz"></a></p><h4 id="1-2-1-下载安装包"><a href="#1-2-1-下载安装包" class="headerlink" title="1.2.1 下载安装包"></a>1.2.1 下载安装包</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://fastdl.mongodb.org/linux/mongodb-linux-i686-1.8.2.tgz</span><br></pre></td></tr></table></figure><blockquote><p>下载完成后解压缩压缩包</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar zxf mongodb-linux-i686-1.8.2.tgz</span><br></pre></td></tr></table></figure><p><a name="mNqTh"></a></p><h4 id="1-2-2-安装准备"><a href="#1-2-2-安装准备" class="headerlink" title="1.2.2. 安装准备"></a>1.2.2. 安装准备</h4><blockquote><p>将mongodb移动到/usr/local/server/mongdb文件夹</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv mongodb-linux-i686-1.8.2 /usr/<span class="built_in">local</span>/mongodb</span><br></pre></td></tr></table></figure><blockquote><p>创建数据库文件夹与日志文件</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir /usr/<span class="built_in">local</span>/mongodb/data</span><br><span class="line">touch /usr/<span class="built_in">local</span>/mongodb/logs</span><br></pre></td></tr></table></figure><p><a name="foqS2"></a></p><h4 id="1-2-3-设置开机自启动"><a href="#1-2-3-设置开机自启动" class="headerlink" title="1.2.3. 设置开机自启动"></a>1.2.3. 设置开机自启动</h4><blockquote><p>将mongodb启动项目追加入rc.local保证mongodb在服务器开机时启动</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"/usr/local/mongodb/bin/mongod --dbpath=/usr/local/mongodb/data –logpath=/usr/local/mongodb/logs –logappend  --auth -–port=27017"</span> &gt;&gt; /etc/rc.local</span><br></pre></td></tr></table></figure><p><a name="KxdTC"></a></p><h4 id="1-2-4-启动mongodb"><a href="#1-2-4-启动mongodb" class="headerlink" title="1.2.4. 启动mongodb"></a>1.2.4. 启动mongodb</h4><blockquote><p>cd到mongodb目录下的bin文件夹启动mongodb</p></blockquote><blockquote><p>下面这个是需要权限的登录方式, 用户连接需要用户名和密码</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/mongodb/bin/mongod --dbpath=/usr/<span class="built_in">local</span>/mongodb/data --logpath=/usr/<span class="built_in">local</span>/mongodb/logs --logappend  --auth  --port=27017 --fork</span><br></pre></td></tr></table></figure><blockquote><p>这个是不需要密码的(不建议)</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/mongodb/bin/mongod --dbpath=/usr/<span class="built_in">local</span>/mongodb/data --logpath=/usr/<span class="built_in">local</span>/mongodb/logs --logappend  --port=27017 --fork</span><br></pre></td></tr></table></figure><p><a name="8NP29"></a></p><h3 id="1-3-宝塔一键完成"><a href="#1-3-宝塔一键完成" class="headerlink" title="1.3 宝塔一键完成"></a>1.3 宝塔一键完成</h3><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1559531334019-86a722a4-a18f-426e-9c2b-3c315085168d.png#align=left&display=inline&height=35&name=image.png&originHeight=70&originWidth=2390&size=46391&status=done&width=1195" alt="image.png"></p><p><a name="2iHZv"></a></p><h3 id="1-4-设置密码"><a href="#1-4-设置密码" class="headerlink" title="1.4 设置密码"></a>1.4 设置密码</h3><p><a name="Z1sdz"></a></p><h4 id="1-4-1-进入安装路径的bin目录"><a href="#1-4-1-进入安装路径的bin目录" class="headerlink" title="1.4.1 进入安装路径的bin目录"></a>1.4.1 进入安装路径的bin目录</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /www/server/mongodb/bin</span><br></pre></td></tr></table></figure><p><a name="moqmc"></a></p><h4 id="1-4-2-输入命令行mongo，进入mongodb环境"><a href="#1-4-2-输入命令行mongo，进入mongodb环境" class="headerlink" title="1.4.2 输入命令行mongo，进入mongodb环境"></a>1.4.2 输入命令行mongo，进入mongodb环境</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongo</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1558111412784-e0fa0e6f-9090-427f-a0b9-09fe8a3567a9.png#align=left&display=inline&height=59&name=image.png&originHeight=118&originWidth=638&size=22004&status=done&width=319" alt="image.png"></p><p><a name="toiBP"></a></p><h4 id="1-4-3-切换到-admin-数据库"><a href="#1-4-3-切换到-admin-数据库" class="headerlink" title="1.4.3 切换到 admin 数据库"></a>1.4.3 切换到 admin 数据库</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use admin</span><br></pre></td></tr></table></figure><p><a name="BBpOM"></a></p><h4 id="1-4-4-给admin设置用户密码"><a href="#1-4-4-给admin设置用户密码" class="headerlink" title="1.4.4 给admin设置用户密码"></a>1.4.4 给admin设置用户密码</h4><ul><li>user: 用户名</li><li>pwd: 用户密码</li><li>roles: 用来设置用户的权限，比如读，读写 等等</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.createUser(&#123;user: &apos;root&apos;, pwd: &apos;admin_mima&apos;, roles: [&apos;root&apos;]&#125;)</span><br></pre></td></tr></table></figure><p><a name="Alj7z"></a></p><h4 id="1-4-5-验证是否添加成功，db-auth-用户名，用户密码"><a href="#1-4-5-验证是否添加成功，db-auth-用户名，用户密码" class="headerlink" title="1.4.5 验证是否添加成功，db.auth(用户名，用户密码)"></a>1.4.5 验证是否添加成功，db.auth(用户名，用户密码)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.auth(&apos;root&apos;, &apos;admin_mima&apos;)</span><br></pre></td></tr></table></figure><p>如果返回 ‘1’表示验证成功， 如果是 ‘0’ 表示验证失败。<br><br><br><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1558411932109-1d7f2d9f-20a1-4d6d-b6bd-a7847855ff60.png#align=left&display=inline&height=34&originHeight=34&originWidth=322&size=0&status=done&width=322" alt><br></p><p><a name="8W78N"></a></p><h4 id="1-4-6-创建一个新的数据库，例如asGiant"><a href="#1-4-6-创建一个新的数据库，例如asGiant" class="headerlink" title="1.4.6 创建一个新的数据库，例如asGiant"></a>1.4.6 创建一个新的数据库，例如asGiant</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use asGiant</span><br></pre></td></tr></table></figure><p><a name="b4x6c"></a></p><h4 id="1-4-7-接下来为asGiant库添加一个用户，并且赋予权限，"><a href="#1-4-7-接下来为asGiant库添加一个用户，并且赋予权限，" class="headerlink" title="1.4.7  接下来为asGiant库添加一个用户，并且赋予权限，"></a>1.4.7  接下来为asGiant库添加一个用户，并且赋予权限，</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.createUser(&#123; user: <span class="string">'aaaa'</span>, <span class="built_in">pwd</span>: <span class="string">'graphql_mima'</span>, roles: [&#123; role: <span class="string">'readWrite'</span>, db: <span class="string">'asGiant'</span> &#125;] &#125;)</span><br></pre></td></tr></table></figure><p>这行代码意思是 创建一个cccc用户 给予读写权限 db表示该用户操作的数据库名。</p><ul><li>Read：允许用户读取指定数据库</li><li>readWrite：允许用户读写指定数据库</li><li>dbAdmin：允许用户在指定数据库中执行管理函数，如索引创建、删除，查看统计或访问system.profile</li><li>userAdmin：允许用户向system.users集合写入，可以找指定数据库里创建、删除和管理用户</li><li>clusterAdmin：只在admin数据库中可用，赋予用户所有分片和复制集相关函数的管理权限。</li><li>readAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的读权限</li><li>readWriteAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的读写权限</li><li>userAdminAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的userAdmin权限</li><li>dbAdminAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的dbAdmin权限。</li><li>root：只在admin数据库中可用。超级账号，超级权限</li></ul><p><a name="nBy53"></a></p><h4 id="1-4-8-开启安全登录"><a href="#1-4-8-开启安全登录" class="headerlink" title="1.4.8 开启安全登录"></a>1.4.8 开启安全登录</h4><blockquote><p>一切搞定，重新开机mongodb，通过增加 <code>--auth</code> 开启安全登录</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongod --dbpath /www/server/mongodb/data --auth</span><br></pre></td></tr></table></figure><blockquote><p>如果你是手动安装，那么需要以下操作</p></blockquote><p>mongodb，MongoDB默认是没有开启访问控制，我们通过<code>--auth</code>参数重启mongod服务。</p><blockquote><p>mongod –dbpath 存放数据库文件夹路径 –auth</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongod --dbpath usr/<span class="built_in">local</span>/mongodb/bin --auth</span><br></pre></td></tr></table></figure><p>一旦开启了，用户连接mongod必须指定用户名和密码。</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1558111733895-302e35df-4422-4a99-8e0d-a673888824ce.png#align=left&display=inline&height=378&name=image.png&originHeight=756&originWidth=1422&size=272376&status=done&width=711" alt="image.png"></p><blockquote><p>如果你采用的是宝塔一键完成的</p></blockquote><p>可以通过修改<code>mongodb</code>的配置文件来实现</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1558412070104-0ec704c4-b636-4944-a00a-b628af913828.png#align=left&display=inline&height=388&name=image.png&originHeight=776&originWidth=1342&size=257604&status=done&width=671" alt="image.png"></p><blockquote><p>修改为</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1558412101307-bc4dc2bc-389c-48b2-8ebf-5044d3a52590.png#align=left&display=inline&height=465&name=image.png&originHeight=930&originWidth=1334&size=147929&status=done&width=667" alt="image.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">net:</span><br><span class="line">  port: 27017</span><br><span class="line">  bindIp: 0.0.0.0</span><br><span class="line"> </span><br><span class="line">#operationProfiling:</span><br><span class="line">#replication:</span><br><span class="line">#    replSetName: bt_main   </span><br><span class="line">security:</span><br><span class="line">  authorization: enabled</span><br><span class="line">  javascriptEnabled: false</span><br></pre></td></tr></table></figure><ul><li>bindIp修改为 0.0.0.0 允许外网访问</li><li>authorization 修改为 enabled 开启认证<br>重启一下mongodb</li></ul><p><a name="JGoCZ"></a></p><h3 id="1-5-放行端口"><a href="#1-5-放行端口" class="headerlink" title="1.5 放行端口"></a>1.5 放行端口</h3><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1558412161611-907b1d33-a788-4dfd-8e58-5be2f1669b83.png#align=left&display=inline&height=105&name=image.png&originHeight=210&originWidth=1412&size=32846&status=done&width=706" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> mongoose </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mongoose </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6.JS的DOM获取节点</title>
      <link href="/2019/04/09/JavaScript%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/6%20JS%E7%9A%84DOM%E8%8E%B7%E5%8F%96%E8%8A%82%E7%82%B9/"/>
      <url>/2019/04/09/JavaScript%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/6%20JS%E7%9A%84DOM%E8%8E%B7%E5%8F%96%E8%8A%82%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<blockquote><p>DOM:document object model 文档对象模型，提供一些属性和方法可以让我们去操作DOM元素</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1552464509901-7b6d49d4-6147-4355-9eed-3fa8568b4659.png#align=left&display=inline&height=150&name=image.png&originHeight=300&originWidth=450&size=41767&status=done&width=225" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1552490736429-afc8138d-9713-4b29-9ec0-b80238f4d94f.png#align=left&display=inline&height=538&name=image.png&originHeight=1076&originWidth=1816&size=601570&status=done&width=908" alt="image.png"></p><h2 id="节点介绍"><a href="#节点介绍" class="headerlink" title="节点介绍"></a>节点介绍</h2><blockquote><p>node 节点，浏览器默认在一个html页面中的所有内容都是节点(包括标签、注解、文字文本等)</p></blockquote><ul><li>元素节点:HTML标签</li><li>文本节点:文字内容(大部分浏览器会把空格和换行也当做文本节点)</li><li>注解节点</li><li>document文档节点</li></ul><blockquote><p>元素节点</p></blockquote><ul><li>nodeType:1<ul><li>属性含有某个节点的名称</li></ul></li><li>nodeName: 大写标签名(在部分浏览器的怪异模式下，我们写的标签名是小写，它获取的就是小写…)<ul><li>对于元素节点，因为本身不直接包含文本，所以nodeValue是不可用的。当然你也可以在示例中自己写试试看有什么结果出现。</li><li>对于文本节点，nodeValue=文本值</li><li>对于属性节点，nodeValue=属性值 </li></ul></li><li>nodeValue:null<ul><li>对于元素节点，nodeType=1</li><li>对于文本节点，nodeType=3</li><li>对于属性节点，nodeType=2</li><li>对于注释元素，nodeType=8</li><li>对于文档元素，nodeType=9</li></ul></li></ul><p>[curEle].tagName:获取当前元素的标签名(获取的标签名一般都是大写)</p><blockquote><p>文本节点</p></blockquote><p>nodeType:3<br>nodeName:#text<br>nodeValue:文本内容</p><blockquote><p>注释节点</p></blockquote><p>nodeType:8<br>nodeName:#comment<br>nodeValue:注释内容</p><blockquote><p>文档节点</p></blockquote><p>nodeType:9<br>nodeName:#document<br>nodeValue:null</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">--</span> <span class="attr">div</span>#<span class="attr">box</span>&gt;</span>(ul&gt;li&#123;0$&#125;*3)+div&#123;内容$&#125;*3--&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>01<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>02<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>03<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>内容1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>内容2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>内容3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="获取dom元素"><a href="#获取dom元素" class="headerlink" title="获取dom元素"></a>获取dom元素</h2><h3 id="document-getElementById-一个元素"><a href="#document-getElementById-一个元素" class="headerlink" title="document.getElementById 一个元素"></a>document.getElementById 一个元素</h3><ul><li>此方法的上下文只能document</li><li>一个html页面中元素的id理论上是不能重复的,如果页面中ID重复了，我们获得结果第一个id对应的元素对象</li><li>在ie7更低的版本浏览器中，会把表单元素的name值当做id来识别使用(项目中尽量不要让表单的name和其他元素的id相同)</li><li>如果我们把js放在结构的下面，我们可以直接使用id值获取这个元素(不需要通过getElementById获取)，而且这种方式会把页面中所有id是他的元素都获取到(元素对象，或者集合) =&gt; 不推荐</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"box1"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">   <span class="built_in">console</span>.log(box1)    <span class="comment">// -&gt; [div#box1, div#box1, box1: div#box1]</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"myInput"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">size</span>=<span class="string">"20"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> x=<span class="built_in">document</span>.getElementsByName(<span class="string">"myInput"</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="document-getElementClassName-元素集合"><a href="#document-getElementClassName-元素集合" class="headerlink" title="document.getElementClassName 元素集合"></a>document.getElementClassName 元素集合</h3><ul><li>上下文是可以自己来指定</li><li>获取到的结果是一个元素集合(类数组集合)</li></ul><ul><li>获取的结果是集合，哪怕集合中只有一项，我们想要操作的是这一项(元素对象)，需要先从集合中获取出来，然后再操作</li><li>但是真实的项目中我们经常会通过样式类名获取元素，getElementClassName这个方法在ie6-8不兼容的</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;input name=<span class="string">"myInput"</span> type=<span class="string">"text"</span> size=<span class="string">"20"</span>/&gt;<span class="xml"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  var x=document.getElementsByName("input");</span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">var bodyBox = document.getElementsByTagName('body');</span></span><br><span class="line"><span class="xml">bodyBox[0].getElementsByTagName('div');</span></span><br></pre></td></tr></table></figure><h3 id="document-getElementsTagName-元素集合"><a href="#document-getElementsTagName-元素集合" class="headerlink" title="document.getElementsTagName 元素集合"></a>document.getElementsTagName 元素集合</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"myInput"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">size</span>=<span class="string">"20"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> x=<span class="built_in">document</span>.getElementsByName(<span class="string">"input"</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="document-getElementsByName-节点集合"><a href="#document-getElementsByName-节点集合" class="headerlink" title="document.getElementsByName 节点集合"></a>document.getElementsByName 节点集合</h3><blockquote><p>通过元素的NAME属性值获取一组元素（类数组：节点集合NodeList）<br>他的上下文只能是document</p></blockquote><ul><li>IE浏览器只能识别表单元素的name属性值，所以我们这个方法一般都用来操作表单元素的</li><li>获取html获得body的元素对象<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"myInput"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">size</span>=<span class="string">"20"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"> <span class="keyword">var</span> x=<span class="built_in">document</span>.getElementsByName(<span class="string">"myInput"</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="domcument-domcumentElement-获取整个html的对象"><a href="#domcument-domcumentElement-获取整个html的对象" class="headerlink" title="domcument.domcumentElement 获取整个html的对象"></a>domcument.domcumentElement 获取整个html的对象</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.documentElement.clientWidth||<span class="built_in">document</span>.body.clientWidth</span><br><span class="line"><span class="comment">// 获取当前浏览器可视区域的宽度(当前页面一个屏幕的宽度)</span></span><br><span class="line"><span class="comment">// =&gt;clientHieght 获取高度</span></span><br></pre></td></tr></table></figure><h3 id="domcument-body-获取body对象"><a href="#domcument-body-获取body对象" class="headerlink" title="domcument.body 获取body对象"></a>domcument.body 获取body对象</h3><h3 id="domcument-head-获取整个head对象"><a href="#domcument-head-获取整个head对象" class="headerlink" title="domcument.head 获取整个head对象"></a>domcument.head 获取整个head对象</h3><h3 id="context-querySelector-一个元素对象-context-querySelectorAll-获取元素集合"><a href="#context-querySelector-一个元素对象-context-querySelectorAll-获取元素集合" class="headerlink" title="[context]querySelector  一个元素对象 / [context]querySelectorAll 获取元素集合"></a>[context]querySelector  一个元素对象 / [context]querySelectorAll 获取元素集合</h3><ul><li>ie6-8不兼容，而且没有特别好的办法处理他的兼容，所以这两个方法一般多用于移动端开发使用</li></ul><p>querySelector 获取一个元素对象<br>querySelectorAll 获取的一个元素集合<br>只要css支持的选择器，这里大部分都支持</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">'#box1'</span>);</span><br><span class="line"><span class="built_in">document</span>.querySelectorAll(<span class="string">'.box1'</span>);</span><br><span class="line"><span class="built_in">document</span>.querySelectorAll(<span class="string">'div'</span>);</span><br><span class="line"><span class="built_in">document</span>.querySelectorAll(<span class="string">'body&gt;div'</span>);</span><br><span class="line"><span class="built_in">document</span>.querySelectorAll(<span class="string">'#box1 li'</span>);</span><br></pre></td></tr></table></figure><h2 id="节点关系属性"><a href="#节点关系属性" class="headerlink" title="节点关系属性"></a>节点关系属性</h2><blockquote><p>节点是用来描述页面中每一部门之间关系的,只要我可以获取页面中的一个页面，那么我就可以通过相关的属性和方法获取页面中所有的节点</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1552635822022-57c9c5f8-f1bb-4e19-bd32-ce2c10156817.png#align=left&display=inline&height=175&name=image.png&originHeight=350&originWidth=764&size=48181&status=done&width=382" alt="image.png"></p><h3 id="childNodes"><a href="#childNodes" class="headerlink" title="childNodes"></a>childNodes</h3><blockquote><p>获取当前元素所有的子节点(节点集合:类数组)<br>注:不仅仅是元素子节点，文本、注释等都会包含在内:子节点说明只是在儿子辈分中查找</p></blockquote><h3 id="children"><a href="#children" class="headerlink" title="children"></a>children</h3><blockquote><p>获取所有的元素子节点(元素集合)<br>在IE6-8下获取的结果和标准浏览器中有区别(IE6-8中会把注释点当做元素节点获取到)</p></blockquote><h3 id="pareNode"><a href="#pareNode" class="headerlink" title="pareNode"></a>pareNode</h3><blockquote><p>获取当前元素的父节点(元素对象)</p></blockquote><h3 id="previousibing"><a href="#previousibing" class="headerlink" title="previousibing"></a>previousibing</h3><blockquote><p>获取当前节点的上一个各个节点上一个哥哥节点(不一定是元素节点也可能是文本或者注释)</p></blockquote><h3 id="nextibling"><a href="#nextibling" class="headerlink" title="nextibling"></a>nextibling</h3><blockquote><p>获取当前节点的下一个弟弟节点</p></blockquote><h3 id="previousElementbling"><a href="#previousElementbling" class="headerlink" title="previousElementbling"></a>previousElementbling</h3><blockquote><p>获取当前节点的上一个哥哥元素节点</p></blockquote><h3 id="nextElementsIbling"><a href="#nextElementsIbling" class="headerlink" title="nextElementsIbling"></a>nextElementsIbling</h3><blockquote><p>获取当前节点下一个弟弟元素节点<br>IE6-8不兼容</p></blockquote><h3 id="firstChild"><a href="#firstChild" class="headerlink" title="firstChild"></a>firstChild</h3><blockquote><p>当前元素所有子节点中的第一个(也不一定是元素节点，可能是文本和注释)</p></blockquote><h3 id="lastChild"><a href="#lastChild" class="headerlink" title="lastChild"></a>lastChild</h3><blockquote><p>当前元素多有子节点中的最后一个<br>fistElementChild lastElementChild(IE6-8兼容)</p></blockquote><h2 id="创建和增加DOM元素"><a href="#创建和增加DOM元素" class="headerlink" title="创建和增加DOM元素"></a>创建和增加DOM元素</h2><blockquote><p>真实项目中，我们偶尔会在js中动态创建html标签，然后把其增加到页面中</p></blockquote><h3 id="document-createElement"><a href="#document-createElement" class="headerlink" title="document.createElement"></a>document.createElement</h3><blockquote><p>在js中动态创建一个html标签</p></blockquote><h3 id="appendChild"><a href="#appendChild" class="headerlink" title="appendChild"></a>appendChild</h3><blockquote><p>容器.appendChild(新元素)<br>把当前创建的新元素添加到容器的末尾位置</p></blockquote><h3 id="inserBefore"><a href="#inserBefore" class="headerlink" title="inserBefore"></a>inserBefore</h3><blockquote><p>容器.inserBefore(新元素、老元素)<br>在当前容器中，把新创建的元素增加到老元素之前</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建</span></span><br><span class="line"><span class="keyword">var</span> oDiv = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">oDiv.id=<span class="string">'div1'</span>;</span><br><span class="line">oDiv.className = <span class="string">'box'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加到页面中</span></span><br><span class="line"><span class="built_in">document</span>.body.appendChild(oDiv);</span><br><span class="line"><span class="built_in">document</span>.body.inserBefore(oDiv,box2);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> link = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>);</span><br><span class="line">link.href = <span class="string">'http://www.baidu.com?name=1&amp;age=2#haha'</span></span><br><span class="line"></span><br><span class="line">consloe.dir(link);</span><br><span class="line"><span class="comment">// hash:存储饿哈希值 '#haha'</span></span><br><span class="line"><span class="comment">// hostname:域名 'www.baidu.com'</span></span><br><span class="line"><span class="comment">// pathname:路径 '/stu/'</span></span><br><span class="line"><span class="comment">// protocol:协议 'http:'</span></span><br><span class="line"><span class="comment">// search:问号传递参数值 '?nname=1&amp;age=2'</span></span><br></pre></td></tr></table></figure><p>真实项目中很多需要通过动态创建元素来完成的，其中有一个需求:解析一个url地址每一部分的信息(包括问号传值的参数值)</p><ul><li>纯字符串拆分截取</li><li>编写强大的正则，捕获到需要的结果</li><li>通过动态创建一个a标签，利用a标签的一些内置属性来分别获取每一部分的内容</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">queryURLParameter</span>(<span class="params">url</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> link = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>);</span><br><span class="line">  link.href=url;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> search = link.search,</span><br><span class="line">  obj = &#123;&#125;<span class="string">'</span></span><br><span class="line"><span class="string">  if(search.length===0) return;</span></span><br><span class="line"><span class="string">  search = search.substr(1).split(/&amp;|=/g);</span></span><br><span class="line"><span class="string">  for(var i=0;i&lt;search.length;i+=2)&#123;</span></span><br><span class="line"><span class="string">  var key = search[i],</span></span><br><span class="line"><span class="string">    value = search[i+1];</span></span><br><span class="line"><span class="string">    obj[key]=value;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  link = null;</span></span><br><span class="line"><span class="string">  return obj;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="修改删除克隆DOM元素"><a href="#修改删除克隆DOM元素" class="headerlink" title="修改删除克隆DOM元素"></a>修改删除克隆DOM元素</h2><h3 id="removeChild"><a href="#removeChild" class="headerlink" title="removeChild"></a>removeChild</h3><ul><li>容器.removeChild(元素)</li><li>在当前容器中把每一个元素移出掉</li></ul><h3 id="replaceChild"><a href="#replaceChild" class="headerlink" title="replaceChild"></a>replaceChild</h3><ul><li>容器.removeChild(新元素，老元素)</li><li>把原有的元素克隆一份一模一样的，false:只克隆当前元素本身，true:深度克隆，吧当前元素本身以及元素的所有后代都进行克隆<h3 id="set-get-remove-Attribute"><a href="#set-get-remove-Attribute" class="headerlink" title="[set/get/remove]Attribute"></a>[set/get/remove]Attribute</h3></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">给当前元素设置/获取/移出属性的(一般操作的都是它的自定义属性)</span><br><span class="line">box.setAttribute(<span class="string">'myIndex'</span>,<span class="number">0</span>)</span><br><span class="line">box.getAttribute(<span class="string">'myIndex'</span>)</span><br><span class="line">box.removeAttribute(<span class="string">'myIndex'</span>)</span><br></pre></td></tr></table></figure><blockquote><p>使用xxx.index=0 和xxx.setAttribute(‘index’,0)这两种设置自定义属性的区别</p></blockquote><p>xxx.index : 是吧当前操作的元素当做一个普通对象，为其设置一个属性名<br>xxx.setAttribute:把元素当做特殊的元素对象来处理，设置的自定义属性是和页面结构中的DOM元素映射在一起的</p><p>JS中获取的元素对象，我们可以把他理解为两种角色:</p><ul><li>与页面HTML结构无关的普通对象</li><li>与页面HTML结构存在映射关系的元素对象</li></ul><p>元素对象中的内置属性，大部分都和页面的标签存在映射关系:<br>xxx.style.backgroundColor = ‘xxx’ 此时不仅把js中对象对应的属性值改变了，而且也会映射到页面的html标签上(标签中有一个style行内样式，元素的样式改变了)<br>xxx.className = ‘xxx’此时不仅是吧js对象中的属性值改变了，而且页面中的标签增加了class样式类(可以看见的)</p><p>元素对象中的自定义属性: xxx.index=0<br>仅仅是吧js对象中增加了一个属性名(自定义的)，和页面中的html没啥关系(在结构上看不见)</p><p>xxx.setAttribute:通过这种方式设置的自定义属性和之前提到的内置属性差不多，都是和html结构存在映射关系的(设置的自定属性可以呈现在结构上)</p><h2 id="6-6-面试题"><a href="#6-6-面试题" class="headerlink" title="6.6 面试题"></a>6.6 面试题</h2><blockquote><p>把当前页面中所有id叫做box1的都获取到</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> allList = <span class="built_in">document</span>.getElementsByTagName(*);</span><br><span class="line"><span class="keyword">var</span> result = []</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;allList.length;i++)&#123;</span><br><span class="line"><span class="keyword">var</span> item = allList[i];</span><br><span class="line">  item.id === <span class="string">'box1'</span>?result.push(item)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(result)</span><br></pre></td></tr></table></figure><blockquote><p>获取当前元素的上一个哥哥元素节点(兼容所有的浏览器)<br>curEle:current element</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 首先获取当前元素的上一个哥哥节点，判断当前获取的节点是否为元素节点(nodeType===1)</span></span><br><span class="line"><span class="comment">// 如果不是基于当前获取的节点，找他的上一个哥哥节点..(找几次不知道)一直到找到的节点是元素节点为止</span></span><br><span class="line"><span class="comment">// 如果在查找过程中，发现没有上一个哥哥节点，找到头了，则不再继续查找</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">prev</span>(<span class="params">curEle</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> p = curEle.previousSibling; <span class="comment">// 属性返回同一树层级中指定节点的前一个节点。</span></span><br><span class="line">  <span class="keyword">while</span>(p&amp;&amp;p.nodeType!==<span class="number">1</span>)&#123; <span class="comment">//p:p!=null</span></span><br><span class="line">    p = p.previousSibling;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 扩展</span></span><br><span class="line"><span class="comment">// next: 获取下一个弟弟元素节点</span></span><br><span class="line"><span class="comment">// prevAll:获取所有的哥哥元素节点</span></span><br><span class="line"><span class="comment">// nextAll:获取所有的弟弟元素节点</span></span><br><span class="line"><span class="comment">// siblings:获取所有的兄弟元素节点</span></span><br><span class="line"><span class="comment">// index:获取当前元素的兄弟中排名索引</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript基础入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript基础入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4.JS数据类型</title>
      <link href="/2019/04/09/JavaScript%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/4%20JS%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/2019/04/09/JavaScript%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/4%20JS%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="基本数据类型（值类型）"><a href="#基本数据类型（值类型）" class="headerlink" title="基本数据类型（值类型）"></a>基本数据类型（值类型）</h3><ul><li>Number  数字</li><li>String  字符串<ul><li>单引号包裹起来的都是字符串(单双号没有区别)</li></ul></li><li>Boolean  布尔<ul><li>true false =&gt; 布尔值只有两个值</li></ul></li><li>null 空对象指针</li><li>undefined  未定义</li></ul><h3 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h3><ul><li>{}  普通对象</li><li>[]  数组</li><li>/^$/ 正则</li><li>…</li></ul><h3 id="function数据类型"><a href="#function数据类型" class="headerlink" title="function数据类型"></a>function数据类型</h3><ul><li>funciotn fn (){}</li></ul><h2 id="数据类型检查"><a href="#数据类型检查" class="headerlink" title="数据类型检查"></a>数据类型检查</h2><ul><li>typeof<ul><li>用来检测数据类型的运算符</li></ul></li><li>instanceod<ul><li>检测某个实例是否属于这个类</li></ul></li><li>constructor <ul><li>获取当前实例的构造器</li></ul></li><li>Object prototype.toSting.call()<ul><li>获取当前实例的所属类信息</li></ul></li></ul><h3 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h3><p>操作符<br>typeof 是用来检测给定变量的数据类型的操作符。对一个值使用 typeof 操作符可能返回下列某个字符串：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"undefined"</span></span><br><span class="line"><span class="string">"boolean"</span></span><br><span class="line"><span class="string">"string"</span></span><br><span class="line"><span class="string">"number"</span></span><br><span class="line"><span class="string">"object"</span> <span class="comment">// 如果这个值是对象或者null "function"</span></span><br></pre></td></tr></table></figure><h2 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h2><blockquote><p>Boolean()</p></blockquote><ul><li>把其他数据类型的值转化为布尔类型</li><li>只有0、Nan、null、undefined这五个数据值转换为布尔类型的false，其余的都会变成true</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1552208177369-64842834-6cfb-404d-81bf-8aebbb3ccd6a.png#align=left&display=inline&height=305&name=image.png&originHeight=812&originWidth=412&size=151327&status=done&width=155" alt="image.png"></p><blockquote><p>叹号在JS中海油一个作用：取反，先把值转换为布尔类型，然后再去取反</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1552208350624-3136c9bb-8da6-4d5a-9f28-79a81a3a0b7d.png#align=left&display=inline&height=109&name=image.png&originHeight=218&originWidth=98&size=14063&status=done&width=49" alt="image.png"></p><p><code>!!</code></p><blockquote><p>在叹号取反的基础上取反，取反两次相当于没有操作，但是却已经其他类型值转化为布尔类型了，和Boolean是相同的效果  </p></blockquote><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><blockquote><p>在JS中单引号和双引号包起来的都是字符串</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">12</span> - &gt; number</span><br><span class="line"><span class="string">'12'</span> -&gt; string</span><br><span class="line"><span class="string">'[12,23]'</span> -&gt; string</span><br></pre></td></tr></table></figure><h3 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString()"></a>toString()</h3><p>第一种是使用几乎每个值都有的 toString()方法。多数情况下，调用 toString() 方法不必传递参数，但在调用数值的 toString()方法时，可以传递一个参数：输出数值的基数。默认情况下，toString() 方法以十进制格式返回数值的字符串表示。而通过传递基数，toString() 可以输出二进制、八进制、十六进制等。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line">alert(num.toString());    <span class="comment">// "10"</span></span><br><span class="line">alert(num.toString(<span class="number">2</span>));  <span class="comment">// "1010"</span></span><br><span class="line">alert(num.toString(<span class="number">8</span>));  <span class="comment">// "12"</span></span><br><span class="line">alert(num.toString(<span class="number">10</span>));  <span class="comment">// "10"</span></span><br><span class="line">alert(num.toString(<span class="number">16</span>));  <span class="comment">// "A"</span></span><br></pre></td></tr></table></figure><p>常用方法<br><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1552212096220-2e8a4a63-4ef0-4168-9a4a-466a64dfe772.png#align=left&display=inline&height=189&name=image.png&originHeight=276&originWidth=266&size=51778&status=done&width=182" alt="image.png"></p><h3 id="number数字"><a href="#number数字" class="headerlink" title="number数字"></a>number数字</h3><blockquote><p>0 12-22 12.5 js中多增加了一个number类型的数据NaN  typeof NaN -&gt; Number</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> intNum = <span class="number">55</span>; <span class="comment">// 十进制整数 var octalNum1 = 070; // 八进制的56</span></span><br><span class="line"><span class="keyword">var</span> octalNum1 = <span class="number">079</span>; <span class="comment">// 无效的八进制数值——解析为79 </span></span><br><span class="line"><span class="keyword">var</span> octalNum1 = <span class="number">08</span>; <span class="comment">// 无效的八进制数值——解析为8 </span></span><br><span class="line"><span class="keyword">var</span> hexNum1 = <span class="number">0xA</span>;  <span class="comment">// 十六进制的10</span></span><br><span class="line"><span class="keyword">var</span> hexNum2 = <span class="number">0x1F</span>; <span class="comment">// 十六进制的31</span></span><br></pre></td></tr></table></figure><blockquote><p>注意，八进制字面量在严格模式下是无效的，会导致抛出错误。</p></blockquote><h3 id="数值范围"><a href="#数值范围" class="headerlink" title="数值范围"></a>数值范围</h3><p>ECMAScript 能够表示的最小数值保存在 Number.MIN_VALUE 中——在多数浏览器中，这个值是 5e-324；能够 Number.MAX_VALUE 中——在大多数浏览器中，这个值是1.7976931348623157e+308。如果某次计算的结果得到了一个超过JavaScript 数值范围的值，那么这个数值将会自动转换为 Infinity 值，如果这个数值是负数，则会转换成 -Infinity（负无穷），如果这个数值是正数，则会转换成Infinity（正无穷）。要确定一个数值是不是有穷的，可以使用 isFinite() 函数。</p><h3 id="NaN"><a href="#NaN" class="headerlink" title="NaN"></a>NaN</h3><ul><li>not a numer : 不是一个数，但是属于number类型</li><li>NaN == NaN ： false , NaN 和任何其他值都不相等</li></ul><h3 id="isNaN"><a href="#isNaN" class="headerlink" title="isNaN()"></a>isNaN()</h3><ul><li>用来检测当前这个值是否是非有效数字，如果不是有效数字，检测的结果是true , 反之是有效数字则为false</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">isNaN</span>(<span class="number">0</span>)   <span class="comment">// -&gt;false</span></span><br><span class="line"><span class="built_in">isNaN</span>(<span class="literal">NaN</span>) <span class="comment">// -&gt;true</span></span><br></pre></td></tr></table></figure><ul><li>当我们使用isNaN检测值的时候，检测的值不是number类型的，浏览器默认的吧值先转换为number类型，任何再去检测</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">isNaN</span>(<span class="string">'12'</span>) <span class="comment">//-&gt;false</span></span><br></pre></td></tr></table></figure><h3 id="Number"><a href="#Number" class="headerlink" title="Number()"></a>Number()</h3><ul><li>把其他数据类型值转化成number类型的值</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Number</span>(<span class="string">'12'</span>) <span class="comment">// -&gt; 12</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="string">'12px'</span>) <span class="comment">// -&gt;NaN</span></span><br><span class="line"><span class="comment">// 在使用Number转换的时候只要字符串中出现任何一个非有效数字字符，最后的结果都是NaN</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Number</span>(<span class="literal">true</span>) <span class="comment">//-&gt; 1 </span></span><br><span class="line"><span class="built_in">Number</span>(<span class="literal">false</span>) <span class="comment">//-&gt; 0</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="literal">null</span>) <span class="comment">// -&gt; 0</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="literal">undefined</span>) <span class="comment">//-&gt;NaN</span></span><br></pre></td></tr></table></figure><ul><li>把引用数据类型转换成number，首先需要吧引用数据类型转为字符串（toString)，在把字符串转换为number即可</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Number</span>([]) <span class="comment">// -&gt; ""</span></span><br><span class="line"><span class="built_in">Number</span>([<span class="number">12</span>]) <span class="comment">// -&gt; 12</span></span><br><span class="line"><span class="built_in">Number</span>([<span class="number">12</span>,<span class="number">13</span>]) <span class="comment">// -&gt; 12,13 (,是非有效字符) -&gt; NaN</span></span><br><span class="line"><span class="built_in">Number</span>(&#123;<span class="attr">age</span>:<span class="number">12</span>&#125;) <span class="comment">// -&gt;NaN</span></span><br><span class="line"><span class="built_in">Number</span>(&#123;&#125;) <span class="comment">// -&gt; NaN</span></span><br></pre></td></tr></table></figure><h3 id="pareInt"><a href="#pareInt" class="headerlink" title="pareInt"></a>pareInt</h3><ul><li>也是吧其他数据类型值转换为number，和Number方法在处理字符串的时候有所区别</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Number</span>(<span class="string">'12px'</span>) <span class="comment">// -&gt; NaN</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">'12px'</span>) <span class="comment">// -&gt; 12</span></span><br></pre></td></tr></table></figure><ul><li>提取规则：从左到右依次查找有效数字字符，知道遇到非有效数字字符为止（不管后端是否还有，都不找了）</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(<span class="string">'12px13'</span>) <span class="comment">// -&gt; 12</span></span><br></pre></td></tr></table></figure><h3 id="数值转换"><a href="#数值转换" class="headerlink" title="数值转换"></a>数值转换</h3><p>处理整数最常用的还是 parseInt() ，它会忽略字符前面的空格，直到找到第一个非空格字符。如果第一个字符不是数字字符或者负号，parseInt() 就会返回 NaN；也就是说，用 parseInt() 转换空字符串会返回 NaN 。如果第一个字符是数字字符， parseInt() 会继续解析第二个字符，直到解析完所有后续字符或者遇到了一个非数字字符。如果字符以“0x”开头且后面跟数字字符，会被解析为 16 进制整数；<br>以“0”开头且后面跟数字字符，会被解析为 8 进制整数。下面给出一些例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num1 = <span class="built_in">parseInt</span>(<span class="string">"1234blue"</span>);   <span class="comment">// 1234</span></span><br><span class="line"><span class="keyword">var</span> num2 = <span class="built_in">parseInt</span>(<span class="string">""</span>);     <span class="comment">// NaN</span></span><br><span class="line"><span class="keyword">var</span> num3 = <span class="built_in">parseInt</span>(<span class="string">"0xA"</span>);    <span class="comment">// 10(十六进制)</span></span><br><span class="line"><span class="keyword">var</span> num4 = <span class="built_in">parseInt</span>(<span class="number">22.5</span>);   <span class="comment">// 22</span></span><br><span class="line"><span class="keyword">var</span> num5 = <span class="built_in">parseInt</span>(<span class="string">"70"</span>);     <span class="comment">// 70</span></span><br><span class="line"><span class="keyword">var</span> num6 = <span class="built_in">parseInt</span>(<span class="string">"0xf"</span>);    <span class="comment">// 15(十六进制)</span></span><br></pre></td></tr></table></figure><h3 id="pareFloat"><a href="#pareFloat" class="headerlink" title="pareFloat"></a>pareFloat</h3><ul><li>在pareInt的基础上可以识别小数点</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pareInt(<span class="string">'12.5px'</span>) -&gt; <span class="number">12</span></span><br><span class="line">pareFloat(<span class="string">'12.5px'</span>) -&gt; <span class="number">12.5</span></span><br></pre></td></tr></table></figure><h2 id="null-和undefined"><a href="#null-和undefined" class="headerlink" title="null 和undefined"></a>null 和undefined</h2><ul><li>null : 空，没有</li><li>undefined ：未定义，没有</li><li>“” : 空字符串，没有</li><li>0: 也可以理解为没有</li></ul><h3 id="空字符串和null的区别"><a href="#空字符串和null的区别" class="headerlink" title="空字符串和null的区别"></a>空字符串和null的区别</h3><ul><li>都是去去种树</li><li>空字符串属于去挖了个坑，但是没有种任何东西</li><li>null属于连坑都没挖</li><li>空字符串相对于null来说开辟了内存地址，消耗了那么一丢丢的性能</li></ul><h3 id="null和undefined的区别"><a href="#null和undefined的区别" class="headerlink" title="null和undefined的区别"></a>null和undefined的区别</h3><ul><li>null一般都是暂时没有，预期中以后会有的(可能以后也没有达到预期)，在js中null都是手动先赋值为null，后期我们在给其赋具体值</li><li>undefined:完全没有预料之内的</li></ul><h2 id="Object-对象"><a href="#Object-对象" class="headerlink" title="Object 对象"></a>Object 对象</h2><blockquote><p>ECMAScript 中的对象其实就是一组数据和功能的集合。对象可以通过执行 new 操作符后跟要创建的对象类型的名称来创建。而创建 Object 类型的实例并为其添加属性和（或）方法，就可以创建自定义对象，如下所示：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br></pre></td></tr></table></figure><p>每一个对象都是由零到多组 属性名（key键）：属性值(value值) 组成的,或者说有多组键值对组成的，每一组键值对中间用逗号分隔</p><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><blockquote><p>描述这个对象特点特征的</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj =&#123;<span class="attr">name</span>:<span class="string">'wjw'</span>,<span class="attr">age</span>:<span class="number">8</span>&#125;;</span><br></pre></td></tr></table></figure><h3 id="获取"><a href="#获取" class="headerlink" title="获取"></a>获取</h3><blockquote><p>某个属性名对应的属性值或者数字格式的</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">obj.name</span><br><span class="line">obj[<span class="string">'name'</span>]</span><br></pre></td></tr></table></figure><h3 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h3><blockquote><p>属性值可以是任何数据类型</p></blockquote><ul><li>对象名.属性名：忽略属性名的单双引号</li><li>对象名[属性名]：不能忽略单双引号</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果属性名是数字如何操作</span></span><br><span class="line">obj<span class="number">.0</span> 语法不支持</span><br><span class="line">obj[<span class="number">0</span>] / obj[<span class="string">'0'</span>] 两种都支持</span><br></pre></td></tr></table></figure><blockquote><p>如果操作的属性名在对象中不存在，获取的结果是undefined</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">obj.sex <span class="comment">// -&gt;undefined</span></span><br></pre></td></tr></table></figure><h3 id="设置-修改"><a href="#设置-修改" class="headerlink" title="设置/修改"></a>设置/修改</h3><blockquote><p>一个对象的属性名是不能重复的（唯一性），如果之前存在就是修改属性值的操作，反之不存在就是新的设置属性的操作</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">obj.sex = <span class="string">'男'</span>;</span><br><span class="line">obj[<span class="string">'age'</span>] = <span class="number">9</span>;</span><br></pre></td></tr></table></figure><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><h4 id="假删除-让其属性赋值为null，但是属性还是对象"><a href="#假删除-让其属性赋值为null，但是属性还是对象" class="headerlink" title="假删除:让其属性赋值为null，但是属性还是对象"></a>假删除:让其属性赋值为null，但是属性还是对象</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">obj.sex = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><h4 id="真删除-把整个属性都在对象中暴力移出"><a href="#真删除-把整个属性都在对象中暴力移出" class="headerlink" title="真删除:把整个属性都在对象中暴力移出"></a>真删除:把整个属性都在对象中暴力移出</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> obj.sex</span><br></pre></td></tr></table></figure><h3 id="基本数据类型-和-引用数据类型的区别"><a href="#基本数据类型-和-引用数据类型的区别" class="headerlink" title="基本数据类型 和 引用数据类型的区别"></a>基本数据类型 和 引用数据类型的区别</h3><blockquote><p>JS是运行在浏览器中的(内核引擎)，浏览器会为JS提供赖以生存的环境（提供给js代码执行的环境）=&gt; 全局作用域window(global)</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">12</span>;</span><br><span class="line"><span class="keyword">var</span> b = a; <span class="comment">// 把A变量存储的值赋值给B</span></span><br><span class="line">b = <span class="number">13</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> n =&#123;<span class="attr">name</span>:<span class="string">'wjh'</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> m = n;</span><br><span class="line">m.name = <span class="string">'wjw'</span></span><br><span class="line"><span class="built_in">console</span>.log(n.name)</span><br></pre></td></tr></table></figure><ul><li>基本数据类型是按值操作的：基本数据类型的赋值的时候，是直接把值赋值给变量即可</li><li>引用数据类型是按照空间地址（引用地址）来操作的: var n = {name:’wjw’}<ul><li>先创建一个变量n</li><li>浏览器首先会吧开辟一个新的存储控件（内存控件），目的是吧对象中需要存储的内容（键值对）分别的存储在这个空间中，为了方便后期找到这个空间，浏览器给空间设定一个地址（16进制）</li><li>把空间的地址赋值给了变量</li></ul></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1552297184317-5a20e4ac-2ac4-4b41-8388-31856879bd7d.png#align=left&display=inline&height=390&name=image.png&originHeight=780&originWidth=906&size=92890&status=done&width=453" alt="image.png"></p><p><a name="08ed45a7"></a></p><h3 id="4-9-function数据类型"><a href="#4-9-function数据类型" class="headerlink" title="4.9 function数据类型"></a>4.9 function数据类型</h3><blockquote><p>函数数据类型也要按照引用地址来操作的</p></blockquote><p>函数:具备一定功能的方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// =&gt; 创建函数:</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> 函数名(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">//=&gt; 函数体:实现某一个功能的具体JS代码</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// =&gt; 执行函数:相当于使用洗衣机洗衣服(如果函数只创建了，但是没有去执行，函数没有任何的意义)</span></span><br><span class="line"><span class="comment">// 函数名()</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">fn; <span class="comment">// =&gt; 输出函数本身</span></span><br><span class="line">fn(); <span class="comment">// =&gt; 把函数执行（吧函数体重实现功能的代码执行）</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1552306799475-e85f6b5c-ed1a-4793-8c0d-41d1d899d981.png#align=left&display=inline&height=221&name=image.png&originHeight=442&originWidth=876&size=270908&status=done&width=438" alt="image.png"></p><p>形参：形式参数(变量)，函数的入口<br>当我们创建一个函数想要实现个功能的时候，发现有一些材料不清楚，只有当函数运行的时候，别人传递给我，我才知道，此时我们就需要设定入口,让用户执行的时候通过入口把值把我们</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">num1,num2</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(num1+num2)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 实参:函数执行传递给函数的具体值就是实参</span></span><br><span class="line">fn(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">fn(<span class="number">10</span>,<span class="number">20</span>);</span><br></pre></td></tr></table></figure><h3 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h3><p>把其他数据类型转换为number类型<br>-&gt; isNaN、Number、pareInt、parseFloat<br>-&gt; 在进行数据加减乘除数学运算的时候</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// true -&gt; 1 false-&gt;0</span></span><br><span class="line"><span class="comment">// ''-&gt;0  '12'-&gt;12  '12px'-&gt;NaN/12</span></span><br><span class="line"><span class="comment">// '小伙子'-&gt;NaN</span></span><br><span class="line"><span class="comment">// null -&gt; 0 </span></span><br><span class="line"><span class="comment">// undefined-&gt; NaN</span></span><br><span class="line">&#123;&#125; /^$/ <span class="function"><span class="keyword">function</span>(<span class="params"></span>) -&gt;<span class="title">NaN</span></span></span><br><span class="line">[]</span><br><span class="line">[<span class="number">12</span>]-&gt;<span class="string">'12'</span>-&gt;<span class="number">12</span></span><br><span class="line">[<span class="string">'12,13'</span>]-&gt;<span class="string">'12,23'</span>-&gt;<span class="literal">NaN</span></span><br><span class="line"><span class="comment">// =&gt; 引用数据类型转换为数字</span></span><br><span class="line"><span class="comment">// 通过toString方法把数组转换为字符串，然后在调用Number转换为数字</span></span><br></pre></td></tr></table></figure><h3 id="JS中的数据运算"><a href="#JS中的数据运算" class="headerlink" title="JS中的数据运算"></a>JS中的数据运算</h3><ul><li>+、-、*、/加减乘除</li><li>除了加法有特殊性，其余的运算符都是数学运算，也是遇到非数字类型，需要把其转换为number再运算</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1-&apos;1&apos; -&gt; 0</span><br><span class="line">10*null -&gt; 0</span><br><span class="line">10/undefined -&gt; NaN</span><br><span class="line">10*[10]-&gt;100</span><br></pre></td></tr></table></figure><h3 id="加法的特殊性"><a href="#加法的特殊性" class="headerlink" title="加法的特殊性:"></a>加法的特殊性:</h3><ul><li>在遇到字符串的时候，+不是数学运算，而是字符串拼接，只要不遇到字符串就是数学运算</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1+&apos;1&apos; -&gt; &apos;11&apos;</span><br><span class="line">null+&apos;1&apos; -&gt; ‘null1’</span><br></pre></td></tr></table></figure><ul><li>字符串拼接:是把其它的值转换为字符串然后再拼接(toString)</li><li>其它数据类型的toString是直接的把值用单(双)引号包起来极客，只有对象的特殊性，对象的有特殊性，对象.toStirng===’[Object Object]</li></ul><h3 id="将其它数据类型转换为布尔类型"><a href="#将其它数据类型转换为布尔类型" class="headerlink" title="将其它数据类型转换为布尔类型"></a>将其它数据类型转换为布尔类型</h3><ul><li>Boolean、！、！！</li><li>在条件判断的时候、也是转换为布尔类型，然后验证条件的真假</li><li>只有0、NaN、空字符串、null、undefined五个转换为false、其余的都是转换为true</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[] -&gt; true</span><br><span class="line">-1 -&gt; true</span><br><span class="line"></span><br><span class="line">if(box)&#123;</span><br><span class="line">// =&gt; 首先把box变量存储的值获取到，转化为布尔类型，如果为true条件成立，反之不成立</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if(3+&apos;3px&apos;)&#123;</span><br><span class="line">// 条件成立: 3 + &apos;3px&apos; = &apos;33px&apos; </span><br><span class="line">&#125;</span><br><span class="line">if(3-&apos;3px&apos;)&#123;</span><br><span class="line">// 条件不成立: 3-&apos;3px&apos; = NaN</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在使用-进行比较的时候"><a href="#在使用-进行比较的时候" class="headerlink" title="在使用==进行比较的时候"></a>在使用==进行比较的时候</h3><blockquote><p>在使用==进行比较的时候，如果左右两边的数据不相同，浏览器默认转换为相同的类型，然后在比较(‘===’不会这样操作)</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 对象和对象: 应用数据类型比较的空间地址不一样，不是一个空间</span><br><span class="line">[] == [] -&gt; false</span><br><span class="line">var a =&#123;&#125;</span><br><span class="line">var b = a;</span><br><span class="line">a==b -&gt; true</span><br></pre></td></tr></table></figure><h3 id="对象和数字-吧对象转换成数字"><a href="#对象和数字-吧对象转换成数字" class="headerlink" title="对象和数字:吧对象转换成数字"></a>对象和数字:吧对象转换成数字</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[]== 0 -&gt; true</span><br><span class="line">(&#123;&#125;)=== NaN -&gt; false</span><br><span class="line">NaN和自己不相等和其它任何值都不相等</span><br></pre></td></tr></table></figure><h3 id="对象和字符串-把两边都转换为数字比较的"><a href="#对象和字符串-把两边都转换为数字比较的" class="headerlink" title="对象和字符串:把两边都转换为数字比较的"></a>对象和字符串:把两边都转换为数字比较的</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[]===&apos;&apos; -&gt; true</span><br></pre></td></tr></table></figure><h3 id="对象和布尔值-把两边都转换成数字"><a href="#对象和布尔值-把两边都转换成数字" class="headerlink" title="对象和布尔值:把两边都转换成数字"></a>对象和布尔值:把两边都转换成数字</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[]==true -&gt;  0==1 -&gt;false</span><br><span class="line">[]==false -&gt;  0==0 -&gt;true</span><br><span class="line">![]==false -&gt;  ![]  -&gt;把数组变成为布尔在取反=false</span><br><span class="line">false=false -&gt; true</span><br></pre></td></tr></table></figure><p>字符串和数字:字符串转换为数字<br>字符串和布尔:都转为数字<br>布尔和数字:布尔转换为数字</p><p>规律:两个等于号比较，左右两边数字值的类型不一样，浏览器会吧两边的类型都转换为数字然后再比较，但是null和undefined除外<br>null==undefined -&gt; true<br>null===undefined -&gt; false<br>null 和 undefined 和其它任何都不相等<br>null==0 -&gt; false null以及undefined和其它任何值都不相等</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript基础入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript基础入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5.JS中常见的操作的语句</title>
      <link href="/2019/04/09/JavaScript%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/5%20JS%E4%B8%AD%E5%B8%B8%E8%A7%81%E7%9A%84%E6%93%8D%E4%BD%9C%E7%9A%84%E8%AF%AD%E5%8F%A5/"/>
      <url>/2019/04/09/JavaScript%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/5%20JS%E4%B8%AD%E5%B8%B8%E8%A7%81%E7%9A%84%E6%93%8D%E4%BD%9C%E7%9A%84%E8%AF%AD%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="if、else-if-、else"><a href="#if、else-if-、else" class="headerlink" title="if、else if 、else"></a>if、else if 、else</h2><blockquote><p>判断操作语句</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件<span class="number">1</span>)&#123;</span><br><span class="line"><span class="comment">//=&gt;条件1成立执行的操作</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(条件<span class="number">2</span>)&#123;</span><br><span class="line"><span class="comment">//=&gt;上面条件不成立，条件2成立，执行的操作</span></span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">// =&gt; 以上条件都不成立执行的操作</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果好几个条件都成立了，只吧第一个成立的条件执行，后面成立的条件忽略不管<br>条件:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">A==B、A!=B、A&gt;B、A&lt;B</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(A)&#123;&#125; <span class="comment">// 先把A转换为布尔类型，判断真假以此来决定是否成立</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//否成立</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(A&gt;B&amp;&amp;A&lt;<span class="number">10</span>)&#123;&#125; <span class="comment">//只有两个小条件都是真，整体条件为真</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(A&gt;B||A&lt;<span class="number">10</span>)&#123;&#125;  <span class="comment">// 只要其中一个小条件成立，整体条件是真</span></span><br></pre></td></tr></table></figure><blockquote><p>BAT 面试题</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="built_in">parseFloat</span>(<span class="string">'width:12.5px'</span>);</span><br><span class="line"><span class="keyword">if</span>(num==<span class="number">12.5</span>)&#123; <span class="comment">// =&gt;NaN</span></span><br><span class="line">alert(<span class="number">12.5</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(num==<span class="literal">NaN</span>)&#123; <span class="comment">// NaN!=NaN</span></span><br><span class="line">alert(<span class="literal">NaN</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">typeof</span> num==<span class="string">'number'</span>)&#123; <span class="comment">// </span></span><br><span class="line">alert(<span class="number">0</span>)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">alert(<span class="string">"啥也不是"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h2><blockquote><p>条件？条件成立执行：条件不成立执行</p></blockquote><p>if(条件){}else : 三元运算符就是这种简单if..else..的另一种写法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">if</span>(num&gt;<span class="number">5</span>&amp;&amp;num&lt;<span class="number">10</span>)&#123;</span><br><span class="line">num++;<span class="comment">//累加1</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">num--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 修改成为三元运算符,如果条件成立或者不成立的某一种情况并不需要什么处理</span></span><br><span class="line"><span class="comment">// 我们空着语法不符合，我们使用null、undefined、void 0(就是undefined)占位就可以</span></span><br><span class="line">num&gt;<span class="number">5</span>&amp;&amp;num&lt;<span class="number">10</span>?num++:num--;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">if</span>(num&gt;<span class="number">5</span> &amp;&amp; num&lt;<span class="number">10</span>)&#123;</span><br><span class="line">num++;</span><br><span class="line">  <span class="keyword">break</span>;<span class="regexp">/continue;/</span><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// =&gt; 修改成为三元运算符</span></span><br><span class="line"><span class="comment">// 在三元运算符的操作中不能出现break、continue、return这样的关键词，所以我们无法用三目代替if、else</span></span><br><span class="line">num&gt;<span class="number">5</span> &amp;&amp; num&lt;<span class="number">10</span>?</span><br><span class="line">(num++,<span class="keyword">return</span>):<span class="literal">null</span>;</span><br></pre></td></tr></table></figure><h2 id="swith-case"><a href="#swith-case" class="headerlink" title="swith case"></a>swith case</h2><blockquote><p>swith case应用于if、else中一个变量在不同值情况下的不同操作</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num =<span class="number">10</span>;</span><br><span class="line"><span class="keyword">switch</span>(num)&#123;</span><br><span class="line"><span class="comment">//switch后面小括号中存放的是一个值(一般我们都写变量;把变量存储的值拿来用，有时候也可能是一个计算)</span></span><br><span class="line">  <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    <span class="comment">// case后面放的都是值，目的验证switch后面的值和哪一种case后面的值相等，相等的进行对应的处理</span></span><br><span class="line">  ...</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    <span class="comment">// 每一种case借宿后都要加break借宿当前的判断</span></span><br><span class="line">  <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">  ...</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    <span class="comment">// switch后面的值和每一种case情况对应的值都不相等，执行最后的default，类似于false</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>案例分析</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">switch</span>(num%<span class="number">2</span>)&#123;<span class="comment">//=&gt;先把取余操作进行运算，拿运算结果case比较</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">  num++;</span><br><span class="line">  <span class="keyword">break</span>;  <span class="comment">//不加break，不管后面的条件是够成立，都会继续向下执行，知道遇到break为止</span></span><br><span class="line">    <span class="comment">// 不加break，就可以实现||这样的操作</span></span><br><span class="line">  <span class="keyword">case</span>: <span class="number">2</span><span class="number">-1</span>: <span class="comment">//case后面也应该是值，此处先把2-1计算，把计算的结果和switch值比较</span></span><br><span class="line">  num--;</span><br><span class="line">  <span class="comment">// 最后一项可以不加break，不加也能跳出判断</span></span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">num%<span class="number">2</span>:让num存储的值除以<span class="number">2</span>去余数(<span class="number">0</span>或者<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>swich case 中的比较实用的”===”</p><ul><li>=:赋值，等号左边是变量，右边是值</li><li>==:比较，如果左边两边的类型不一样，浏览器默认转换为一样的然后再进行比较  ‘6’==6  =&gt; 6==6 =&gt;true</li><li>===:绝对相等，不仅要求值一样，并且类型也要完全一样</li></ul><h2 id="循环操作语句"><a href="#循环操作语句" class="headerlink" title="循环操作语句"></a>循环操作语句</h2><blockquote><p>循环，重复做一件事情</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(设置循环起始值；设置循环执行的条件；步长累加)&#123;</span><br><span class="line"><span class="comment">// 循环体:重复做的事情都是在循环体重</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>设置初始值</li><li>验证条件</li><li>条件成立，执行循环体:不成立，循环借宿</li><li>步长累加</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(;i&lt;<span class="number">5</span>;;)&#123;</span><br><span class="line">consloe.log(i);</span><br><span class="line">  <span class="comment">//没有步长累加，我们的i永远是0，循环条件永远成立“死循环”;</span></span><br><span class="line">  <span class="comment">//项目中不能出现死循环，一旦出现,循环下面的事情都做不了</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h3><blockquote><p>结束本轮循环，继续执行下一轮:循环体重continue后面的代码都不会在执行，它会直接的去执行步长，然后进行下一轮</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i+=<span class="number">2</span>)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(i)</span><br><span class="line">  <span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="break"><a href="#break" class="headerlink" title="break"></a>break</h3><blockquote><p>结束整个循环:循环体重一旦遇到break首先后面代码不执行了，而且步长累加也不执行了，循环都结束了</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for(var i=0;i&lt;5;i+=2)&#123;</span><br><span class="line">console.log(i)</span><br><span class="line">  break;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>BAT面试题</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>;i&lt;<span class="number">10</span>;i+=<span class="number">2</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(i&lt;<span class="number">5</span>)&#123;</span><br><span class="line">  i++;</span><br><span class="line">    <span class="keyword">continue</span>;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  i+=<span class="number">3</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(i) <span class="comment">// =&gt;10</span></span><br></pre></td></tr></table></figure><h3 id="for-in"><a href="#for-in" class="headerlink" title="for in"></a>for in</h3><blockquote><p>用来遍历(循环)对象键值对的</p></blockquote><ul><li>var key;var attr(attribute);</li><li>对象中有多少键值对，我们的for in 循环遍历多少次(多少次)</li><li>第一次循环key这个遍历存储的都是当前循环这个组键值队的属性名</li><li>key存储的值都是字符串格式的(不管属性名是否为数字)</li><li>在for in 循环的遍历时候，大部分浏览器都是先把对象中的键值对进行排序(把数字属性的排在前面，并且排列的时候安卓数字由小达大排列),其次在把非数字的属性名按照之前编写的顺序，循环的时候按照重新排列循序一次遍历(小数算作字母不要做数字)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">name</span>:wjw,<span class="attr">age</span>:<span class="number">8</span>,<span class="number">0</span>:<span class="string">'wjh'</span>,<span class="number">3</span>:<span class="string">'ylp'</span>,<span class="number">1</span>:<span class="string">'cx'</span>&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> obj)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'ok'</span>)</span><br><span class="line">    <span class="comment">// key 属性名 string</span></span><br><span class="line">    <span class="built_in">console</span>.log(obj.key)</span><br><span class="line">  <span class="comment">//获取obj中key这个属性对应的值 -&gt;undefined &lt;=&gt; obj['key']</span></span><br><span class="line">    <span class="built_in">console</span>.log(obj[key]);</span><br><span class="line">  <span class="comment">//-&gt;每一次循环把key变脸存储的值(当前遍历的属性名)获取到放在中括号中，获取obj对应的属性值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> obj)&#123;</span><br><span class="line">    <span class="keyword">if</span>(obj.hasOwnProperty(key))&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript基础入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript基础入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3.JS定义值</title>
      <link href="/2019/04/09/JavaScript%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/3%20JS%E5%AE%9A%E4%B9%89%E5%80%BC/"/>
      <url>/2019/04/09/JavaScript%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/3%20JS%E5%AE%9A%E4%B9%89%E5%80%BC/</url>
      
        <content type="html"><![CDATA[<p>语法<br>ECMAScript 的语法大量借鉴了 C 及其他类 C 语言（如 Perl 和 Java）的语法。<br>区分大小写</p><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单行注释</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 这是一个多行</span></span><br><span class="line"><span class="comment">*（块级）注释</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h2><p>严格模式<br>ES5 引入了严格模式的概念，在严格模式下，ES3 中的一些不确定行为将得到处理，而且队某些不安全的操作也会抛出错误。要在整个脚本中启用严格模式，可以在顶部添加如下代码：<br>这行代码看起来像是字符串，而且也没有赋值给任何变量，但其实它是一个编译指<br>示（pragma），用于告诉支持的JavaScript引擎切换到严格模式。在函数内部的上方包含这条编译指示，也可以指定函数在严格模式下执行:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="meta"> "use strict"</span>;  <span class="comment">//函数体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="变量、常量"><a href="#变量、常量" class="headerlink" title="变量、常量"></a>变量、常量</h2><blockquote><p>变量是可以变得<br>常量是不可变的</p></blockquote><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><ul><li>变量其实只是一个无意义的名字，它所代表的意义都是其存储的那个值</li><li>让原有的num变量存储的值修改为13（变量只能代表一值）</li></ul><p>js定义变量的方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// var 变量名 = 值;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">12</span>;</span><br><span class="line"><span class="keyword">var</span> name = <span class="string">'wjw'</span></span><br></pre></td></tr></table></figure><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><ul><li>任何一个具体的数据都是常量，例如12是个常量</li><li>和变量累死，我们设置一个常量（也就是一个名字），给其存储一个值，但是这个存储的值不能修改</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> num = <span class="number">12</span>;</span><br></pre></td></tr></table></figure><h2 id="JS中命名规范"><a href="#JS中命名规范" class="headerlink" title="JS中命名规范"></a>JS中命名规范</h2><ul><li>JS中严格区分大小写</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> test = <span class="string">'wjw'</span>;</span><br><span class="line"><span class="keyword">var</span> Test = <span class="string">'wjh'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(test);</span><br><span class="line"><span class="comment">// 输出test</span></span><br></pre></td></tr></table></figure><ul><li>遵循国际命名规则”驼峰命名法”<blockquote><p>第一个单词首字母小写，其余每一个有意义单词首字母大写</p></blockquote></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> studentInfo; <span class="comment">// 学生信息</span></span><br><span class="line"><span class="comment">// 所见即所得</span></span><br><span class="line"><span class="comment">// 例子:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* info : information 信息</span></span><br><span class="line"><span class="comment">* init : initlization 初始化</span></span><br><span class="line"><span class="comment">*  add/insert/create 增加插入创建</span></span><br><span class="line"><span class="comment">*  remove/rm/clear/del/delete 删除</span></span><br><span class="line"><span class="comment">*  update 修改</span></span><br><span class="line"><span class="comment">*  get/query/select : 查询获取</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ul><li>命名的时候可以使用$、_、数字、字母，但是数字不能作为名字的第一位</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> student_info;</span><br><span class="line"><span class="keyword">var</span> $xxx; <span class="comment">//=&gt; 一般都是应用jq获得到的值</span></span><br><span class="line"><span class="keyword">var</span> _xxx; <span class="comment">//=&gt; 一般这样的情况代表变量是一个局或者公共的变量</span></span><br></pre></td></tr></table></figure><ul><li>JS中很多字都是有特殊含义的，我们这些词，叫做关键词；现在没有特殊含义，以后可能会作为关键的，我们叫做保留字；二关键词和保留字不可以随便用来命名；</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1552036896263-fd04e4f8-345d-4ff6-9587-45c3a1a67877.png#align=left&display=inline&height=277&name=image.png&originHeight=554&originWidth=1336&size=284246&status=done&width=668" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1552036875298-debe0648-b2cf-484c-8069-43111c9cf872.png#align=left&display=inline&height=610&name=image.png&originHeight=1220&originWidth=1660&size=696625&status=done&width=830" alt="image.png"><br></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript基础入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript基础入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2.JS常用的输出方式</title>
      <link href="/2019/04/09/JavaScript%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/2%20JS%E5%B8%B8%E7%94%A8%E7%9A%84%E8%BE%93%E5%87%BA%E6%96%B9%E5%BC%8F/"/>
      <url>/2019/04/09/JavaScript%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/2%20JS%E5%B8%B8%E7%94%A8%E7%9A%84%E8%BE%93%E5%87%BA%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="弹窗输出"><a href="#弹窗输出" class="headerlink" title="弹窗输出"></a>弹窗输出</h2><h3 id="alert"><a href="#alert" class="headerlink" title="alert"></a>alert</h3><ul><li>在浏览器中弹出一个提示框(提供确定按钮，点击确定弹窗消失)</li><li>使用alert弹窗信息，提示的内容最后都会转换成字符串(调用了toSring这个方法)<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="number">1</span>)</span><br><span class="line">alert(&#123;<span class="attr">name</span>:<span class="string">'wjw'</span>&#125;) <span class="comment">//=&gt; '[object Object]'</span></span><br><span class="line">alert([<span class="number">13</span>,<span class="number">14</span>]) <span class="comment">//=&gt; '12,13'</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="confirm"><a href="#confirm" class="headerlink" title="confirm"></a>confirm</h3><ul><li>在alert基础上增加了让用户选择的操作(提供两个按钮:确定和取消)</li><li>当用户点击确定按钮的时候，我们接收到的结果是true，点击是取消按钮我们接受到的结果是false，此后我们可以根据结果来处理即可 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> wjw = confirm(<span class="string">"are you sure"</span>);</span><br><span class="line">alert(wjw);</span><br></pre></td></tr></table></figure></li></ul><h3 id="prompt"><a href="#prompt" class="headerlink" title="prompt"></a>prompt</h3><ul><li><ul><li>在confirm 基础上增加让用户增加输入的效果</li></ul></li><li><ul><li>用户点击取消按钮，我们获取到的结果是null,如果用户点击是确定按钮，我们将获取用户输入的信息</li></ul></li><li><ul><li>在真实的项目中，一般性会使用二次封装的弹窗，不会使用这种弹窗</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> flag = prompt(<span class="string">"are you sure"</span>);</span><br><span class="line"></span><br><span class="line">alert(flag)</span><br></pre></td></tr></table></figure><h2 id="控制台输出"><a href="#控制台输出" class="headerlink" title="控制台输出"></a>控制台输出</h2><blockquote><p>控制台输出，方便开发调试</p></blockquote><h3 id="console"><a href="#console" class="headerlink" title="console"></a>console</h3><ul><li>在控制台输出，优势不会转换数据类型，输出什么格式的数据都可以</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(&#123;<span class="attr">name</span>:<span class="string">'wjw'</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.dir() <span class="comment">//比log输出更加详细一些</span></span><br><span class="line"><span class="built_in">console</span>.table <span class="comment">//把json数据展示成一个表格</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript基础入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript基础入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.导入JS</title>
      <link href="/2019/04/09/JavaScript%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/1%20%E5%AF%BC%E5%85%A5JS/"/>
      <url>/2019/04/09/JavaScript%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/1%20%E5%AF%BC%E5%85%A5JS/</url>
      
        <content type="html"><![CDATA[<h2 id="三种常见导入"><a href="#三种常见导入" class="headerlink" title="三种常见导入"></a>三种常见导入</h2><h3 id="行内导入JS-慎重：不安全"><a href="#行内导入JS-慎重：不安全" class="headerlink" title="行内导入JS(慎重：不安全)"></a>行内导入JS(慎重：不安全)</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onclick</span>=<span class="string">"alert('hello world')"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="内嵌式"><a href="#内嵌式" class="headerlink" title="内嵌式"></a>内嵌式</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">alert('hello world')</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="外链式"><a href="#外链式" class="headerlink" title="外链式"></a>外链式</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 新建一个js文件</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./js/demo.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// or</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./js/demo.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="内嵌与外链不能同时操作"><a href="#内嵌与外链不能同时操作" class="headerlink" title="内嵌与外链不能同时操作"></a>内嵌与外链不能同时操作</h2><blockquote><p>内嵌导入和外链导入不能合并在一起，如果当前是外链导入的，那么在script脚本块找那个编写的所有代码都不会被执行。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"./js/demo.js"</span>&gt;</span><br><span class="line">  alert(<span class="string">'hello world'</span>)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="位置编写位置"><a href="#位置编写位置" class="headerlink" title="位置编写位置"></a>位置编写位置</h2><blockquote><p>我们一般性会把css放在body的上面，把js放在body末尾(约定速成的规范)</p></blockquote><pre><code>但是如果放在了标签前面那么将如何处理?</code></pre><blockquote><p>页面加载完所有资源之后执行操作</p></blockquote><p> 在js中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在jq中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'load'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ie8以下</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.attachEvent(<span class="string">'onreadystatechange'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript基础入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript基础入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>0.介绍</title>
      <link href="/2019/04/09/JavaScript%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/0%20%E4%BB%8B%E7%BB%8D/"/>
      <url>/2019/04/09/JavaScript%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/0%20%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<h2 id="ECMAScript"><a href="#ECMAScript" class="headerlink" title="ECMAScript"></a>ECMAScript</h2><p>ECMA-262 的第 5 版是 JS 的第一个稳定版本，得到了各浏览器厂商的支持。<br></p><ul><li>语法</li><li>类型</li><li>语句</li><li>关键词</li><li>保留字</li><li>操作符</li><li>对象</li></ul><h2 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h2><blockquote><p>文档对象模型是针对 XML 但经过扩展用于 HTML 的 API 。DOM 把整个页面映射为一个多层次节点结构。HTML 或 XML 页面中的每个组成部分都是某种类型的节点，这些节点又包含着不同类型的数据。<br>document object model 文档对象模型，里面提供了一些属性和方法，可以让我们操作页面的元素</p></blockquote><h2 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h2><blockquote><p>原则上讲，BOM只处理浏览器窗口和框架，但下面一些针对浏览器的 JS 扩展也被看做是BOM的一部分。<br>browser object model 浏览器对象模型，里面提供了一些属性和方法，可以让我们操作浏览器。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> JavaScript基础入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript基础入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3. 内容编码和加密解密方法</title>
      <link href="/2019/04/08/http%E4%B8%8Eajax%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/3.%20%E5%86%85%E5%AE%B9%E7%BC%96%E7%A0%81%E5%92%8C%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86%E6%96%B9%E6%B3%95/"/>
      <url>/2019/04/08/http%E4%B8%8Eajax%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/3.%20%E5%86%85%E5%AE%B9%E7%BC%96%E7%A0%81%E5%92%8C%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="正常的编码解码-非加密"><a href="#正常的编码解码-非加密" class="headerlink" title="正常的编码解码(非加密)"></a>正常的编码解码(非加密)</h2><h3 id="escape-uescape"><a href="#escape-uescape" class="headerlink" title="escape/uescape"></a>escape/uescape</h3><blockquote><p>主要就是把中文汉字进行编码的(一般只有js语言支持,也经常应用于前端页面通讯时间的中文汉字编码)</p></blockquote><h3 id="encodeURL-decodeURL"><a href="#encodeURL-decodeURL" class="headerlink" title="encodeURL/decodeURL"></a>encodeURL/decodeURL</h3><blockquote><p>基本上所有的编码语言都支持</p></blockquote><h3 id="encodeURlComponent-decodeURIComponent"><a href="#encodeURlComponent-decodeURIComponent" class="headerlink" title="encodeURlComponent/decodeURIComponent"></a>encodeURlComponent/decodeURIComponent</h3><blockquote><p>和第二种方法非常的累死，区别在于</p></blockquote><blockquote><p>需求:我们url问号传递参数的时候，我们传递的参数值还是一个url或者包含很多特殊字符，此时为了不影响住要的url，我们需要把传递的参数值进行编码，使用encodeURLComponent处理</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">'http://www.baidu.com/?'</span>,</span><br><span class="line">    obj=&#123;</span><br><span class="line">    name:<span class="string">'wjw'</span>,</span><br><span class="line">      age:<span class="number">9</span>,</span><br><span class="line">      url:<span class="string">'http://www.sogou.com/?x=1'</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// =&gt; 把obj中的每一项属性名和属性值拼接到url的末尾(问号传参的方式)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> obj)&#123;</span><br><span class="line">str +=<span class="string">`<span class="subst">$&#123;key&#125;</span>=<span class="subst">$&#123;obj[key]&#125;</span>`</span>;</span><br><span class="line">  <span class="comment">// =&gt; 不能使用encodeURL必须使用encodeURlComponent,原因是encodeURL不能编码</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(str.replace(<span class="regexp">/&amp;$/g</span>,<span class="string">''</span>));</span><br></pre></td></tr></table></figure><h3 id="也可以通过加密的方法进行编码解码"><a href="#也可以通过加密的方法进行编码解码" class="headerlink" title="也可以通过加密的方法进行编码解码"></a>也可以通过加密的方法进行编码解码</h3><p>1、可逆转加密(一般都是团队自己玩的规则)<br>2、不可逆加密(一般都是基于MD5加密完成的，可能会把md5加密后的结果二次加密)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">'js/md5.min.js'</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">hex_md5(<span class="string">'0000'</span>)</span><br><span class="line">  <span class="comment">// "c6f057b86584942e415435ffb1fa93d4"</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> http与ajax入门笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> http与ajax入门笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2. AJAX</title>
      <link href="/2019/04/08/http%E4%B8%8Eajax%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/2.%20AJAX/"/>
      <url>/2019/04/08/http%E4%B8%8Eajax%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/2.%20AJAX/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是ajax？"><a href="#什么是ajax？" class="headerlink" title="什么是ajax？"></a>什么是ajax？</h2><p>async javastctip and xml,异步的js和xml</p><h2 id="xml-可扩展的标记语言"><a href="#xml-可扩展的标记语言" class="headerlink" title="xml:可扩展的标记语言"></a>xml:可扩展的标记语言</h2><blockquote><p>作用是通过存储数据的(通过自己扩展的标记名称清晰的展示出来数据结构)</p></blockquote><blockquote><p>ajax值所以称为异步的js和xml,主要原因是:当初最开始用ajax实现客户端和服务器端数据通信的时候，传输的数据格式一般都是xml格式的数据，我们把他们称为异步js和xml(现在一般都是基于json格式进行数据传输)</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version='1.0' encoding='UTF-8'?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">student</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">age</span>&gt;</span>25<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">score</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">english</span>&gt;</span>90<span class="tag">&lt;/<span class="name">english</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">math</span>&gt;</span>90<span class="tag">&lt;/<span class="name">math</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">chinese</span>&gt;</span>90<span class="tag">&lt;/<span class="name">chinese</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">score</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="异步的js"><a href="#异步的js" class="headerlink" title="异步的js"></a>异步的js</h2><blockquote><p>这里的异步不是ajax只能基于异步进行请求(虽然建议都是使用异步变成)，这里的异步特指的是<strong>局部刷新</strong></p></blockquote><h2 id="局部刷新-vs-全局刷新"><a href="#局部刷新-vs-全局刷新" class="headerlink" title="局部刷新 vs 全局刷新"></a>局部刷新 vs 全局刷新</h2><blockquote><p>在非完全前后端分离项目中，前端开发只需要完成页面的制作，并且把一些基础的人机交互效果使用js完成即可，页面中需要动态呈现内容的部分，都是交给后台开发工程师做数据绑定和基于服务器进行渲染的(服务器端渲染)</p></blockquote><p>[优势]</p><ul><li>动态展示的数据在页面的原代码中可以看见，有利于seo优化推广(有利于搜索引擎的收录和抓取)</li><li>从服务器获取的结构就已经是最后要呈现的结果了，不需要客户端做额外的事情，所以也没加速快(前提是服务器端处理的速度够快，能够处理过来)，所以类似于京东、淘宝这些网站，首屏数据一般都是由服务器渲染的</li></ul><p>[弊端]</p><ul><li>实时更新的数据，每一次想要展示最新的数据，页面都要重新的刷新一次，这样肯定不行</li><li>都交给服务器端做数据渲染，服务器端的压力太大，如果服务器处理不过来，页面呈现的速度更慢(所以京东、淘宝这类网站,除了首屏是服务器端渲染的，其他屏一般都是客户端做数据渲染绑定)</li><li>这种模式不利于开发(开发效率低)</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1554193153655-396c293f-995c-4246-b4e7-a7c801e3b47f.png#align=left&display=inline&height=282&name=image.png&originHeight=422&originWidth=1050&size=333041&status=done&width=702" alt="image.png"></p><blockquote><p>目前市场上大部分项目都是前后端完全分离的项目(也有非完全前后端分离的)</p></blockquote><h2 id="前后端完全分离"><a href="#前后端完全分离" class="headerlink" title="前后端完全分离"></a>前后端完全分离</h2><p>前后端完全分离的项目，页面中需要动态绑定的数据是交给客户端完全渲染的</p><ul><li>想服务器端发送ajax请求</li><li>把从服务器端获取的数据解析处理，拼接成为我们需要展示的html字符串</li><li>把拼接好的字符串替换页面中某一部分的内容(局部刷新),页面整体不需要重新加载，局部渲染极客</li></ul><p>[优势]</p><ul><li>我们可以根据需求，任意修改页面中某一部分的内容(例如实时刷新),整体页面不刷新，性能好，体验好(所有表单验证，需要实时刷新的等需求都要基于ajax实现)</li><li>有利于开发，提高开发的效率<ul><li>前后端的完全分离，后台不需要考虑前端如何实现，前端也不需要考虑后台用什么技术，真正意义上实现了技术的划分</li><li>可以同时进行开发:项目开发开始，首先制定前后端数据交互的结构文档(文档中包含了，调用哪个接口或者那些数据等协议规范),后台吧接口线写好(目前很多公司也需要前端自己拿node来模拟这些接口)，客户端按照接口调取极客，后端再去实现接口功能极客</li></ul></li></ul><p>[弊端]</p><ul><li>不利于seo优化:第一次从服务器端获取的内容不包含需要动态绑定的数据，所以也没的原代码中没有这些内容，不利于seo收录，后期听过js添加到页面中的内容，并不会写在页面的源代码中(是源代码不是页面结构)</li><li>交由客户端渲染，首先需要把页面呈现，然后通过js的异步ajax请求获取数据，然后数据绑定，浏览器在动态增加部分重新渲染，无形中浪费了一些时间，没有服务器端渲染页面呈现速度快</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1554194196374-285844b7-622d-4fcd-a376-70afdea45846.png#align=left&display=inline&height=356&name=image.png&originHeight=402&originWidth=808&size=173137&status=done&width=716" alt="image.png"></p><h2 id="ajax请求"><a href="#ajax请求" class="headerlink" title="ajax请求"></a>ajax请求</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line"><span class="comment">// 不兼容ie6以及更低版本的浏览器(ie6 activeXobject)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 打开请求地址(可以理解为一些基础配置，但是并没有发送请求呢)</span></span><br><span class="line">xhr.open([method],[url],[<span class="keyword">async</span>],[username],[user password]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听ajax改变，获取响应信息(获取响应头信息，获取响应主体信息)</span></span><br><span class="line">xhr.onreadystatechange=<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(xhr.readyState===<span class="number">4</span> &amp;&amp; xhr.readyState===<span class="number">200</span>)&#123;</span><br><span class="line">  <span class="keyword">let</span> result = xhr.responseText;<span class="comment">// 获取响应主体中的内容</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送ajax请求(括号中传递的信息内容是请求主体的内容)</span></span><br><span class="line"></span><br><span class="line">xhr.send(<span class="literal">null</span>)</span><br></pre></td></tr></table></figure><p> <br>分析第二部分的细节点</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhr.open([method],[url],[<span class="keyword">async</span>],[username],[user password]);</span><br></pre></td></tr></table></figure><h3 id="ajax请求方式（method）"><a href="#ajax请求方式（method）" class="headerlink" title="ajax请求方式（method）"></a>ajax请求方式（method）</h3><blockquote><p>get系列的请求</p></blockquote><ul><li><p>get</p></li><li><p>delete</p></li><li><p>head</p></li><li><p>…</p><blockquote><p>post系列的请求(推送)</p></blockquote></li><li><p>post</p></li><li><p>put:想服务器中增加指定的资源文件</p></li><li><p>…</p></li></ul><p>不管哪一种请求方式,客户端可以吧信息传递给服务器，服务器也可以吧信息返回给客户端，只要get系列一般以获取为主(给的少)</p><ol><li>我们想获取一些动态展示的信息，一般使用GET请求，因为只需要向服务器发送请求，告诉服务器端想要什么，服务器端就会把需要的数据返回</li><li>在实现注册功的时候，我们需要把客户端输入信息发送给服务器进行存储，服务器一般返回成功是成功等状态，此时我们一般都基于post请求完成</li><li>….</li></ol><p>get系列请求和post系列请求，在项目是在中存在很多的区别</p><ol><li><p>get请求传递给服务器的内容一般贸易post请求传递给服务器的内容多</p><ol><li>原因:get请求传递给服务器内容一般都是基于<strong>url地址问号传递参数</strong> 来实现的，而实现的，而post请求一般都是基于<strong>设置请求主体</strong>来实现的。浏览器都已自己的关于url的最大长度限制(谷歌:8kb、火狐:7kb、ie:2kb)超过限制长度的部分，浏览器会自动截取掉，导致传递给服务器的数据缺失</li><li>理论上post请求通过主体传递是没有大小限制，真实项目中为了保证传输的速度，我们会限制大小(例如:上传的资料或者图片我们会做大小的限制)</li></ol></li><li><p>get请求容易出现缓存(这个缓存不可控:一般我们都不需要)，而post不会出现缓存(除非自己做特殊处理)</p><ol><li>原因:get是通过url问号传参传递给服务器信息，二post是设置请求主体</li><li>设置请求主体不会出现缓存，但是url传递参数就会了</li><li><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">  url:<span class="string">'getList?lx=news'</span>,</span><br><span class="line">    success:<span class="function"><span class="params">result</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 第一次请求数据回来，间隔一分钟后，浏览器又发送一次请求，</span></span><br><span class="line">      <span class="comment">// 但是新发送，不管是地址还是传递的参数都和第一次不一样，</span></span><br><span class="line">      <span class="comment">// 浏览器很有可能会把上一次数据获取，而不是获取新的数据</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;,<span class="number">60000</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解决方案:每一次重新请求的时候，在URL的末尾追加一个随机数，保证每一次请求的地址不完全一直</span></span><br><span class="line"><span class="comment">// 就可以避免是从缓存中读取的数据</span></span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">url:<span class="string">'getList?lx=news_='</span>+<span class="built_in">Math</span>.random()</span><br><span class="line">success:<span class="function"><span class="params">result</span>=&gt;</span>&#123;</span><br><span class="line">  </span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol></li><li><p>GET请求没有post请求安全(post也并不是十分安全，只是相对安全)<br>原因:还是因为get是url传递给服务器有一种比较简单的黑客技术:url劫持，也就是可以客户端传递给服务器劫持掉，导致信息泄露</p></li></ol><h3 id="2-4-2-url"><a href="#2-4-2-url" class="headerlink" title="2.4.2 url"></a>2.4.2 url</h3><blockquote><p>请求数据的地址(api地址)，真实项目中，后台开发工程师会编写一个api文档，在api文档中汇总了获取那些数据需要使用哪些地址，我们按照文档操作即可</p></blockquote><h3 id="2-4-3-async"><a href="#2-4-3-async" class="headerlink" title="2.4.3 async"></a>2.4.3 async</h3><blockquote><p>异步(sync同步)，设置当前ajax请求是异步还是同步的，不写默认是异步(true)，如果设置false，则代表当前请求是同步的</p></blockquote><blockquote><p>用户名和密码这两个参数一般不用，如果你请求的url地址所在服务器设定了访问权限，则需要我们提供通行的用户名和密码才可以(一般服务器都可以允许匿名访问的)</p></blockquote><h2 id="AJAX状态码"><a href="#AJAX状态码" class="headerlink" title="AJAX状态码"></a>AJAX状态码</h2><p>xhr.readyState</p><ol><li>unsent 未发送，只要创建一个ajax对象，默认值是零</li><li>opened 我们已经执行了xhr,open这个操作</li><li>headers_resceived 当前ajax的请求已经发送，并且已经接收到服务器端返回的响应头信息了</li><li>loading 响应主体内容正在返回的路上</li><li>done 响应主体内容已经返回到客户端</li></ol><h2 id="HTTP网络状态码"><a href="#HTTP网络状态码" class="headerlink" title="HTTP网络状态码"></a>HTTP网络状态码</h2><blockquote><p>记录了当前服务器返回信息的状态</p></blockquote><p>xhr.status</p><ul><li>200成功，一个完整的http事务完成了(以2开头的状态码一般性都是成功)</li><li>3开头一般也是成功，只不过是服务器做了特殊的处理<ul><li>301 moved permanently 永久转移(永久重定向)</li><li>302 move temporarily 临时转移(临时重定向，新的http版本中任务307是临时重定向) <ul><li>一般用于服务器的负载均衡:当前服务器处理不了，我把当前请求临时交给其他的服务器处理(一般图片请求经常出现302,很多公司都有单独的图片服务器)</li></ul></li><li>304 not modified 从浏览器缓存中获取数据 <ul><li>把一些不经常更新的文件或者内容缓存到浏览器中，下一次从缓存中获取，减轻服务器压力，也提高页面加载的速度</li></ul></li></ul></li><li>4开头的，一般性都是失败的，而且客户端的问题偏大<ul><li>400:请求参数错误</li><li>401:无权限访问</li><li>404:访问地址不存在</li></ul></li><li>5开头的，一般都是失败，而且服务器的问题偏大<ul><li>500:internal Server Error 未知的服务器错误</li><li>503:Service Unavailable 服务器超负债</li><li>…</li></ul></li></ul><p>面试题 ajax中总共支持几个方法<br>let xhr = new xmlHttpReques();<br>console.dir(xhr);</p><p>[属性]<br>readyState:存储的是当前ajax的状态<br>response/responseText/responseXML : 都是用来接收服务器返回的响应主体的内容，只是更具服务器返回内容的格式不一样，我们使用不同的属性接收即可<br>responseText是最常见的，接收到结果是字符串格式的(一般服务器返回的数据都是json格式字符串)<br>responXML:偶尔会用到，如果服务器返回的是xml文档数据，我们需要使用这个属性接收<br>status:记录了服务器返回的http状态码<br>statusText:对返回状态码的描述<br>timeout:设置当前ajax请求的超时时间，假设我们设置时间为3000(MS)，从AJAX请求发送开始，3秒后响应主体内容还没有返回，浏览器会把当前ajax请求强行断开</p><p>[方法]<br>abor():强行终端ajax请求<br>getAllResponseHeaders():获取全部的响应头信息(获取的结果是一丢字符串文本)<br>getResponseHeader(key):获取指定属性名的响应头部信息，例如:xhr.getResponseHeader(‘data’)获取响应头中存储的服务的时间<br>open():打开一个url地址<br>overridMimeType():重写数据的MIME类型<br>send():发送ajax请求(括号中书写的内容是客户端请求主体吧信息传递给服务器)<br>setRequestHeader(key,value):设置请求头信息(可以是设置自定义请求信息)</p><p>[事件]<br>onabort:当ajax被终端请求触发这个时间<br>onreadstatechange:ajax状态发烧改变，会触发这个事件<br>ontimeout:当AJAX请求超时，会触发这个事件<br>…</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest(();</span><br><span class="line">xhr.open(<span class="string">'get'</span>,<span class="string">'temp.json?_='</span>+<span class="built_in">Math</span>.random(),<span class="literal">true</span>);</span><br><span class="line">xhr.setRequesHeader(<span class="string">'cookie'</span>,<span class="string">'xxx'</span>); <span class="comment">// =&gt; 设置请求内容不能出现中文汉字</span></span><br><span class="line">xhr.timeout = <span class="number">10</span>;</span><br><span class="line">xhr.ontimeout=<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'当前请求已经超时'</span>);</span><br><span class="line">  xhr.abort();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="params">()</span> =&gt;</span>&#123;</span><br><span class="line"><span class="keyword">let</span> &#123;<span class="attr">readyState</span>:state,status&#125; = xhr;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 说明请求数据成功了</span></span><br><span class="line">    <span class="keyword">if</span>(!<span class="regexp">/^(2|3)\d&#123;2&#125;$/</span>.test(status)) <span class="keyword">return</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 在状态为2的时候就获取响应头信息</span></span><br><span class="line">    <span class="keyword">if</span>(state === <span class="number">2</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> headerAll = xhr.getAllResponseHeaders(),</span><br><span class="line">      serverDate = xhr.getResponseHeader(<span class="string">'date'</span>);<span class="comment">// 获取的服务时间是格林尼治时间(相比北京时间差不多差8小时)</span></span><br><span class="line">          <span class="built_in">console</span>.log(headerAll,<span class="keyword">new</span> <span class="built_in">Date</span>(serverDate));</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 在状态为4的时候就获取响应头信息已经回来了</span></span><br><span class="line">    <span class="keyword">if</span>(state === <span class="number">4</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> valueText = xhr.responseText,<span class="comment">// 获取到的结果一般都是json字符串(可以时间json.parse把其转换成json对象) </span></span><br><span class="line">          valueXML = xhr.responseXML; <span class="comment">// 获取到的结果是xml格式的数据，(可以通过xml的一些常规操作获取存储的指定信息)</span></span><br><span class="line">      <span class="comment">// 如果服务器返回的是xml文档，responseText获取的结果是字符串，而responseXML获取的是标准xml文档</span></span><br><span class="line">      <span class="built_in">console</span>.log(valueText,valueXML);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">xhr.send(<span class="string">'name=wjw&amp;age=23&amp;sex=man'</span>)</span><br></pre></td></tr></table></figure><h3 id="AJAX中的同步和异步编程"><a href="#AJAX中的同步和异步编程" class="headerlink" title="AJAX中的同步和异步编程"></a>AJAX中的同步和异步编程</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">xhr.open(<span class="string">'get'</span>,<span class="string">'temp.json'</span>,<span class="literal">false</span>);</span><br><span class="line">xhr.onredystatechange=<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(xhr.readySate);</span><br><span class="line">&#125;</span><br><span class="line">xhr.send();</span><br><span class="line"><span class="comment">// 只输出一次结果4</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1554350463659-0b94b605-b1ab-4b9c-adc4-c4b4873acfdf.png#align=left&display=inline&height=264&name=image.png&originHeight=528&originWidth=694&size=230731&status=done&width=347" alt="image.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">xhr.open(<span class="string">'get'</span>,<span class="string">'temp.json'</span>,<span class="literal">false</span>);</span><br><span class="line">xhr.send();<span class="comment">// =&gt; 同步开始发送ajax请求，开启ajax任务，在任务没有完成之前，什么事情都做不了</span></span><br><span class="line"><span class="comment">// 下面绑定时间也做不了 =&gt; loading =&gt; 当readyState ===4 的是ajax任务完成，开始执行下面的操作</span></span><br><span class="line">xhr.onreadystatechange=<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(xhr.readySate);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 绑定方法之前状态已经为4了，此时ajax的状态不会再改吧其他值，所以事件永远不会被处罚</span></span><br><span class="line"><span class="comment">// 一次都没有执行方法(使用ajax同步编程，不要把send放在事件监听前</span></span><br><span class="line"><span class="comment">// 这样我们无法在绑定方法中获取响应主体的内容)</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1554368143539-8939fb33-f95e-4e86-8b85-3de2a9b8eac1.png#align=left&display=inline&height=203&name=image.png&originHeight=406&originWidth=548&size=142518&status=done&width=274" alt="image.png"></p><pre><code class="javascript"><span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest();<span class="comment">// 下面绑定时间也做不了 =&gt; loading =&gt; 当readyState ===4 的是ajax任务完成，开始执行下面的操作</span>xhr.onreadystatechange=<span class="function"><span class="params">()</span>=&gt;</span>{    <span class="built_in">console</span>.log(xhr.readySate);  <span class="keyword">if</span>(xhr.readySate===<span class="number">1</span>) {      xhr.setRequestHeader(<span class="string">'aaa'</span>,<span class="string">'bbb'</span>);  }}xhr.open(<span class="string">'get'</span>,<span class="string">'temp.json'</span>,<span class="literal">false</span>);<span class="comment">// xhr.readyState === 1 AJAX特殊处理的一件事:执行OPEN状态变为1,会主动把之前监听的方法执行一次</span><span class="comment">// 然后再去执行SEND</span>xhr.send();<span class="comment">// xhr.redayState === 4 AJAX任务借宿，主任务队列完成</span></code></pre><h2 id="AJAX类库的封装"><a href="#AJAX类库的封装" class="headerlink" title="AJAX类库的封装"></a>AJAX类库的封装</h2><blockquote><p>JQ中的AJAX</p></blockquote><h3 id="url"><a href="#url" class="headerlink" title="url"></a>url</h3><blockquote><p>请求api地址</p></blockquote><h3 id="method"><a href="#method" class="headerlink" title="method"></a>method</h3><blockquote><p>请求方法get/post..在老板的jq中使用是type，使用type和method相同效果</p></blockquote><h3 id="dataType"><a href="#dataType" class="headerlink" title="dataType"></a>dataType</h3><blockquote><p>dataType只是我们预设获取结果的类型不会影响服务器的返回(服务器端一般给我们返回的都是json格式的字符串),如果我们预设是json,那么类库中将吧服务器返回的字符串转换为json对象，如果我们预设是text(默认值)，我们把服务器获取的结果直接拿过来操作即可，我们预设的值还可以xml等</p></blockquote><h3 id="cache"><a href="#cache" class="headerlink" title="cache"></a>cache</h3><blockquote><p>设置是否清楚缓存，只对get系列请求有作用，默认是true不清除缓存，手动设置false，jq类库在请求url的末尾最佳一个随机数来清楚缓存</p></blockquote><h3 id="data"><a href="#data" class="headerlink" title="data"></a>data</h3><blockquote><p>我们通过data可以把一些信息传递给服务器，get系列请求会把data中的内容拼接在url的末尾通过问号传参的方式给服务器，post系列请求会把内容请求放在主题传递给服务器;data的值可以设置为两种格式，字符串、对象，如果是字符串，设置的值是传递给服务器的就是什么，如果设置成对象，jq会把对象变为xxx=xxx&amp;xx=xx,这样来数据传递</p></blockquote><h3 id="async"><a href="#async" class="headerlink" title="async"></a>async</h3><blockquote><p>设置同步或者异步，默认是true代表异步，false代表同步</p></blockquote><h3 id="success"><a href="#success" class="headerlink" title="success"></a>success</h3><blockquote><p>dangajax请求成功后redayState===4&amp;&amp;statue是以2或者3开头的<br>请求成功后jq会把传递的回调函数执行，并且获取的结果当做实参传递给回调函数(result就是我们从服务器获取的结果)</p></blockquote><h3 id="error"><a href="#error" class="headerlink" title="error"></a>error</h3><blockquote><p>请求错误触发回调函数</p></blockquote><h3 id="complate"><a href="#complate" class="headerlink" title="complate"></a>complate</h3><blockquote><p>不管请求还是错误的还是正确的都会触发这个回调函数(他就是完成的意思)</p></blockquote><p>….</p><h2 id="封装自己的AJAX库"><a href="#封装自己的AJAX库" class="headerlink" title="封装自己的AJAX库"></a>封装自己的AJAX库</h2><ul><li>url</li><li>method/type</li><li>data</li><li>dataType</li><li>async</li><li>cache</li><li>success</li></ul><pre><code class="javascript">~funcction(){    <span class="class"><span class="keyword">class</span> <span class="title">ajaxClass</span> </span>{        <span class="comment">// send ajax</span>        init() {            <span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest();            xhr.onreadustatechange = <span class="function"><span class="params">()</span> =&gt;</span> {                <span class="keyword">if</span> (!<span class="regexp">/^[23]\d{2}$/</span>.test(xhr.status)) <span class="keyword">return</span>;                <span class="keyword">if</span> (xhr.redayState === <span class="number">4</span>) {                    <span class="keyword">let</span> result = xhr.responseText;                    <span class="comment">//    DATA-TYPE</span>                    <span class="keyword">switch</span> (<span class="keyword">this</span>.dataType.toUpperCase()) {                        <span class="keyword">case</span> <span class="string">'TEXT'</span>:                            <span class="keyword">break</span>;                        <span class="keyword">case</span> <span class="string">'JSON'</span>:                            result = <span class="built_in">JSON</span>.parese(result);                            <span class="keyword">break</span>;                        <span class="keyword">case</span> <span class="string">'XML'</span>:                            result = xhr.responseXML;                            <span class="keyword">break</span>;                    }                    <span class="keyword">this</span>.success(result);                }            }            <span class="comment">// DATA</span>            <span class="keyword">if</span> (<span class="keyword">this</span>.data !==<span class="literal">null</span>) {                <span class="keyword">this</span>.formatData();                <span class="keyword">if</span> (<span class="keyword">this</span>.idGET) {                    <span class="keyword">this</span>.url +=<span class="keyword">this</span>.querySymbol()+<span class="keyword">this</span>.data;                    <span class="keyword">this</span>.data = <span class="literal">null</span>;                }            }            <span class="comment">// CACHE</span>            <span class="keyword">this</span>.isGET ? <span class="keyword">this</span>.cache();            xhr.open(<span class="keyword">this</span>.method, <span class="keyword">this</span>.url, <span class="keyword">this</span>.async);            xhr.send();        }        cacheFn() {            <span class="comment">// THIS:EXAMPLE</span>            !<span class="keyword">this</span>.cache ? <span class="keyword">this</span>.url += <span class="string">`<span class="subst">${<span class="keyword">this</span>.querySymbol()}</span>_=<span class="subst">${<span class="built_in">Math</span>.random()}</span>`</span> : <span class="literal">null</span>;        }        querySymbol() {            <span class="comment">// THIS:EXAMPLE</span>            <span class="keyword">return</span> <span class="keyword">this</span>.url.indexOf(<span class="string">'?'</span>) &gt; <span class="number">-1</span> ? <span class="string">'&amp;'</span> : <span class="string">'?'</span>;        }        formatData(){             <span class="comment">// THIS:EXAMPLE</span>             <span class="keyword">if</span>(<span class="built_in">Object</span>.prototype.toString.call(<span class="keyword">this</span>.data)===<span class="string">'[Object Object]'</span>){                 <span class="keyword">let</span> obj = <span class="keyword">this</span>.data,                     str = <span class="string">``</span>;                     <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> obj) {                         <span class="keyword">if</span> (object.hasOwnProperty(key)) {                          str +=<span class="string">`<span class="subst">${key}</span>=<span class="subst">${obj[key]}</span>`</span>;                          }                     }                str = str.replace(<span class="regexp">/&amp;$/g</span>,<span class="string">''</span>);                <span class="keyword">this</span>.data = str;             }        }    }    <span class="keyword">let</span> ajax = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{};    <span class="comment">// init parameters</span>    <span class="built_in">window</span>.ajax = <span class="function"><span class="keyword">function</span> (<span class="params">{</span></span><span class="function"><span class="params">        url = null,</span></span><span class="function"><span class="params">        method = <span class="string">'GET'</span>,</span></span><span class="function"><span class="params">        type = <span class="string">'GET'</span>,</span></span><span class="function"><span class="params">        data = null,</span></span><span class="function"><span class="params">        dataType = <span class="string">'JSON'</span>,</span></span><span class="function"><span class="params">        cache = true,</span></span><span class="function"><span class="params">        async = ture,</span></span><span class="function"><span class="params">        suceess = null</span></span><span class="function"><span class="params">    } = {}</span>) </span>{        <span class="keyword">let</span> _this = <span class="keyword">new</span> ajaxClass(); <span class="comment">// 创建实例</span>        [<span class="string">'url'</span>, <span class="string">'method'</span>,<span class="string">'data'</span>,<span class="string">'dataType'</span>,<span class="string">'cache'</span>,<span class="string">'async'</span>,<span class="string">'success'</span>].forEach(<span class="function">(<span class="params">item</span>)=&gt;</span>{            <span class="keyword">if</span> (item === <span class="string">'method'</span>) {                _this.method = type === <span class="literal">null</span> ? method : type;                <span class="keyword">return</span>;            }            <span class="keyword">if</span> (item===<span class="string">'success'</span>) {                 _this.suceess = <span class="keyword">typeof</span> success === <span class="string">'function'</span> ? success : <span class="keyword">new</span> <span class="built_in">Function</span>();            }            _this[item] = <span class="built_in">eval</span>(item);        })        _this.isGET = <span class="regexp">/^(GET|DELETE|HEAD)$/i</span>.test(example.method);        _this.init();        <span class="keyword">return</span> _this;    };}();ajax({})</code></pre>]]></content>
      
      
      <categories>
          
          <category> http与ajax入门笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> http与ajax入门笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1. HTPP</title>
      <link href="/2019/04/08/http%E4%B8%8Eajax%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/1.%20HTPP/"/>
      <url>/2019/04/08/http%E4%B8%8Eajax%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/1.%20HTPP/</url>
      
        <content type="html"><![CDATA[<h2 id="前端和后端如何通讯"><a href="#前端和后端如何通讯" class="headerlink" title="前端和后端如何通讯"></a>前端和后端如何通讯</h2><blockquote><p>前端:客户端<br>后端:服务端</p></blockquote><p>职业规划建议</p><blockquote><p>培养自己的人脉圈，以及建立自己的影响力</p></blockquote><ul><li>状态自己的总和能力</li><li>经常参加一些活动</li><li>开放分享(做讲师分享自己的智慧、写组件的个人博客做技术分享)</li></ul><p>当我们在浏览器地址中输入URL地址，到最后看到页面，中间经历了哪些事情？<br>假设我们访问的是 <a href="https://www.baidu.com这个地址，按下enter建后，我们可以看到百度首页" target="_blank" rel="noopener">https://www.baidu.com这个地址，按下enter建后，我们可以看到百度首页</a></p><ul><li>百度页面并没有在我们自己的客服端本地，我们是输入地址后，才请求过来的</li><li>输入不同的域名可以看到不同的页面</li><li>有的网页是https，有的是http(也有的是ftp)</li><li>需要客户端联网才能完成这些事情</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1554171011360-68037c8f-c3bf-4e19-a4e2-ed9a695ce4f6.png#align=left&display=inline&height=237&name=image.png&originHeight=474&originWidth=786&size=228302&status=done&width=393" alt="image.png"></p><h3 id="DNS服务器-域名解析服务"><a href="#DNS服务器-域名解析服务" class="headerlink" title="DNS服务器 域名解析服务"></a>DNS服务器 域名解析服务</h3><p>1.<a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a>  220.163.18.24<br>域名和服务器关联在一起，是通过DNS解析完成，所谓的DNS解析就是在dns服务上生成一条解析记录，标注了域名和对应的外网ip地址</p><h3 id="都经历了哪些事情？"><a href="#都经历了哪些事情？" class="headerlink" title="都经历了哪些事情？"></a>都经历了哪些事情？</h3><ul><li>首先根据客户端输入的域名，到DNS服务器上进行反解析(通过域名找到对应服务器的外网ip)</li><li>通过找到外网的ip，找到对应的服务器</li><li>通过地址栏中输入的端口号(没输入是因为不同协议有自己默认的端口号)找到服务器上发布的对应项目</li><li>服务器获取请求资源的地址，例如/stu/index.html，把资源文件中的原代码找到<ul><li>response 响应阶段</li></ul></li><li>服务器端会把找的原代码返回给客户端(通过http等传输协议返回)</li><li>客户端接收到原代码后，会交给浏览器的内核(渲染引擎)进行渲染，最后由浏览器绘制出对应的页面<ul><li>服务器自主渲染</li></ul></li></ul><h3 id="客户端和服务端交互-通讯-模型"><a href="#客户端和服务端交互-通讯-模型" class="headerlink" title="客户端和服务端交互(通讯)模型"></a>客户端和服务端交互(通讯)模型</h3><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1554171831526-af8fe24c-dbf6-44cc-ae64-4f30506b7a0a.png#align=left&display=inline&height=192&name=image.png&originHeight=328&originWidth=1094&size=230743&status=done&width=642" alt="image.png"></p><h2 id="第一部分-传输协议"><a href="#第一部分-传输协议" class="headerlink" title="第一部分 传输协议"></a>第一部分 传输协议</h2><h3 id="URL、URI、URN"><a href="#URL、URI、URN" class="headerlink" title="URL、URI、URN"></a>URL、URI、URN</h3><ul><li>URI : 统一资源标识符</li><li>URL: 统一资源路径地址</li><li>URN：统一资源名称</li><li>URI=URL+URN</li></ul><blockquote><p>一个完整的url包含很多部分<br><a href="https://www.yuque.com/as-giant/dz5g6s/eh4kdu/edit" target="_blank" rel="noopener">https://www.yuque.com/as-giant/dz5g6s/eh4kdu/edit</a>?name=wang&amp;age=2</p></blockquote><blockquote><p>传输协议是用来完成客户端和服务端的数据(内存)传输的，类似于快递小哥、负责把客户和商家的物品来回床底</p></blockquote><ul><li>客户端不仅可以向服务器发送请求，而且还可以吧一些内容传递给服务器</li><li>服务器端也可以把内容返回给客户端<ul><li>客户端和服务端传输的内容总称:<strong>http报文</strong>，这些报文信息都是基于传输协议完成传输的，客户端传递给服务器叫做请求(<strong>Request</strong>),服务器返回给客户端叫做响应(<strong>Response</strong>) , request+response两个阶段统称为一个HTTP事务(事务:一个完整的事情)</li></ul></li></ul><h3 id="HTTP事务"><a href="#HTTP事务" class="headerlink" title="HTTP事务"></a>HTTP事务</h3><ul><li>当客户端想服务器端发送请求，此时客户端和服务器端会简历一个传输通道(链接通道)，传输协议就是基于这个通道吧信息进行传输的</li><li>当服务器端接受到请求信息，把内容返回给客户端后，传输通道会自动销毁关闭</li></ul><h3 id="传输协议分类"><a href="#传输协议分类" class="headerlink" title="传输协议分类"></a>传输协议分类</h3><ul><li>http:超文本传输协议(客户端和服务器端传输的内容除了文本以外)，还可以传输图片，音视频等文件流[二进制编码/base64],以及传输xml格式的数据等，是目前市场上应用最广泛的传输协议</li><li>https:http ssl,它比http更加安全，要往数据内容的传输通道是经过ssl加密的(它需要在服务器端惊醒特殊的处理)，所以涉及资金类的网站一般都是https协议的</li><li>ftp:资源文件传输协议，一般用客户端把资源文件(不是代码)上传到服务端，或者从服务器端下载一些资源文件（ftp传输的内容会http这类传输协议传输的内容多)</li></ul><h3 id="http报文"><a href="#http报文" class="headerlink" title="http报文"></a>http报文</h3><p>1、起始行</p><ul><li>请求起始行</li><li>响应起始行</li></ul><p>2、首部(头)</p><ul><li>请求头：内置请求头、自定义请求头</li><li>响应式：内置响应头、自定义响应头</li><li>通用头：请求和响应都有的</li></ul><p>3、主体</p><ul><li>请求主体</li><li>响应主体</li></ul><p>请求xxx都是客户端设置的信息，服务器获取这些信息<br>响应xxx都是服务器端设置的信息，客户端用来接受这些信息</p><h2 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h2><p>设置域名其实就给不好记忆的服务器外网ip设置了一个好记忆的名字<br>顶级域名(一级域名):qq.com<br>二级域名:<a href="http://www.qq.com、v.qq.com、sports.qq.com" target="_blank" rel="noopener">www.qq.com、v.qq.com、sports.qq.com</a><br>三级域名:kbs.sports.qq.com</p><h2 id="端口号"><a href="#端口号" class="headerlink" title="端口号"></a>端口号</h2><p>在服务器发布项目的时候，我们可以通过端口号区分当前服务器上不同的项目<br>一台服务器的端口号取值范围:0~65535之间，如果电脑上安装了很多程序，有一些端口号是被占用了</p><p>HTTP:默认端口号80<br>HTTP:默认端口号443<br>FTP:默认端口号21</p><p>对于上述三个端口号其实是很重要的，如果被其它程序占用的，我们则不能使用了，所以服务器上一般是禁止安装其它程序的</p><h2 id="第四部分-请求资源文件的路径名称"><a href="#第四部分-请求资源文件的路径名称" class="headerlink" title="第四部分 请求资源文件的路径名称"></a>第四部分 请求资源文件的路径名称</h2><p>/stu/index.html<br>在服务器中发布项目的时候，我们一般都会配置一些默认文档:用户即使不输入请求文件的名称，服务器也会找到默认文档(一般默认文档都是index/default…)<br>我们通常为了做seo优化，会把一些动态页面的地址(xxx.php、xxx.aspx、xxx.asp、xxx.jsp…)进行伪URL重写(需要服务器处理的)<br><a href="https://item.jd.com/432527.html" target="_blank" rel="noopener">https://item.jd.com/432527.html</a><br>不可能是有一个商品，自己就单独写一个详情页面，肯定是同一个详情页做的不同处理</p><h3 id="第一种方案"><a href="#第一种方案" class="headerlink" title="第一种方案"></a>第一种方案</h3><p>由后台语言很久详情页模板动态生成具体的详情页面</p><h3 id="第二种方案"><a href="#第二种方案" class="headerlink" title="第二种方案"></a>第二种方案</h3><p>当前页面就是一个页面，例如:detail.html/detail.php…,我们做详情页面的时候，开发是按照detail.html?id=432527 来开发的，但是这种页面不方便做seo优化，此时我们把真实的地址进行重写，重写为了让我们看到的是4325427.html</p><h3 id="第五部分-问号传承"><a href="#第五部分-问号传承" class="headerlink" title="第五部分 问号传承"></a>第五部分 问号传承</h3><p>?name=zf&amp;age=9<br>把一些通过xxx=xxx的方式，放在一个url的末尾，通过问号传递</p><p>【作用】<br>1.在ajax请求中，我们可以通过问号传递参数的方式，客户端吧一些信息传递给服务器，服务器更具传递信息的不一样，返回不同的数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// $.ajax(url,&#123;&#125;);</span></span><br><span class="line"><span class="comment">// $.get(url,function()&#123;&#125;);</span></span><br><span class="line"><span class="comment">// 对于ajax请求的特殊写法，原理还是基于ajax方法实现 $.post $.script</span></span><br><span class="line"></span><br><span class="line">$.ajax(&#123;</span><br><span class="line">    url:<span class="string">'getPersonInfo?id=12'</span></span><br><span class="line">    ...</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当前案例，我们传递给服务器的编号是多少，服务器端就会把对应编号人员信息给返回</span></span><br></pre></td></tr></table></figure><p>2.消除ajax请求中get方式缓存</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">url:<span class="string">'xxx?_=0.123456'</span></span><br><span class="line">method:<span class="string">'get'</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 我们会在请求url的末尾最佳一个随机数_=随机数，保证每一次请求的url都是不一样的，以此来消除get请求一流的缓存问题</span></span><br></pre></td></tr></table></figure><p>3.通过url传递传输的方式，可以实现页面之间信息的通讯，例如:我们有两个页面A/B,A是列表页面、B是详情页，点击A中的某一条信息，进入到唯一的详情页B，如果展示不同的信息，这种操作就可以基于URL问号传递参数来实现了</p><p>例如:<br><a href="http://sports.qq.com/kbsweb/game.htm?mid=10000:1471087" target="_blank" rel="noopener">http://sports.qq.com/kbsweb/game.htm?mid=10000:1471087</a><br><a href="http://sports.qq.com/kbsweb/game.htm?mid=10000:1471086" target="_blank" rel="noopener">http://sports.qq.com/kbsweb/game.htm?mid=10000:1471086</a><br>在进入game.htm页面的时候，我们可以获取URL传递的参数值，更具传递参数值的不一样从服务器端获取不同的数据展示</p><p>在列表页面进行页面跳转的时候，我们需要记住的是跳转的同事传递不同的参数值<br><a href="game.html?mid=xxx"></a></p><h3 id="第六部分-HASH值"><a href="#第六部分-HASH值" class="headerlink" title="第六部分 HASH值"></a>第六部分 HASH值</h3><p>#xxx<br>URL末尾传递的井号什么，就是HASH值(哈希值)</p><p>[作用]<br>1、页面中锚点定位<br>2、前端路由(SPA单页面开发) –&gt;</p>]]></content>
      
      
      <categories>
          
          <category> http与ajax入门笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> http与ajax入门笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7 HTML 字符的使用</title>
      <link href="/2019/03/06/html%E5%85%A5%E9%97%A8/7%20HTML%20%E5%AD%97%E7%AC%A6%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/03/06/html%E5%85%A5%E9%97%A8/7%20HTML%20%E5%AD%97%E7%AC%A6%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>在 HTML 中，某些字符是预留的。大部分人最常用的就是&amp;nbsp,因为这个是我们目前使用最平凡的字符。还有一些不是很好的字符。例如&lt;，虽然说浏览的解析上是没有问题，单idea对于它的处理，则不会太友善。例如<img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1551869447649-96c65b26-b144-4dea-9d47-2d751c4f98f5.png#align=left&display=inline&height=38&name=image.png&originHeight=76&originWidth=358&size=12261&status=done&width=179" alt="image.png">这样。</p><p><strong>有用的字符实体</strong></p><table><thead><tr><th>显示结果</th><th>描述</th><th>实体名称</th><th>实体编号</th></tr></thead><tbody><tr><td><br></td><td>空格</td><td>&nbsp;</td><td>&#160;</td></tr><tr><td>&lt;</td><td>小于号</td><td>&lt;</td><td>&#60;</td></tr><tr><td>&gt;</td><td>大于号</td><td>&gt;</td><td>&#62;</td></tr><tr><td>&amp;</td><td>和号</td><td>&amp;</td><td>&#38;</td></tr><tr><td>“</td><td>引号</td><td>&quot;</td><td>&#34;</td></tr><tr><td>‘</td><td>撇号</td><td>&apos; (IE不支持)</td><td>&#39;</td></tr><tr><td>￠</td><td>分</td><td>&cent;</td><td>&#162;</td></tr><tr><td>£</td><td>镑</td><td>&pound;</td><td>&#163;</td></tr><tr><td>¥</td><td>元</td><td>&yen;</td><td>&#165;</td></tr><tr><td>€</td><td>欧元</td><td>&euro;</td><td>&#8364;</td></tr><tr><td>§</td><td>小节</td><td>&sect;</td><td>&#167;</td></tr><tr><td>©</td><td>版权</td><td>&copy;</td><td>&#169;</td></tr><tr><td>®</td><td>注册商标</td><td>&reg;</td><td>&#174;</td></tr><tr><td>™</td><td>商标</td><td>&trade;</td><td>&#8482;</td></tr><tr><td>×</td><td>乘号</td><td>&times;</td><td>&#215;</td></tr><tr><td>÷</td><td>除号</td><td>&divide;</td><td>&#247;</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> html入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6 HTML 文本语义化</title>
      <link href="/2019/03/06/html%E5%85%A5%E9%97%A8/6%20HTML%20%E6%96%87%E6%9C%AC%E8%AF%AD%E4%B9%89%E5%8C%96/"/>
      <url>/2019/03/06/html%E5%85%A5%E9%97%A8/6%20HTML%20%E6%96%87%E6%9C%AC%E8%AF%AD%E4%B9%89%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h3 id="6-1-介绍"><a href="#6-1-介绍" class="headerlink" title="6.1 介绍"></a>6.1 介绍</h3><p>很多人在写一个文本的时候，都会用上不少的css，这些都属于不利于语义化的html，你加上了不少的css，最后蜘蛛爬虫获取你代码的时候，你以为是长成，要字体斜就斜，要字体加粗就加粗，啥样没有啊，还能空几格。但是爬虫可以不是自带编辑器，就是你的浏览器。人家看到的一团文字。<br><a name="48079f62"></a></p><h3 id="6-2-HTML-文本格式化标签"><a href="#6-2-HTML-文本格式化标签" class="headerlink" title="6.2 HTML 文本格式化标签"></a>6.2 HTML 文本格式化标签</h3><table><thead><tr><th><strong>标签</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><b></b></td><td>定义粗体文本</td></tr><tr><td><em></em></td><td>定义着重文字</td></tr><tr><td><i></i></td><td>定义斜体字</td></tr><tr><td><small></small></td><td>定义小号字</td></tr><tr><td><strong></strong></td><td>定义加重语气</td></tr><tr><td><sub></sub></td><td>定义下标字</td></tr><tr><td><sup></sup></td><td>定义上标字</td></tr><tr><td><ins></ins></td><td>定义插入字</td></tr><tr><td><del></del></td><td>定义删除字</td></tr></tbody></table><p><a name="2a1991cc"></a></p><h3 id="6-3-HTML-“计算机输出”-标签"><a href="#6-3-HTML-“计算机输出”-标签" class="headerlink" title="6.3 HTML “计算机输出” 标签"></a>6.3 HTML “计算机输出” 标签</h3><table><thead><tr><th><strong>标签</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><kbd></kbd></td><td>定义键盘码</td></tr><tr><td><samp></samp></td><td>定义计算机代码样本</td></tr><tr><td><var></var></td><td>定义变量</td></tr><tr><td><pre></pre></td><td>定义预格式文本</td></tr><tr><td><code></code></td><td>定义计算机代码</td></tr></tbody></table><p><a name="61405f8c"></a></p><h3 id="6-4-HTML-引文-引用-及标签定义"><a href="#6-4-HTML-引文-引用-及标签定义" class="headerlink" title="6.4 HTML 引文, 引用, 及标签定义"></a>6.4 HTML 引文, 引用, 及标签定义</h3><table><thead><tr><th>标签</th><th>描述</th></tr></thead><tbody><tr><td><abbr></abbr></td><td>定义缩写</td></tr><tr><td><address></address></td><td>定义地址</td></tr><tr><td><bdo></bdo></td><td>定义文字方向</td></tr><tr><td><blockquote></blockquote></td><td>定义长的引用</td></tr><tr><td><q></q></td><td>定义短的引用语</td></tr><tr><td><cite></cite></td><td>定义引用、引证</td></tr><tr><td><dfn></dfn></td><td>定义一个定义项目</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> html入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5 HTML基本结构</title>
      <link href="/2019/03/06/html%E5%85%A5%E9%97%A8/5%20HTML%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84/"/>
      <url>/2019/03/06/html%E5%85%A5%E9%97%A8/5%20HTML%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<p><a name="188dab1b"></a></p><h3 id="5-1-html基本结构"><a href="#5-1-html基本结构" class="headerlink" title="5.1 html基本结构"></a>5.1 html基本结构</h3><ul><li>HTML文档标记：<html></html></li><li>头标签：<head><meta name="generator" content="Hexo 3.8.0"></head></li><li>标题标签：<title></title></li><li>页面元信息：<meta>,一般设置为utf-8</li><li>主题标记：<body></body></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a name="cc34e3eb"></a></p><h3 id="5-2-HTML文档的后缀名"><a href="#5-2-HTML文档的后缀名" class="headerlink" title="5.2 HTML文档的后缀名"></a>5.2 HTML文档的后缀名</h3><blockquote><p>.html与.htm均是静态网页后缀名，网页文件没有区别与区分，html与htm后缀网页后缀可以互换，对网页完全没有影响同时也没有区别。可以认为html与htm没有本质区别，唯一区别即多与少一个“L”。</p></blockquote><p><a name="ce6865bd"></a></p><h3 id="5-3-元素语法"><a href="#5-3-元素语法" class="headerlink" title="5.3 元素语法"></a>5.3 元素语法</h3><ul><li>HTML 元素以开始标签起始</li><li>HTML 元素以结束标签终止</li><li>元素的内容是开始标签与结束标签之间的内容</li><li>某些 HTML 元素具有空内容（empty content）</li><li>空元素在开始标签中进行关闭（以开始标签的结束而结束）</li><li>大多数 HTML 元素可拥有属性</li></ul><p><a name="d80f3319"></a></p><h3 id="5-4-嵌套的-HTML-元素"><a href="#5-4-嵌套的-HTML-元素" class="headerlink" title="5.4 嵌套的 HTML 元素"></a>5.4 嵌套的 HTML 元素</h3><blockquote><p>HTML 文档由嵌套的 HTML 元素构成。大多数 HTML 元素可以嵌套（可以包含其他 HTML 元素）。</p></blockquote><p><a name="f6a33d1c"></a></p><h3 id="5-5-空元素"><a href="#5-5-空元素" class="headerlink" title="5.5 空元素"></a>5.5 空元素</h3><ul><li>没有内容的 HTML 元素被称为空元素。空元素是在开始标签中关闭的。</li><li><br> 就是没有关闭标签的空元素（<br> 标签定义换行）。</li><li>在 XHTML、XML 以及未来版本的 HTML 中，所有元素都必须被关闭。</li><li>在开始标签中添加斜杠，比如 <br>，是关闭空元素的正确方法，HTML、XHTML 和 XML 都接受这种方式。</li><li>即使 <br> 在所有浏览器中都是有效的，但使用 <br> 其实是更长远的保障。</li></ul><p><a name="04a1ebc2"></a></p><h3 id="5-6-HTML-标签大小写"><a href="#5-6-HTML-标签大小写" class="headerlink" title="5.6 HTML 标签大小写"></a>5.6 HTML 标签大小写</h3><ul><li>HTML 标签对大小写不敏感：<p> 等同于 </p><p>。许多网站都使用大写的 HTML 标签。</p></li><li>PHP中文网使用的是小写标签，因为万维网联盟（W3C）在 HTML 4 中推荐使用小写，而在未来 (X)HTML 版本中强制使用小写。</li></ul><p><a name="464c20d4"></a></p><h3 id="5-7-HTML属性"><a href="#5-7-HTML属性" class="headerlink" title="5.7 HTML属性"></a>5.7 HTML属性</h3><p>虽然世界上存在一个万能标签div，但是还是需要一些特别的标签去完成一些特别的事情,例如 a标签中href属性 img标签中的src属性。</p>]]></content>
      
      
      <categories>
          
          <category> html入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4 标签分为两种等级</title>
      <link href="/2019/03/06/html%E5%85%A5%E9%97%A8/4%20%E6%A0%87%E7%AD%BE%E5%88%86%E4%B8%BA%E4%B8%A4%E7%A7%8D%E7%AD%89%E7%BA%A7/"/>
      <url>/2019/03/06/html%E5%85%A5%E9%97%A8/4%20%E6%A0%87%E7%AD%BE%E5%88%86%E4%B8%BA%E4%B8%A4%E7%A7%8D%E7%AD%89%E7%BA%A7/</url>
      
        <content type="html"><![CDATA[<h3 id="4-1-行内元素"><a href="#4-1-行内元素" class="headerlink" title="4.1 行内元素"></a>4.1 行内元素</h3><blockquote><p>简介</p></blockquote><p>  例子: span a b strong i em s br u textarea input select lable img sup big small</p><p>  内联元素是指本身属性为display:inline<br>的元素。因为它自身的特点，我们通常使用行内元素进行文字、小图标（小结构）的搭建。</p><blockquote><p>行内元素的特点</p></blockquote><p>  1.不独占一行</p><p>  2.排列方式:从左往右</p><p>  3.设置宽高不起作用 如要起作用 需要转换为块/行内块</p><p>  4.不设置宽高是它的本身内容的宽高</p><p>   5.天数自带 display:inline</p><p>  6.行内元素里不能嵌套块级元素（特殊a）</p><p><a name="29af6f69"></a></p><h3 id="4-2-块级元素"><a href="#4-2-块级元素" class="headerlink" title="4.2 块级元素"></a>4.2 块级元素</h3><blockquote><p>简介</p></blockquote><p>  例子: div h1-h6 hr menu ol ul li dl dt dd table p form</p><p>  本身属性为 display:block的元素；因为它自身的特点，我们通常使用块级元素进行大布局（大结构的搭建）</p><blockquote><p>块级元素的特点</p></blockquote><p>  1.独占一行,每一个块级元素都会从新的一行重新开始</p><p>  2.排列方式:从上往下</p><p>  3.可以设置宽高以及盒子模型的其他属性</p><p>  4.不设置宽高的情况下 他的宽度和父元素的宽度 它的高度是本身内容的高度</p><p>  5.天生自带display：block</p><p>  6.ul ol 下面只能是li dl 下面只能是dt dd</p><p>  7.p里面不能嵌套任何的块级元素 包括它自己本身 可以嵌套行内元素</p><p><a name="9dd09f79"></a></p><h3 id="4-3-行内块"><a href="#4-3-行内块" class="headerlink" title="4.3 行内块"></a>4.3 行内块</h3><blockquote><p>简介</p></blockquote><p>  行内块状元素综合了行内元素和块状元素的特性，但是各有取舍。因此行内块状元素在日常的使用中，由于其特性，使用的次数也比较多。</p><blockquote><p>行内块元素的特点</p></blockquote><p>  (1)不自动换行</p><p>  (2)能够识别宽高</p><p>  (3)默认排列方式为从左到右</p><p><a name="d928e77c"></a></p><h3 id="4-4-元素之间的互相转换"><a href="#4-4-元素之间的互相转换" class="headerlink" title="4.4 元素之间的互相转换"></a>4.4 元素之间的互相转换</h3><p>行内元素 =&gt; display:inline</p><p>块级元素 =&gt; display:block</p><p>行内块元素 =&gt; display:inline-block</p>]]></content>
      
      
      <categories>
          
          <category> html入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3 一场升级</title>
      <link href="/2019/03/06/html%E5%85%A5%E9%97%A8/3%20%E4%B8%80%E5%9C%BA%E5%8D%87%E7%BA%A7/"/>
      <url>/2019/03/06/html%E5%85%A5%E9%97%A8/3%20%E4%B8%80%E5%9C%BA%E5%8D%87%E7%BA%A7/</url>
      
        <content type="html"><![CDATA[<blockquote><p>从XHTML 1.1 到 htm5 这个故事要从 DOCTYPE 开始</p></blockquote><pre><code>从html部队的第一代长官之后，历经了几代长官，一代代升级迭代。最终市面上留下的也就是html4与html5,老百姓喜欢称他们为h4与h5。</code></pre><blockquote><p>HTML 4.01 Strict</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;</span><br></pre></td></tr></table></figure><blockquote><p>HTML 4.01 Transitional</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;</span><br></pre></td></tr></table></figure><blockquote><p>HTML 4.01 Frameset</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Frameset//EN&quot; &quot;http://www.w3.org/TR/html4/frameset.dtd&quot;&gt;</span><br></pre></td></tr></table></figure><blockquote><p>HTML 5</p></blockquote><p><code>&lt;!DOCTYPE html&gt;</code></p><pre><code>在这场标签的战役中，首领的不同，也就意味着使用的html的版本设置不同，这也就是html的标签不同。</code></pre><blockquote><p>这场战役中，也要出现一些不能出现，但是舍不得删的。</p></blockquote><p><code>&lt;!-- --&gt;</code></p><blockquote><p>快捷键: ctrl + /</p></blockquote><p>在这里我们认识一个编译工具。</p><pre><code>工欲善其事必先利其器，所以先下个vscode总是没错的，我辈总有些人是说记事本也能，但是有人和你说了，别别理他了，工作场合。没人那么用。也有人和说过webstorm，在jetbrains公司大旗下，也不错，但是我觉得功能太重，不好用。sublime在vscode出现之前绝对是神器，但是插件上还是慢慢逊了一筹。</code></pre><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1551858821704-f18ae289-9860-4947-b34d-972648c92156.png#align=left&display=inline&height=455&originHeight=783&originWidth=1284&size=0&status=done&width=746" alt></p>]]></content>
      
      
      <categories>
          
          <category> html入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2 认识html标签</title>
      <link href="/2019/03/06/html%E5%85%A5%E9%97%A8/2%20%E8%AE%A4%E8%AF%86html%E6%A0%87%E7%AD%BE/"/>
      <url>/2019/03/06/html%E5%85%A5%E9%97%A8/2%20%E8%AE%A4%E8%AF%86html%E6%A0%87%E7%AD%BE/</url>
      
        <content type="html"><![CDATA[<p><a name="10369f11"></a></p><h3 id="2-1-入门篇"><a href="#2-1-入门篇" class="headerlink" title="2.1 入门篇"></a>2.1 入门篇</h3><p><a name="cfb83c02"></a></p><h4 id="世界观"><a href="#世界观" class="headerlink" title="世界观"></a>世界观</h4><pre><code> 在张鑫旭大神将前端的世界比喻成一个王国，而我认为可能这就分为3个部队，差不多可以理解成为，html部队，css部队，js部队。有一个叫产品经理的怪，需要三家合理才能打赢。这第一仗就是html，负责把骨架搭好了，再上颜料和动态效果。骨架搭的好，有什么好处呢，大家都知道只要div+css，那么这个页面除了几个特殊标签，比如a，viode啊，其他的都可以伪装出来。这个牵扯到一个标签语义化的作用，语义化有两种好处。</code></pre><p><a name="9c983fd3"></a></p><h3 id="2-2-权重-蜘蛛"><a href="#2-2-权重-蜘蛛" class="headerlink" title="2.2 权重(蜘蛛)"></a>2.2 权重(蜘蛛)</h3><pre><code>骨架好，百度蜘蛛会爬取收录。这个作用，可以帮助很多公司，获取百度权重的排名。百度蜘蛛，它的功能其实就和抄书一样。那么就意味着他不能解析css。所以，他看到了img就知道是图片，但是你写一个div+background:url(&apos;./img.png&apos;)。它可就不认识了。</code></pre><p><a name="adc00fab"></a></p><h3 id="2-3-障碍解析器"><a href="#2-3-障碍解析器" class="headerlink" title="2.3 障碍解析器"></a>2.3 障碍解析器</h3><pre><code>使用特殊的阅读器。</code></pre><blockquote><p>那么如何判断骨架的好坏呢？</p></blockquote><pre><code>我们拿慕课网举例子，原图如下</code></pre><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1551858682311-ba33b5ea-4aa3-45a7-9b40-2b9eb19b592b.png#align=left&display=inline&height=164&originHeight=423&originWidth=1919&size=0&status=done&width=746" alt></p><pre><code>我们把网页的css删除了，标签的格式还不乱，这就是好的骨架。</code></pre><p><img src="https://cdn.nlark.com/yuque/0/2019/png/271124/1551858682559-cca75bd2-0336-470a-a0c3-692ec42ad69d.png#align=left&display=inline&height=411&originHeight=411&originWidth=307&size=0&status=done&width=307" alt></p><p>改呗收录的都被收录了这就是语义化。</p><blockquote><p>按下不表: 接下来我们将根据 html，css，js的基本和升级探究，前端的世界。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> html入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1 认识浏览器</title>
      <link href="/2019/03/06/html%E5%85%A5%E9%97%A8/1%20%E8%AE%A4%E8%AF%86%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
      <url>/2019/03/06/html%E5%85%A5%E9%97%A8/1%20%E8%AE%A4%E8%AF%86%E6%B5%8F%E8%A7%88%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>谷歌浏览器（chrome）:Webkit内核（v8引擎）</p><p>火狐浏览器（firefox）：Gecko内核</p><p>IE浏览器：Trident内核</p><p>欧朋浏览器 (opera):Presto内核</p><p>safari (苹果浏览器)</p><p>大部分国产浏览器（360、搜狗、QQ、UC、猎豹、百度）</p><blockquote><p>认知的浏览器世界</p></blockquote><p>  浏览器因为内核不同，将会导致很多问题，比如说js的适配问题，解决es6的兼容问题，比如说css3的兼容问题，这些势必都会成功很多比较麻烦的问题。;因为最早期的设计中，在我的认知中，div+css的拼图模式。但是根据移动端的出现，和各自的核心浏览器适配问题，而又没有统一的局势和方案。</p><p>  加上最近的node(v8)环境的出现，js代码的生存空间(解释器)的扩张，面对前端的适配问题，也将层出不穷。</p>]]></content>
      
      
      <categories>
          
          <category> html入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>13. promise</title>
      <link href="/2019/03/06/es6/13.promise/"/>
      <url>/2019/03/06/es6/13.promise/</url>
      
        <content type="html"><![CDATA[<h2 id="异步回调"><a href="#异步回调" class="headerlink" title="异步回调"></a>异步回调</h2><h2 id="回调地狱"><a href="#回调地狱" class="headerlink" title="回调地狱"></a>回调地狱</h2><p>在需要多个操作的时间，会导致多个回调函数嵌套，导致代码不够直观，就常说的回调地域</p><h2 id="并行结果"><a href="#并行结果" class="headerlink" title="并行结果"></a>并行结果</h2><p>如果几个异步操作之间并没有前后顺序之分，但需要等多个异步完成操作完成后才能执行后续的任务，无法实现并行节约时间</p><h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><p>promise本意是承诺，在程序中的意思就是承诺我过一段时间后会给你一个结果。什么时间会用到过一段时间？答案是异步操作，异步是指可能比较长时间才有结果的才做，例如网络请求、读取本地文件等</p><h2 id="Promise的三种状态"><a href="#Promise的三种状态" class="headerlink" title="Promise的三种状态"></a>Promise的三种状态</h2><ul><li>Pending Promise对象势力创建时候的初始化状态</li><li>Fulfilled 可以理解为成功的状态</li><li>Rejected 可以理解为失败的状态<blockquote><p>then方法就是用来指定Promise 对象的状态改变时确定执行的操作，resolve时执行第一个函数（onFulfilled）,reject时执行第二函数（onRejected）</p></blockquote></li></ul><h2 id="构造一个Promise"><a href="#构造一个Promise" class="headerlink" title="构造一个Promise"></a>构造一个Promise</h2><h3 id="使用Promise"><a href="#使用Promise" class="headerlink" title="使用Promise"></a>使用Promise</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">Math</span>.random()&gt;<span class="number">0.5</span>)</span><br><span class="line">      resolve(<span class="string">'This is resolve!'</span>)</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      reject(<span class="string">'This is reject'</span>)</span><br><span class="line">    &#125;,<span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line">promise.then(Fulfilled,Rejected)</span><br></pre></td></tr></table></figure><ul><li>构造一个Promise实例需要给Promise构造函数传入一个函数</li><li>传入的函数需要有两个形参，两个形参都是function类型的参数。<ul><li>第一个形参运行后会让Promise实例处于resolve状态，所以我们一般给第一个形参命名为resolve，使 Promise对象的状态改变成成功，同时传递一个参数用于后续成功后的操作</li><li>第一个形参运行后悔让Promise实例处于reject状态，所以我们一般给第一个形参命名为reject，将Promise对象的状态改变为失败，同事将错误的信息传递到后续错误处理的操作</li></ul></li></ul><h2 id="es5模拟Promise"><a href="#es5模拟Promise" class="headerlink" title="es5模拟Promise"></a>es5模拟Promise</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Promise</span>(<span class="params">fn</span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.success(data);</span><br><span class="line">&#125;,(error)=&gt;&#123;</span><br><span class="line"><span class="keyword">this</span>.error();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.prtotype.resolve = <span class="function"><span class="keyword">function</span> (<span class="params">data</span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.success(data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.prototype.then = <span class="function"><span class="keyword">function</span> (<span class="params">success,error</span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.success = success;</span><br><span class="line"><span class="keyword">this</span>.error = error;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="es5模拟Promise-1"><a href="#es5模拟Promise-1" class="headerlink" title="es5模拟Promise"></a>es5模拟Promise</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Promise</span></span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>(fn)&#123;</span><br><span class="line">  fn(<span class="function">(<span class="params">data</span>)=&gt;</span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.success(data);</span><br><span class="line">      &#125;,(error)=&gt;&#123;</span><br><span class="line">      <span class="keyword">this</span>.error();</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  resolve(data)&#123;</span><br><span class="line">  <span class="keyword">this</span>.success(data);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  reject(error)&#123;</span><br><span class="line">  <span class="keyword">this</span>.error(error);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  then(success,error)&#123;</span><br><span class="line">  <span class="keyword">this</span>.success = success;</span><br><span class="line">    <span class="keyword">this</span>.error = error;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="promise-做为函数的返回值"><a href="#promise-做为函数的返回值" class="headerlink" title="promise 做为函数的返回值"></a>promise 做为函数的返回值</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajaxPromise</span>(<span class="params">queryUrl</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">  xhr.open(<span class="string">'GET'</span>,queryUrl,ture);</span><br><span class="line">    xhr.send(<span class="literal">null</span>);</span><br><span class="line">    xhr.onreadystatechange = <span class="function"><span class="params">()</span> =&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(xhr.readyState === <span class="number">4</span> )&#123;</span><br><span class="line">        <span class="keyword">if</span>(xhr.status === <span class="number">200</span>)&#123;</span><br><span class="line">          resolve(xhr.responseText);</span><br><span class="line">          &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          reject(xhr.responseText);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ajaxPromise(<span class="string">'http://www.baidu.com'</span>)</span><br><span class="line">.then(<span class="function">(<span class="params">value</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.error(err);</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure><h2 id="promise的链式调用"><a href="#promise的链式调用" class="headerlink" title="promise的链式调用"></a>promise的链式调用</h2><ul><li>每次调用返回的都是一个新的Promise实例</li><li>链式调用的参数通过返回值传递</li></ul><p>then 可以使用链式调用的写法原因在于，每一次执行该方法时总是会返回一个 Promise 对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">readFile(<span class="string">'1.txt'</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(data);</span><br><span class="line">  <span class="keyword">return</span> readFile(data);</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(err);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="promise-API"><a href="#promise-API" class="headerlink" title="promise API"></a>promise API</h2><h3 id="Promise-all"><a href="#Promise-all" class="headerlink" title="Promise.all"></a>Promise.all</h3><ul><li>参数:接受一个数组，数组内都是Promise实例</li><li>返回值: 返回一个 promise 实例，这个promise 实例的状态转移取决于参数的 promise实例的状态变化。当参数处于resolve状态时，返回resolve状态。如果参数中任意一个实例处于reject状态，返回的promise实例变为reject状态。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.all([p1,p2]).then(<span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">//[ '2.txt', '2' ]</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>不管两个promise谁先完成，Promise.all 方法会按照数组里面的顺序将结果返回</p></blockquote><h3 id="Promise-race"><a href="#Promise-race" class="headerlink" title="Promise.race"></a>Promise.race</h3><ul><li>参数:接受一个数组，数组内都是Promise实例</li><li>返回值: 返回一个 promise 实例，这个promise 实例的状态转移取决于参数的 promise实例的状态变化。当参数处于resolve状态时，返回resolve状态。如果参数中任意一个实例处于reject状态，返回的promise实例变为reject状态。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.race([p1,p2]).then(<span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">//[ '2.txt', '2' ]</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="Promise-resolve"><a href="#Promise-resolve" class="headerlink" title="Promise.resolve"></a>Promise.resolve</h3><p>返回一个Promise 实例，这个实例处于resolve状态。<br>根据传入的参数不同有不同的功能:</p><ul><li>值(对象、数组、字符串等):作为resolve传递出去的值</li><li>Promise 实例 : 原封不动返回</li></ul><h3 id="Promise-reject"><a href="#Promise-reject" class="headerlink" title="Promise.reject"></a>Promise.reject</h3><p>返回一个Promise实例，这个实例处于reject状态</p><ul><li>参数一般就是抛出的错误信息。</li></ul><h2 id="q"><a href="#q" class="headerlink" title="q"></a>q</h2><p>Q是一个在Javascrip中实现promise的模块<br><a name="ad6ccffe"></a></p><h2 id="13-8-1-q的基本用法"><a href="#13-8-1-q的基本用法" class="headerlink" title="13.8.1 q的基本用法"></a>13.8.1 q的基本用法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Q = <span class="built_in">require</span>(<span class="string">'q'</span>);</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">read</span>(<span class="params">filename</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> deferred = Q.defer();</span><br><span class="line">  fs.readFile(filename,<span class="string">'utf8'</span>,<span class="function"><span class="keyword">function</span>)(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(err)&#123;</span><br><span class="line">    deferred.reject(err);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  deferred.resolve(data);</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">read(<span class="string">'1.txt1'</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;,funtcion(error)&#123;</span><br><span class="line"><span class="built_in">console</span>.error(error);                    </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="13-8-2-q的简单实现"><a href="#13-8-2-q的简单实现" class="headerlink" title="13.8.2 q的简单实现"></a>13.8.2 q的简单实现</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    defer()&#123;</span><br><span class="line">        <span class="keyword">var</span> _success,_error;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            resolve(data)&#123;</span><br><span class="line">                _success(data);</span><br><span class="line">            &#125;,</span><br><span class="line">            reject(err)&#123;</span><br><span class="line">                _error(err);</span><br><span class="line">            &#125;,</span><br><span class="line">            promise:&#123;</span><br><span class="line">                then(success,error)&#123;</span><br><span class="line">                    _success = success;</span><br><span class="line">                    _error = error;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="170dcbc6"></a></p><h2 id="13-8-3-q的实现"><a href="#13-8-3-q的实现" class="headerlink" title="13.8.3 q的实现"></a>13.8.3 q的实现</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> defer = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> pending = [], value;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        resolve: <span class="function"><span class="keyword">function</span> (<span class="params">_value</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (pending) &#123;</span><br><span class="line">                value = _value;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, ii = pending.length; i &lt; ii; i++) &#123;</span><br><span class="line">                    <span class="keyword">var</span> callback = pending[i];</span><br><span class="line">                    callback(value);</span><br><span class="line">                &#125;</span><br><span class="line">                pending = <span class="literal">undefined</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        promise: &#123;</span><br><span class="line">            then: <span class="function"><span class="keyword">function</span> (<span class="params">callback</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (pending) &#123;</span><br><span class="line">                    pending.push(callback);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    callback(value);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="13-9-bluebird"><a href="#13-9-bluebird" class="headerlink" title="13.9 bluebird"></a>13.9 bluebird</h2><blockquote><p>实现 promise 标准的库是功能最全，速度最快的一个库</p></blockquote><h2 id="13-9-1-bluebird经典使用"><a href="#13-9-1-bluebird经典使用" class="headerlink" title="13.9.1 bluebird经典使用"></a>13.9.1 bluebird经典使用</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="built_in">Promise</span> = <span class="built_in">require</span>(<span class="string">'./bluebird'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> readFile = <span class="built_in">Promise</span>.promisify(<span class="built_in">require</span>(<span class="string">"fs"</span>).readFile);</span><br><span class="line">readFile(<span class="string">"1.txt"</span>, <span class="string">"utf8"</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">contents</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(contents);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">Promise</span>.promisifyAll(<span class="built_in">require</span>(<span class="string">"fs"</span>));</span><br><span class="line"></span><br><span class="line">fs.readFileAsync(<span class="string">"1.txt"</span>, <span class="string">"utf8"</span>).then(<span class="function"><span class="keyword">function</span> (<span class="params">contents</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(contents);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="bluebird简单实现"><a href="#bluebird简单实现" class="headerlink" title="bluebird简单实现"></a>bluebird简单实现</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    promisify(fn)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> args = <span class="built_in">Array</span>.from(<span class="built_in">arguments</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">                fn.apply(<span class="literal">null</span>, args.concat(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                        reject(err);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        resolve(<span class="built_in">arguments</span>[<span class="number">1</span>])</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;));</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    promisifyAll(obj)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> attr <span class="keyword">in</span> obj)&#123;</span><br><span class="line">            <span class="keyword">if</span>(obj.hasOwnProperty(attr) &amp;&amp; <span class="keyword">typeof</span> obj[attr] ==<span class="string">'function'</span>)&#123;</span><br><span class="line">                obj[attr+<span class="string">'Async'</span>] = <span class="keyword">this</span>.promisify(obj[attr]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="13-10-动画"><a href="#13-10-动画" class="headerlink" title="13.10 动画"></a>13.10 动画</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;move&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">    &lt;style&gt;</span></span><br><span class="line"><span class="regexp">        .square&#123;</span></span><br><span class="line"><span class="regexp">            width:40px;</span></span><br><span class="line"><span class="regexp">            height:40px;</span></span><br><span class="line"><span class="regexp">            border-radius: 50%;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        .square1&#123;</span></span><br><span class="line"><span class="regexp">            background-color: red;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        .square2&#123;</span></span><br><span class="line"><span class="regexp">            background-color: yellow;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        .square3&#123;</span></span><br><span class="line"><span class="regexp">            background-color: blue;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>style&gt;</span><br><span class="line">&lt;<span class="regexp">/head&gt;</span></span><br><span class="line"><span class="regexp">&lt;body&gt;</span></span><br><span class="line"><span class="regexp">&lt;div class="square square1" style="margin-left: 0"&gt;&lt;/</span>div&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"square square2"</span> style=<span class="string">"margin-left: 0"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"square square3"</span> style=<span class="string">"margin-left: 0"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">  var square1 = document.querySelector('.square1');</span></span><br><span class="line"><span class="regexp">  var square2 = document.querySelector('.square2');</span></span><br><span class="line"><span class="regexp">  var square3 = document.querySelector('.square3');</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  /</span>*<span class="function"><span class="keyword">function</span> <span class="title">move</span>(<span class="params">element,target,resolve</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> timer = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> marginLeft = <span class="built_in">parseInt</span>(element.style.marginLeft, <span class="number">10</span>);</span><br><span class="line">      <span class="keyword">if</span>(marginLeft == target)&#123;</span><br><span class="line">        resolve();</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        element.style.marginLeft = ++marginLeft+<span class="string">'px'</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,<span class="number">13</span>);</span><br><span class="line">  &#125;*<span class="regexp">/</span></span><br><span class="line"><span class="regexp">  function move(element,target,resolve)&#123;</span></span><br><span class="line"><span class="regexp">    let current = 0;</span></span><br><span class="line"><span class="regexp">    let timer = setInterval(function()&#123;</span></span><br><span class="line"><span class="regexp">      element.style.transform=`translateX($&#123;++current&#125;px)`;</span></span><br><span class="line"><span class="regexp">      if(current&gt;target)&#123;</span></span><br><span class="line"><span class="regexp">        clearInterval(timer);</span></span><br><span class="line"><span class="regexp">        resolve();</span></span><br><span class="line"><span class="regexp">      &#125;;</span></span><br><span class="line"><span class="regexp">    &#125;,13);</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">  function animate(element,target)&#123;</span></span><br><span class="line"><span class="regexp">    return new Promise(function(resolve,reject)&#123;</span></span><br><span class="line"><span class="regexp">      move(element,target,resolve);</span></span><br><span class="line"><span class="regexp">    &#125;);</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">  animate(square1,100)</span></span><br><span class="line"><span class="regexp">    .then(function()&#123;</span></span><br><span class="line"><span class="regexp">      return animate(square2,100);</span></span><br><span class="line"><span class="regexp">    &#125;)</span></span><br><span class="line"><span class="regexp">    .then(function()&#123;</span></span><br><span class="line"><span class="regexp">      return animate(square3,100);</span></span><br><span class="line"><span class="regexp">    &#125;);</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><p><a name="c6923f5a"></a></p><h2 id="13-11-co"><a href="#13-11-co" class="headerlink" title="13.11. co"></a>13.11. co</h2><p><a name="d65c4d2f"></a></p><h2 id="13-11-1-co初体验"><a href="#13-11-1-co初体验" class="headerlink" title="13.11.1 co初体验"></a>13.11.1 co初体验</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getNumber</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve,reject</span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">let</span> number = <span class="built_in">Math</span>.random();</span><br><span class="line">      <span class="keyword">if</span>(number &gt;<span class="number">.5</span>)&#123;</span><br><span class="line">        resolve(number);</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        reject(<span class="string">'数字太小'</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,<span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> *<span class="title">read</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="keyword">yield</span> getNumber();</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">  <span class="keyword">let</span> b = <span class="keyword">yield</span> <span class="string">'b'</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(b);</span><br><span class="line">  <span class="keyword">let</span> c = <span class="keyword">yield</span> getNumber();</span><br><span class="line">  <span class="built_in">console</span>.log(c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">co</span>(<span class="params">gen</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> g = gen();</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">next</span>(<span class="params">lastValue</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">let</span> &#123;done,value&#125; = g.next(lastValue);</span><br><span class="line">      <span class="keyword">if</span>(done)&#123;</span><br><span class="line">         resolve(lastValue);</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(value <span class="keyword">instanceof</span> <span class="built_in">Promise</span>)&#123;</span><br><span class="line">          value.then(next,<span class="function"><span class="keyword">function</span>(<span class="params">val</span>)</span>&#123;</span><br><span class="line">            reject(val);</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          next(value);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    next();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line">co(read).then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">reason</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(reason);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><a name="fb5ae0eb"></a></p><h2 id="13-11-2-co连续读文件"><a href="#13-11-2-co连续读文件" class="headerlink" title="13.11.2 co连续读文件"></a>13.11.2 co连续读文件</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readFile</span>(<span class="params">filename</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve,reject</span>) </span>&#123;</span><br><span class="line">    fs.readFile(filename,<span class="string">'utf8'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(err)</span><br><span class="line">        reject(err);</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        resolve(data);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> *<span class="title">read</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="keyword">yield</span> readFile(<span class="string">'./1.txt'</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">  <span class="keyword">let</span> b = <span class="keyword">yield</span> readFile(<span class="string">'./2.txt'</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">co</span>(<span class="params">gen</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> g = gen();</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">next</span>(<span class="params">val</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> &#123;done,value&#125; = g.next(val);</span><br><span class="line">    <span class="keyword">if</span>(!done)&#123;</span><br><span class="line">      value.then(next);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  next();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="118b50d1"></a></p><h2 id="13-12-Promise-A-完整实现"><a href="#13-12-Promise-A-完整实现" class="headerlink" title="13.12 Promise/A+完整实现"></a>13.12 Promise/A+完整实现</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Promise</span>(<span class="params">executor</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> self = <span class="keyword">this</span>;</span><br><span class="line">  <span class="comment">// 默认状态pending</span></span><br><span class="line">  self.status = <span class="string">"pending"</span>;</span><br><span class="line">  <span class="comment">// 此变量里放着此promise的结果</span></span><br><span class="line">  self.value = <span class="literal">undefined</span>;</span><br><span class="line">  <span class="comment">// 存放所有成功的回调函数</span></span><br><span class="line">  self.onResolvedCallbacks = [];</span><br><span class="line">  <span class="comment">// 存放所有的失败的回调函数</span></span><br><span class="line">  self.onRejectedCallbacks = [];</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 调用方法promise 变成成功状态</span></span><br><span class="line">  <span class="comment">// resolve的时候你把值传过来</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (value <span class="keyword">instanceof</span> <span class="built_in">Promise</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> value.then(resolve, reject)</span><br><span class="line">    &#125;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// 异步执行所有的回调函数</span></span><br><span class="line">      <span class="keyword">if</span> (self.status == <span class="string">'pending'</span>) &#123;</span><br><span class="line">        self.value = value;</span><br><span class="line">        self.status = <span class="string">'resolved'</span>;</span><br><span class="line">        self.onResolvedCallbacks.forEach(<span class="function"><span class="params">item</span> =&gt;</span> item(value));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 调用方法把当前promise变成失败</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">reject</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (self.status == <span class="string">'pending'</span>) &#123;</span><br><span class="line">        self.value = value;</span><br><span class="line">        self.status = <span class="string">'rejected'</span>;</span><br><span class="line">        self.onRejectedCallbacks.forEach(<span class="function"><span class="params">item</span> =&gt;</span> item(value));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    executor(resolve, reject);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    reject(e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolvePromise</span>(<span class="params">promise2, x, resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (promise2 === x) &#123;</span><br><span class="line">    <span class="keyword">return</span> reject(<span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'循环引用'</span>));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> then, called;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (x != <span class="literal">null</span> &amp;&amp; ((<span class="keyword">typeof</span> x == <span class="string">'object'</span> || <span class="keyword">typeof</span> x == <span class="string">'function'</span>))) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      then = x.then;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> then == <span class="string">'function'</span>) &#123;</span><br><span class="line">        then.call(x, <span class="function"><span class="keyword">function</span> (<span class="params">y</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">if</span> (called)<span class="keyword">return</span>;</span><br><span class="line">          called = <span class="literal">true</span>;</span><br><span class="line">          resolvePromise(promise2, y, resolve, reject);</span><br><span class="line">        &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">r</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">if</span> (called)<span class="keyword">return</span>;</span><br><span class="line">          called = <span class="literal">true</span>;</span><br><span class="line">          reject(r);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        resolve(x);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="keyword">if</span> (called)<span class="keyword">return</span>;</span><br><span class="line">      called = <span class="literal">true</span>;</span><br><span class="line">      reject(e);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    resolve(x);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// onFullfilled成功的回调,onReject失败的回调</span></span><br><span class="line"><span class="built_in">Promise</span>.prototype.then = <span class="function"><span class="keyword">function</span> (<span class="params">onFulfilled, onRejected</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> self = <span class="keyword">this</span>;</span><br><span class="line">  onFulfilled = <span class="keyword">typeof</span> onFulfilled == <span class="string">'function'</span> ? onFulfilled : <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line">  &#125;;</span><br><span class="line">  onRejected = <span class="keyword">typeof</span> onRejected == <span class="string">'function'</span> ? onRejected : <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> value</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">let</span> promise2;</span><br><span class="line">  <span class="keyword">if</span> (self.status == <span class="string">'resolved'</span>) &#123;</span><br><span class="line">    promise2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">      setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">let</span> x = onFulfilled(self.value);</span><br><span class="line">          resolvePromise(promise2, x, resolve, reject);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">          reject(e);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (self.status == <span class="string">'rejected'</span>) &#123;</span><br><span class="line">    promise2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">      setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">let</span> x = onRejected(self.value);</span><br><span class="line">          resolvePromise(promise2, x, resolve, reject);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">          reject(e);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (self.status == <span class="string">'pending'</span>) &#123;</span><br><span class="line">    promise2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">      self.onResolvedCallbacks.push(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">let</span> x = onFulfilled(value);</span><br><span class="line">          resolvePromise(promise2, x, resolve, reject);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">          reject(e);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      self.onRejectedCallbacks.push(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">let</span> x = onRejected(value);</span><br><span class="line">          resolvePromise(promise2, x, resolve, reject);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">          reject(e);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> promise2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Promise</span>.prototype.catch = <span class="function"><span class="keyword">function</span> (<span class="params">onRejected</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.then(<span class="literal">null</span>, onRejected);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Promise</span>.all = <span class="function"><span class="keyword">function</span> (<span class="params">promises</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> result = [];</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; promises.length; i++) &#123;</span><br><span class="line">      promises[i].then(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">        result[i] = data;</span><br><span class="line">        <span class="keyword">if</span> (++count == promises.length) &#123;</span><br><span class="line">          resolve(result);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">        reject(err);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.deferred = <span class="built_in">Promise</span>.defer = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> defer = &#123;&#125;;</span><br><span class="line">  defer.promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    defer.resolve = resolve;</span><br><span class="line">    defer.reject = reject;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> defer;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * npm i -g promises-aplus-tests</span></span><br><span class="line"><span class="comment"> * promises-aplus-tests Promise.js</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="built_in">module</span>.exports = <span class="built_in">Promise</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ECMAScript 6入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ECMAScript 6入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>12. JavaScript(ES6) 中条件语句</title>
      <link href="/2019/03/03/es6/12.JavaScript(ES6)%20%E4%B8%AD%E6%9D%A1%E4%BB%B6%E8%AF%AD%E5%8F%A5/"/>
      <url>/2019/03/03/es6/12.JavaScript(ES6)%20%E4%B8%AD%E6%9D%A1%E4%BB%B6%E8%AF%AD%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="使用-Array-includes-来处理多个条件"><a href="#使用-Array-includes-来处理多个条件" class="headerlink" title="使用 Array.includes 来处理多个条件"></a>使用 Array.includes 来处理多个条件</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">fruit</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (fruit == <span class="string">'apple'</span> || fruit == <span class="string">'strawberry'</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'red'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优化变成 -&gt;&gt;</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">fruit</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 条件提取到数组中</span></span><br><span class="line">  <span class="keyword">const</span> redFruits = [<span class="string">'apple'</span>, <span class="string">'strawberry'</span>, <span class="string">'cherry'</span>, <span class="string">'cranberries'</span>];</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">if</span> (redFruits.includes(fruit)) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'red'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="减少嵌套，提前使用-return-语句"><a href="#减少嵌套，提前使用-return-语句" class="headerlink" title="减少嵌套，提前使用 return 语句"></a>减少嵌套，提前使用 return 语句</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">fruit, quantity</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> redFruits = [<span class="string">'apple'</span>, <span class="string">'strawberry'</span>, <span class="string">'cherry'</span>, <span class="string">'cranberries'</span>];</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// 条件 1：fruit 必须有值</span></span><br><span class="line">  <span class="keyword">if</span> (fruit) &#123;</span><br><span class="line">    <span class="comment">// 条件 2：必须为红色</span></span><br><span class="line">    <span class="keyword">if</span> (redFruits.includes(fruit)) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'red'</span>);</span><br><span class="line"> </span><br><span class="line">      <span class="comment">// 条件 3：数量必须大于 10</span></span><br><span class="line">      <span class="keyword">if</span> (quantity &gt; <span class="number">10</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'big quantity'</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'No fruit!'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 测试结果</span></span><br><span class="line">test(<span class="literal">null</span>); <span class="comment">// 抛出错误：No fruits</span></span><br><span class="line">test(<span class="string">'apple'</span>); <span class="comment">// 打印：red</span></span><br><span class="line">test(<span class="string">'apple'</span>, <span class="number">20</span>); <span class="comment">// 打印：red，big quantity</span></span><br></pre></td></tr></table></figure><p>优化</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 在发现无效条件时提前 return */</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">fruit, quantity</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> redFruits = [<span class="string">'apple'</span>, <span class="string">'strawberry'</span>, <span class="string">'cherry'</span>, <span class="string">'cranberries'</span>];</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// 条件 1：提前抛出错误</span></span><br><span class="line">  <span class="keyword">if</span> (!fruit) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'No fruit!'</span>);</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// 条件2：必须为红色</span></span><br><span class="line">  <span class="keyword">if</span> (redFruits.includes(fruit)) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'red'</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 条件 3：数量必须大于 10</span></span><br><span class="line">    <span class="keyword">if</span> (quantity &gt; <span class="number">10</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'big quantity'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了减少一个嵌套层级，优化编码风格</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 在发现无效条件时提前 return */</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">fruit, quantity</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> redFruits = [<span class="string">'apple'</span>, <span class="string">'strawberry'</span>, <span class="string">'cherry'</span>, <span class="string">'cranberries'</span>];</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">if</span> (!fruit) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'No fruit!'</span>); <span class="comment">// 条件 1：提前抛出错误</span></span><br><span class="line">  <span class="keyword">if</span> (!redFruits.includes(fruit)) <span class="keyword">return</span>;  <span class="comment">// 条件 2：当 fruit 不是红色的时候，提前 return</span></span><br><span class="line"> </span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'red'</span>);</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// 条件 3：必须是大量存在</span></span><br><span class="line">  <span class="keyword">if</span> (quantity &gt; <span class="number">10</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'big quantity'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用函数的默认参数-和-解构"><a href="#使用函数的默认参数-和-解构" class="headerlink" title="使用函数的默认参数 和 解构"></a>使用函数的默认参数 和 解构</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">fruit, quantity</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!fruit) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">const</span> q = quantity || <span class="number">1</span>; <span class="comment">// 如果没有提供 quantity 参数，则默认为 1</span></span><br><span class="line"> </span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`We have <span class="subst">$&#123;q&#125;</span> <span class="subst">$&#123;fruit&#125;</span>!`</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 测试结果</span></span><br><span class="line">test(<span class="string">'banana'</span>); <span class="comment">// We have 1 banana!</span></span><br><span class="line">test(<span class="string">'apple'</span>, <span class="number">2</span>); <span class="comment">// We have 2 apple!</span></span><br></pre></td></tr></table></figure><p>但是q在这边不直观所有优化</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">fruit, quantity = <span class="number">1</span></span>) </span>&#123; <span class="comment">// i如果没有提供 quantity 参数，则默认为 1</span></span><br><span class="line">  <span class="keyword">if</span> (!fruit) <span class="keyword">return</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`We have <span class="subst">$&#123;quantity&#125;</span> <span class="subst">$&#123;fruit&#125;</span>!`</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 测试结果</span></span><br><span class="line">test(<span class="string">'banana'</span>); <span class="comment">// We have 1 banana!</span></span><br><span class="line">test(<span class="string">'apple'</span>, <span class="number">2</span>); <span class="comment">// We have 2 apple!</span></span><br></pre></td></tr></table></figure><p>但是这边 也可能是个对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 解构 —— 只获得 name 属性</span></span><br><span class="line"><span class="comment">// 参数默认分配空对象 &#123;&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">&#123;name&#125; = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log (name || <span class="string">'unknown'</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//测试结果</span></span><br><span class="line">test(<span class="literal">undefined</span>); <span class="comment">// unknown</span></span><br><span class="line">test(&#123; &#125;); <span class="comment">// unknown</span></span><br><span class="line">test(&#123; <span class="attr">name</span>: <span class="string">'apple'</span>, <span class="attr">color</span>: <span class="string">'red'</span> &#125;); <span class="comment">// apple</span></span><br></pre></td></tr></table></figure><h2 id="选择-Map-Object-字面量，而不是Switch语句"><a href="#选择-Map-Object-字面量，而不是Switch语句" class="headerlink" title="选择 Map / Object 字面量，而不是Switch语句"></a>选择 Map / Object 字面量，而不是Switch语句</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">color</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 使用 switch case 语句，根据颜色找出对应的水果</span></span><br><span class="line">  <span class="keyword">switch</span> (color) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'red'</span>:</span><br><span class="line">      <span class="keyword">return</span> [<span class="string">'apple'</span>, <span class="string">'strawberry'</span>];</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'yellow'</span>:</span><br><span class="line">      <span class="keyword">return</span> [<span class="string">'banana'</span>, <span class="string">'pineapple'</span>];</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'purple'</span>:</span><br><span class="line">      <span class="keyword">return</span> [<span class="string">'grape'</span>, <span class="string">'plum'</span>];</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> [];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//测试结果</span></span><br><span class="line">test(<span class="literal">null</span>); <span class="comment">// []</span></span><br><span class="line">test(<span class="string">'yellow'</span>); <span class="comment">// ['banana', 'pineapple']</span></span><br></pre></td></tr></table></figure><p>这边建议使用对象，更加清晰</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用对象字面量，根据颜色找出对应的水果</span></span><br><span class="line">  <span class="keyword">const</span> fruitColor = &#123;</span><br><span class="line">    red: [<span class="string">'apple'</span>, <span class="string">'strawberry'</span>],</span><br><span class="line">    yellow: [<span class="string">'banana'</span>, <span class="string">'pineapple'</span>],</span><br><span class="line">    purple: [<span class="string">'grape'</span>, <span class="string">'plum'</span>]</span><br><span class="line">  &#125;;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">color</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> fruitColor[color] || [];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是这边是很有可能为网络数据，无法判断red这样的变量，那么就用arry.filter 来过滤</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fruits = [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'apple'</span>, <span class="attr">color</span>: <span class="string">'red'</span> &#125;, </span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'strawberry'</span>, <span class="attr">color</span>: <span class="string">'red'</span> &#125;, </span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'banana'</span>, <span class="attr">color</span>: <span class="string">'yellow'</span> &#125;, </span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'pineapple'</span>, <span class="attr">color</span>: <span class="string">'yellow'</span> &#125;, </span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'grape'</span>, <span class="attr">color</span>: <span class="string">'purple'</span> &#125;, </span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'plum'</span>, <span class="attr">color</span>: <span class="string">'purple'</span> &#125;</span><br><span class="line">];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">color</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 使用 Array filter  ，根据颜色找出对应的水果</span></span><br><span class="line"> </span><br><span class="line">  <span class="keyword">return</span> fruits.filter(<span class="function"><span class="params">f</span> =&gt;</span> f.color == color);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用-Array-every-和-Array-some-来处理全部-部分满足条件"><a href="#使用-Array-every-和-Array-some-来处理全部-部分满足条件" class="headerlink" title="使用 Array.every 和 Array.some 来处理全部/部分满足条件"></a>使用 Array.every 和 Array.some 来处理全部/部分满足条件</h2><p>我们想检查所有水果是否都是红色的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fruits = [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'apple'</span>, <span class="attr">color</span>: <span class="string">'red'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'banana'</span>, <span class="attr">color</span>: <span class="string">'yellow'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'grape'</span>, <span class="attr">color</span>: <span class="string">'purple'</span> &#125;</span><br><span class="line">  ];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> isAllRed = <span class="literal">true</span>;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// 条件：所有的水果都必须是红色</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> f <span class="keyword">of</span> fruits) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!isAllRed) <span class="keyword">break</span>;</span><br><span class="line">    isAllRed = (f.color == <span class="string">'red'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="built_in">console</span>.log(isAllRed); <span class="comment">// false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 arry.every来过滤</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fruits = [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'apple'</span>, <span class="attr">color</span>: <span class="string">'red'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'banana'</span>, <span class="attr">color</span>: <span class="string">'yellow'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'grape'</span>, <span class="attr">color</span>: <span class="string">'purple'</span> &#125;</span><br><span class="line">  ];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 条件：简短方式，所有的水果都必须是红色</span></span><br><span class="line">  <span class="keyword">const</span> isAllRed = fruits.every(<span class="function"><span class="params">f</span> =&gt;</span> f.color == <span class="string">'red'</span>);</span><br><span class="line"> </span><br><span class="line">  <span class="built_in">console</span>.log(isAllRed); <span class="comment">// false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果我们想要检查是否有至少一个水果是红色的，我们可以使用 Array.some 仅用一行代码就实现出来</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fruits = [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'apple'</span>, <span class="attr">color</span>: <span class="string">'red'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'banana'</span>, <span class="attr">color</span>: <span class="string">'yellow'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'grape'</span>, <span class="attr">color</span>: <span class="string">'purple'</span> &#125;</span><br><span class="line">];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 条件：是否存在红色的水果</span></span><br><span class="line">  <span class="keyword">const</span> isAnyRed = fruits.some(<span class="function"><span class="params">f</span> =&gt;</span> f.color == <span class="string">'red'</span>);</span><br><span class="line"> </span><br><span class="line">  <span class="built_in">console</span>.log(isAnyRed); <span class="comment">// true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ECMAScript 6入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ECMAScript 6入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>11 模块</title>
      <link href="/2019/03/03/es6/11.%E6%A8%A1%E5%9D%97/"/>
      <url>/2019/03/03/es6/11.%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<blockquote><p>可以根据应用的需求吧代码分成不同的模块，每个模块里可以导出它需要让其他模块使用的东西，在其他模块里面可以导入这些模块，导出的东西。</p></blockquote><blockquote><p>在浏览器中使用模块需要借助 导出</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> name = <span class="string">'wjh'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> age = <span class="number">8</span>;</span><br></pre></td></tr></table></figure><p>导入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//import &#123;name,age&#125; from './school.js';</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> school <span class="keyword">from</span> <span class="string">'./school.js'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(school.name,school.age);</span><br></pre></td></tr></table></figure><p>在页面中引用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;https://google.github.io/traceur-compiler/bin/traceur.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;https://google.github.io/traceur-compiler/bin/BrowserSystem.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;https://google.github.io/traceur-compiler/src/bootstrap.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;module&quot; src=&quot;index.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="重命名"><a href="#重命名" class="headerlink" title="重命名"></a>重命名</h2><p>导出时重命名</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">say</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'say'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> &#123;say <span class="keyword">as</span> say2&#125;;</span><br></pre></td></tr></table></figure><p>导入时重命名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123;say2 as say3&#125; from &apos;./school.js&apos;</span><br></pre></td></tr></table></figure><h2 id="11-3-默认导出"><a href="#11-3-默认导出" class="headerlink" title="11.3 默认导出"></a>11.3 默认导出</h2><p>每个模块都可以有一个默认要导出的东西</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">say</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'say'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>导入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> say <span class="keyword">from</span> <span class="string">'./school.js'</span></span><br></pre></td></tr></table></figure><h2 id="11-4-深度克隆"><a href="#11-4-深度克隆" class="headerlink" title="11.4 深度克隆"></a>11.4 深度克隆</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> parent = &#123;</span><br><span class="line">  age: <span class="number">5</span>,</span><br><span class="line">  hobby: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">  home: &#123;<span class="attr">city</span>: <span class="string">'北京'</span>&#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> child = extendDeep(parent);</span><br><span class="line">child.age = <span class="number">6</span>;</span><br><span class="line">child.hobby.push(<span class="string">'4'</span>);</span><br><span class="line">child.home.city = <span class="string">'广东'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'child '</span>, child); <span class="comment">//[1, 2, 3, 4]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'parent '</span>, parent);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">extend</span>(<span class="params">parent</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> child;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Object</span>.prototype.toString.call(parent) == <span class="string">'[object Object]'</span>) &#123;</span><br><span class="line">    child = &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> parent) &#123;</span><br><span class="line">      child[key] = extend(parent[key])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">Object</span>.prototype.toString.call(parent) == <span class="string">'[object Array]'</span>) &#123;</span><br><span class="line">    child = parent.map(<span class="function"><span class="params">item</span> =&gt;</span> extend(item));</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> parent;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> child;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">extendDeep</span>(<span class="params">parent, child</span>) </span>&#123;</span><br><span class="line">  child = child || &#123;&#125;;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> parent) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> parent[key] === <span class="string">"object"</span>) &#123;</span><br><span class="line">      child[key] = (<span class="built_in">Object</span>.prototype.toString.call(parent[key]) === <span class="string">"[object Array]"</span>) ? [] : &#123;&#125;;</span><br><span class="line">      extendDeep(parent[key], child[key]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      child[key] = parent[key];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> child;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ECMAScript 6入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ECMAScript 6入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>10. 集合</title>
      <link href="/2019/03/03/es6/10.%E9%9B%86%E5%90%88/"/>
      <url>/2019/03/03/es6/10.%E9%9B%86%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h2 id="10-1-Set"><a href="#10-1-Set" class="headerlink" title="10.1 Set"></a>10.1 Set</h2><blockquote><p>一个Set是一堆东西的集合，Set 有点像数组，不过跟数组不一样的是，Set里面不能有重复的内容</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> books = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">books.add(<span class="string">'js'</span>);</span><br><span class="line">books.add(<span class="string">'js'</span>);<span class="comment">//添加重复元素的集合元素个数不会变化</span></span><br><span class="line">books.add(<span class="string">'html'</span>);</span><br><span class="line">books.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">book</span>)</span>&#123; <span class="comment">// 循环集合</span></span><br><span class="line"><span class="built_in">console</span>.log(book);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(book.size);<span class="comment">//集合中元数的个数</span></span><br><span class="line"><span class="built_in">console</span>.log(books.has(<span class="string">'js'</span>));<span class="comment">//判断集合是否有此元素</span></span><br><span class="line">books.delete(<span class="string">'js'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(books.size);</span><br><span class="line"><span class="built_in">console</span>.log(books.has(<span class="string">'js'</span>));</span><br><span class="line">books.clear();<span class="comment">//清空set</span></span><br><span class="line"><span class="built_in">console</span>.log(books.size);</span><br></pre></td></tr></table></figure><h2 id="10-2-Map"><a href="#10-2-Map" class="headerlink" title="10.2 Map"></a>10.2 Map</h2><blockquote><p>可以使用Map来组织这个名值对的数据</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> books = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">books.set(<span class="string">'js'</span>,&#123;<span class="attr">name</span>:<span class="string">'js'</span>&#125;);<span class="comment">//向map中添加元素</span></span><br><span class="line">books.set(<span class="string">'html'</span>,&#123;<span class="attr">name</span>:<span class="string">'html'</span>&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(books.size);<span class="comment">//查看集合中的元素</span></span><br><span class="line"><span class="built_in">console</span>.log(books.get(<span class="string">'js'</span>));<span class="comment">//通过key获取值</span></span><br><span class="line">books.delete(<span class="string">'js'</span>);<span class="comment">//执行key删除元素</span></span><br><span class="line"><span class="built_in">console</span>.log(books.has(<span class="string">'js'</span>));<span class="comment">//判断map中有没有key</span></span><br><span class="line">book.forEach(<span class="function">(<span class="params">value,key</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(key+<span class="string">'='</span>+value);</span><br><span class="line">&#125;)</span><br><span class="line">books.clear();<span class="comment">//清空map</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ECMAScript 6入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ECMAScript 6入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>9. 生成器(Generator)与迭代器(Iterator)</title>
      <link href="/2019/03/03/es6/9.%E7%94%9F%E6%88%90%E5%99%A8(Generator)%E4%B8%8E%E8%BF%AD%E4%BB%A3%E5%99%A8(Iterator)/"/>
      <url>/2019/03/03/es6/9.%E7%94%9F%E6%88%90%E5%99%A8(Generator)%E4%B8%8E%E8%BF%AD%E4%BB%A3%E5%99%A8(Iterator)/</url>
      
        <content type="html"><![CDATA[<p>Generator 是一个特殊的函数，执行它会返回一个Iterator对象。通过遍历迭代器，Generator函数运行后悔返回遍历器对象，而不是函数的返回值。</p><h2 id="Iterators模拟"><a href="#Iterators模拟" class="headerlink" title="Iterators模拟"></a>Iterators模拟</h2><p>迭代器有一个next方法，每次执行的时候会返回一个对象 对象里面有两个函数，一个是value表示返回的值，还有就是布尔值done，表示是迭代完成</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buy</span>(<span class="params">books</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span>&#123;</span><br><span class="line">    next()&#123;</span><br><span class="line">      <span class="keyword">let</span> done = i ===books.length;</span><br><span class="line">      <span class="keyword">let</span> value = !done ? books[i++]:<span class="literal">undefined</span>;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">      value:value,</span><br><span class="line">        done:done</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> iterators = buy([<span class="string">'js'</span>,<span class="string">'html'</span>]);</span><br><span class="line"><span class="keyword">var</span> curr;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">curr = iterators.next();</span><br><span class="line">  <span class="built_in">console</span>.log(curr);</span><br><span class="line">&#125;<span class="keyword">while</span>(!curr.done);</span><br></pre></td></tr></table></figure><h2 id="Generators"><a href="#Generators" class="headerlink" title="Generators"></a>Generators</h2><p>生成器用于创建迭代器</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">buy</span>(<span class="params">boos</span>)</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;boos.length;i++)&#123;</span><br><span class="line">  <span class="keyword">yield</span> books[i];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> buying = buy([<span class="string">'js'</span>,<span class="string">'html]);</span></span><br><span class="line"><span class="string">var curr;</span></span><br><span class="line"><span class="string">do &#123;</span></span><br><span class="line"><span class="string">curr = buying.next();</span></span><br><span class="line"><span class="string">  console.log(curr);</span></span><br><span class="line"><span class="string">&#125;while(!curr.done);</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ECMAScript 6入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ECMAScript 6入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8. 类</title>
      <link href="/2019/03/03/es6/8.%E7%B1%BB/"/>
      <url>/2019/03/03/es6/8.%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="class"><a href="#class" class="headerlink" title="class"></a>class</h2><p>使用 class 这个关键词定义一个类，基于这个创建实例以后就会创建 constructor 方法，此方法可以用来初始化</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>(name)&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  getName()&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.name)  </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> Person(<span class="string">'wjh'</span>);</span><br><span class="line">person.getName();</span><br></pre></td></tr></table></figure><h2 id="get与set"><a href="#get与set" class="headerlink" title="get与set"></a>get与set</h2><p>getter 可以用来获取属性,setter 可以去设置属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>()&#123;</span><br><span class="line">  <span class="keyword">this</span>.hobbies = [];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">set</span> hobby(hobby)&#123;</span><br><span class="line">  <span class="keyword">this</span>.hobbies.push(hobby);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">get</span> hobby()&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.hobbies;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> Person();</span><br><span class="line">person.hobby = <span class="string">'aa'</span>;</span><br><span class="line">person.hobby = <span class="string">'bb'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(person.hobby)</span><br></pre></td></tr></table></figure><h2 id="静态方法-static"><a href="#静态方法-static" class="headerlink" title="静态方法-static"></a>静态方法-static</h2><p>在类里面添加静态的方法可以使用static 这个关键词，静态方法就是不需要实例化类就能使用的方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"><span class="keyword">static</span> add(a,b)&#123;</span><br><span class="line">  <span class="keyword">return</span> a+b;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(Person.add(<span class="number">1</span>,x));</span><br></pre></td></tr></table></figure><h2 id="继承extends"><a href="#继承extends" class="headerlink" title="继承extends"></a>继承extends</h2><p>一个类可以继承其他的类里的东西</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>(name)&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>(name,age)&#123;</span><br><span class="line">  <span class="keyword">super</span>(name);</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> teacher = Teacher(<span class="string">'wjh'</span>,<span class="number">8</span>);</span><br><span class="line"><span class="built_in">console</span>.log(teacher.name,teacher.age)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ECMAScript 6入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ECMAScript 6入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7. 对象</title>
      <link href="/2019/03/02/es6/7.%E5%AF%B9%E8%B1%A1/"/>
      <url>/2019/03/02/es6/7.%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="对象字面量"><a href="#对象字面量" class="headerlink" title="对象字面量"></a>对象字面量</h2><p>如果你想在对象里添加跟变量名一样的属性，并且属性的值就是变量表示的值就可以直接在对象里加上这些属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">'wjh'</span>;</span><br><span class="line"><span class="keyword">let</span> age = <span class="number">8</span>;</span><br><span class="line"><span class="keyword">let</span> getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> person =&#123;</span><br><span class="line">name,</span><br><span class="line">    age,</span><br><span class="line">    getName</span><br><span class="line">&#125;</span><br><span class="line">person.getName();</span><br></pre></td></tr></table></figure><blockquote><p>7.2 Object.is</p></blockquote><p>对比两个值是否相等</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.is(<span class="literal">NaN</span>,<span class="literal">NaN</span>));</span><br></pre></td></tr></table></figure><h2 id="Object-assign"><a href="#Object-assign" class="headerlink" title="Object.assign"></a>Object.assign</h2><p>把多个对象的属性复制到一个对象中，第一个参数是复制的对象，从第二个参数开始往后，都是复制的源对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> nameObj = &#123;<span class="attr">name</span>:<span class="string">'wjh'</span>&#125;</span><br><span class="line"><span class="keyword">var</span> ageObj = &#123;<span class="attr">age</span>:<span class="number">8</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.assign(obj,nameObj,ageObj);</span><br><span class="line"><span class="built_in">console</span>.log(obj);</span><br><span class="line"></span><br><span class="line"><span class="comment">//克隆对象</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clone</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Object</span>.assgin(&#123;&#125;,obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Object-setPrototypeOf"><a href="#Object-setPrototypeOf" class="headerlink" title="Object.setPrototypeOf"></a>Object.setPrototypeOf</h2><p>将一个指定的对象原型设置为另一个对象或者null</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123;<span class="attr">name</span>:<span class="string">'wjh1'</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;<span class="attr">name</span>:<span class="string">'wjh2'</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf(obj,obj1);</span><br><span class="line"><span class="built_in">console</span>.log(obj.name);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getPrototypeOf(obj));</span><br><span class="line"><span class="built_in">Object</span>.setProtoypeOF(obj,obj2);</span><br><span class="line"><span class="built_in">console</span>.log(obj.name);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getPrototypeOf(obj));</span><br></pre></td></tr></table></figure><h2 id="proto"><a href="#proto" class="headerlink" title="proto"></a>proto</h2><p>直接对象表达式中设置prototype</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var obj1 = &#123;name:&apos;wjh&apos;&#125;;</span><br><span class="line">var obj3 = &#123;</span><br><span class="line">_proto_:obj1</span><br><span class="line">&#125; </span><br><span class="line">console.log(obj3.name);</span><br><span class="line">console.log(Object.getPrototypeOf(obj3));</span><br></pre></td></tr></table></figure><h2 id="super"><a href="#super" class="headerlink" title="super"></a>super</h2><p>通过super可以调用protype上的属性或方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person =&#123;</span><br><span class="line">eat()&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'milk'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> student = &#123;</span><br><span class="line">_proto_:person,</span><br><span class="line">  eat()&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">super</span>.eat()+<span class="string">'bead'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(student.eat());</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ECMAScript 6入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ECMAScript 6入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6. 数组的新方法</title>
      <link href="/2019/03/02/es6/6.%E6%95%B0%E7%BB%84%E7%9A%84%E6%96%B0%E6%96%B9%E6%B3%95/"/>
      <url>/2019/03/02/es6/6.%E6%95%B0%E7%BB%84%E7%9A%84%E6%96%B0%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 相同的阵列</span></span><br><span class="line"><span class="keyword">var</span> people = [</span><br><span class="line">  &#123;</span><br><span class="line">    name : <span class="string">'Casper'</span> ,</span><br><span class="line">    like : <span class="string">'锅烧意面'</span> ,</span><br><span class="line">    age : <span class="number">18</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name : <span class="string">'Wang'</span> ,</span><br><span class="line">    like : <span class="string">'炒面'</span> ,</span><br><span class="line">    age : <span class="number">24</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name : <span class="string">'Bobo'</span> ,</span><br><span class="line">    like : <span class="string">'萝卜泥'</span> ,</span><br><span class="line">    age : <span class="number">1</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name : <span class="string">'卤蛋'</span> ,</span><br><span class="line">    like : <span class="string">'萝卜泥'</span> ,</span><br><span class="line">    age : <span class="number">3</span></span><br><span class="line">  &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h2 id="filter"><a href="#filter" class="headerlink" title="filter()"></a>filter()</h2><blockquote><p>filter() 会回传一个阵列，其条件是return 后方为true 的物件，很适合用在搜寻符合条件的资料。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var filterEmpty = people.filter( function ( item, index, array ) &#123;</span><br><span class="line">&#125;);</span><br><span class="line">console .log(filterEmpty);     //没有条件，会是一个空阵列</span><br><span class="line"></span><br><span class="line">var filterAgeThan5 = people.filter( function ( item, index, array ) &#123;</span><br><span class="line">  return item.age &gt; 5 ;        //取得大于五岁的   如果这边符合条件 只要为ture即可</span><br><span class="line">&#125;);</span><br><span class="line">console .log(filterAgeThan5);    // Casper, Wang这两个物件</span><br></pre></td></tr></table></figure><h2 id="find"><a href="#find" class="headerlink" title="find()"></a>find()</h2><blockquote><p>find()与filter()很像，但find() 只会回传一次值，且是第一次为true的值。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> findEmpty = people.find( <span class="function"><span class="keyword">function</span> (<span class="params"> item, index, array </span>) </span>&#123;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span> .log(findEmpty);           <span class="comment">//没有条件，会是undefined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> findAgeThan5 = people.find( <span class="function"><span class="keyword">function</span> (<span class="params"> item, index, array </span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> item.age &gt; <span class="number">5</span> ;            <span class="comment">//取得大于五岁的</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span> .log(findAgeThan5);        <span class="comment">//虽然答案有两个，但只会回传Casper这一个物件</span></span><br><span class="line"><span class="keyword">var</span> findLike = people.find( <span class="function"><span class="keyword">function</span> (<span class="params"> item, index, array </span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> item.like === <span class="string">'萝卜泥'</span> ;   <span class="comment">//取得阵列like === '萝卜泥'</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span> .log(findLike);            <span class="comment">//虽然答案有两个，但只会回传第一个Bobo物件</span></span><br></pre></td></tr></table></figure><h2 id="forEach"><a href="#forEach" class="headerlink" title="forEach()"></a>forEach()</h2><blockquote><p>forEach 是这几个阵列函式最单纯的一个，不会额外回传值，只单纯执行每个阵列内的物件或值。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> forEachIt = people.forEach( <span class="function"><span class="keyword">function</span> (<span class="params"> item, index, array </span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span> .log(item, index, array); <span class="comment">//物件,索引,全部阵列</span></span><br><span class="line">  <span class="keyword">return</span> item;                      <span class="comment">// forEach没在return的，所以这边写了也没用</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span> .log(forEachIt);             <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line">people.forEach( <span class="function"><span class="keyword">function</span> (<span class="params"> item, index, array </span>) </span>&#123;</span><br><span class="line">  item.age = item.age + <span class="number">1</span> ;          <span class="comment">// forEach就如同for，不过写法更容易</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span> .log(people);                <span class="comment">//全部age + 1</span></span><br></pre></td></tr></table></figure><h2 id="map"><a href="#map" class="headerlink" title="map()"></a>map()</h2><blockquote><p>使用map() 时他需要回传一个值，他会透过函式内所回传的值组合成一个阵列。<br>如果不回传则是 undefined<br>回传数量等于原始阵列的长度<br>这很适合将原始的变数运算后重新组合一个新的阵列。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mapEmpty = people.map( <span class="function"><span class="keyword">function</span> (<span class="params"> item, index, array </span>) </span>&#123;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span> .log(mapEmpty);     <span class="comment">// [undefined, undefined, undefined, undefined]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> mapAgeThan5 = people.map( <span class="function"><span class="keyword">function</span> (<span class="params"> item, index, array </span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> item.age &gt; <span class="number">5</span> ;     <span class="comment">//比较大于五岁的</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span> .log(mapAgeThan5); <span class="comment">// [true, true, false, false]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> mapAgeThan5_2 = people.map( <span class="function"><span class="keyword">function</span> (<span class="params"> item, index, array </span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 错误示范</span></span><br><span class="line">  <span class="keyword">if</span> (item.age &gt; <span class="number">5</span> ) &#123;</span><br><span class="line">    <span class="keyword">return</span> item;               <span class="comment">//回传大于五岁的</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span>  <span class="literal">false</span> ;                <span class="comment">//别以为空的或是false就不会回传</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span> .log(mapAgeThan5_2);    <span class="comment">// [&#123;name: 'Casper'...&#125;, &#123;name: 'Wang'...&#125;, false, false]</span></span><br><span class="line"><span class="keyword">var</span> mapEat = people.map( <span class="function"><span class="keyword">function</span> (<span class="params"> item, index, array </span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (item.like !== <span class="string">'萝卜泥'</span> ) &#123;</span><br><span class="line">    <span class="keyword">return</span>  <span class="string">` <span class="subst">$&#123;item.like&#125;</span>好吃`</span> ;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span>  <span class="string">` <span class="subst">$&#123;item.like&#125;</span>不好吃`</span> ;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span> .log(mapEat);           <span class="comment">// ["锅烧意面好吃", "炒面好吃", "萝卜泥不好吃", "萝卜泥不好吃"]</span></span><br></pre></td></tr></table></figure><h2 id="every"><a href="#every" class="headerlink" title="every()"></a>every()</h2><blockquote><p>every()可以检查所有的阵列是否符合条件，这仅会回传一个值trueor false，可以用来检查阵列中的内容是否符合特定条件。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ans = array.every( <span class="function"><span class="keyword">function</span> (<span class="params"> item, index, array </span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span> .log(item, index, array); <span class="comment">//物件,索引,全部阵列</span></span><br><span class="line">  <span class="keyword">return</span> item.age &gt; <span class="number">10</span>  <span class="comment">//当全部age大于10才能回传true</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span> .log(ans); <span class="comment">// false:只要有部分不符合，则为false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ans2 = array.every( <span class="function"><span class="keyword">function</span> (<span class="params"> item, index, array </span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> item.age &lt; <span class="number">25</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span> .log(ans2); <span class="comment">// true:全部age都小于25</span></span><br></pre></td></tr></table></figure><h2 id="some"><a href="#some" class="headerlink" title="some()"></a>some()</h2><blockquote><p>some() 与every() 非常接近，都是回传true or false，差异仅在every() 需完全符合，some() 仅需要部分符合。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ans = people.some( <span class="function"><span class="keyword">function</span> (<span class="params"> item, index, array </span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> item.age &gt; <span class="number">10</span>  <span class="comment">//当全部age大于10才能回传true</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span> .log(ans);   <span class="comment">// true:只要有部分符合，则为true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ans2 = people.some( <span class="function"><span class="keyword">function</span> (<span class="params"> item, index, array </span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> item.age &lt; <span class="number">25</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span> .log(ans2); <span class="comment">// true:只要有部分符合，则为true  </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ans2 = people.some( <span class="function"><span class="keyword">function</span> (<span class="params"> item, index, array </span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> item.age &gt; <span class="number">25</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span> .log(ans2); <span class="comment">// false:全部都不符合则为false</span></span><br></pre></td></tr></table></figure><h2 id="reduce"><a href="#reduce" class="headerlink" title="reduce()"></a>reduce()</h2><blockquote><p>reduce() 和其他几个差异就很大了，他可以与前一个回传的值再次作运算，参数包含以下：<br>accumulator: 前一个参数，如果是第一个阵列的话，值是以另外传入或初始化的值<br>currentValue: 当前变数<br>currentIndex: 当前索引<br>array: 全部阵列</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reduceEmpty = people.reduce( <span class="function"><span class="keyword">function</span> (<span class="params"> accumulator, currentValue, currentIndex, array </span>) </span>&#123;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span> .log(reduceEmpty);                  <span class="comment">//没有条件，会是undefined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reducePlus = people.reduce( <span class="function"><span class="keyword">function</span> (<span class="params"> accumulator, currentValue, currentIndex, array </span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 分别为前一个回传值, 目前值, 当前索引值</span></span><br><span class="line">  <span class="built_in">console</span> .log(accumulator, currentValue, currentIndex);</span><br><span class="line">  <span class="keyword">return</span> accumulator + currentValue.age;   <span class="comment">//与前一个值相加</span></span><br><span class="line">&#125;, <span class="number">0</span> );                                     <span class="comment">//传入初始化值为0</span></span><br><span class="line"><span class="built_in">console</span> .log(reducePlus);                   <span class="comment">//总和为46</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reducePlus = people.reduce( <span class="function"><span class="keyword">function</span> (<span class="params"> accumulator, currentValue, currentIndex, array </span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span> .log( <span class="string">'reduce'</span> , accumulator, currentValue, currentIndex)</span><br><span class="line">  <span class="keyword">return</span>  <span class="built_in">Math</span> .max( accumulator, currentValue.age ); <span class="comment">//与前一个值比较哪个大</span></span><br><span class="line">&#125;, <span class="number">0</span> );</span><br><span class="line"><span class="built_in">console</span> .log(reducePlus);                   <span class="comment">//最大值为24</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ECMAScript 6入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ECMAScript 6入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5. 函数</title>
      <link href="/2019/03/02/es6/5.%E5%87%BD%E6%95%B0/"/>
      <url>/2019/03/02/es6/5.%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h2><p>可以给定义的函数接收的参数设置默认的值 在执行这个函数的时候，如果不指定函数的参数的值，就会使用参数的这些默认的值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params">url,method=<span class="string">'GET'</span>,dataType=<span class="string">"json"</span></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(url);</span><br><span class="line">  <span class="built_in">console</span>.log(method);</span><br><span class="line">  <span class="built_in">console</span>.log(dataType);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="展开操作符"><a href="#展开操作符" class="headerlink" title="展开操作符"></a>展开操作符</h2><p>把…放在数组前面可以把一个数组进行展开，可以把一个函数而不需要使用<code>apply</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//传入参数</span></span><br><span class="line"><span class="keyword">let</span> print = <span class="function"><span class="keyword">function</span>(<span class="params">a,b,c</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a,b,c);</span><br><span class="line">&#125;</span><br><span class="line">print([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]);</span><br><span class="line">print(...[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以替代apply</span></span><br><span class="line"><span class="keyword">var</span> m1 = <span class="built_in">Math</span>.max.apply(<span class="literal">null</span>, [<span class="number">8</span>, <span class="number">9</span>, <span class="number">4</span>, <span class="number">1</span>]);</span><br><span class="line"><span class="keyword">var</span> m2 = <span class="built_in">Math</span>.max(...[<span class="number">8</span>, <span class="number">9</span>, <span class="number">4</span>, <span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以替代concat</span></span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">3</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> arr3 = arr1.concat(arr2);</span><br><span class="line"><span class="keyword">var</span> arr4 = [...arr1, ...arr2];</span><br><span class="line"><span class="built_in">console</span>.log(arr3,arr4);</span><br><span class="line"></span><br><span class="line"><span class="comment">//类数组的转数组</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">max</span>(<span class="params">a,b,c</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">Math</span>.max(...arguments));</span><br><span class="line">&#125;</span><br><span class="line">max(<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br></pre></td></tr></table></figure><h2 id="剩余操作符"><a href="#剩余操作符" class="headerlink" title="剩余操作符"></a>剩余操作符</h2><p>剩余操作符可以把其余参数的值放在一个叫做b的数组里</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> rest = <span class="function"><span class="keyword">function</span>(<span class="params">a,...rest</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a,rest);</span><br><span class="line">&#125;</span><br><span class="line">rest(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br></pre></td></tr></table></figure><h2 id="解构参数"><a href="#解构参数" class="headerlink" title="解构参数"></a>解构参数</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> destruct = <span class="function"><span class="keyword">function</span>(<span class="params">&#123;name,age&#125;</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(name,age);</span><br><span class="line">&#125;</span><br><span class="line">destruct(&#123;<span class="attr">name</span>:<span class="string">'wjh'</span>,<span class="attr">age</span>:<span class="number">10</span>&#125;)</span><br></pre></td></tr></table></figure><h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><p>箭头函数简化了函数的定义方式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].forEach(<span class="function"><span class="params">val</span>=&gt;</span><span class="built_in">console</span>.log(val));</span><br></pre></td></tr></table></figure><p>输入参数如果多于一个要用()包含，函数体如果有多条语句需要用{}包起来</p><p>箭头函数根本没有自己的this，导致内部的this就是外层代码块的this。 正是因为它没有this，从而避免了this指向的问题。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    name:<span class="string">'wjh'</span>,</span><br><span class="line">    getName:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">-        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="keyword">this</span>);&#125;,<span class="number">1000</span>); <span class="comment">//在浏览器执行的话this指向window</span></span><br><span class="line">+        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="keyword">this</span>),<span class="number">1000</span>);<span class="comment">//在浏览器执行的话this指向person</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">person.getName();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ECMAScript 6入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ECMAScript 6入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4. 字符串</title>
      <link href="/2019/03/02/es6/4.%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>/2019/03/02/es6/4.%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<h2 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h2><p>模板字符串用反应号(数字1左边的那个建)包含，用<code>${}</code>括起来</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">'zfpx'</span>,age = <span class="number">8</span>;</span><br><span class="line"><span class="keyword">let</span> desc = <span class="string">`<span class="subst">$&#123;name&#125;</span> is <span class="subst">$&#123;age&#125;</span> old!`</span>;</span><br><span class="line"><span class="built_in">console</span>.log(desc);</span><br><span class="line"></span><br><span class="line"><span class="comment">//所有模板字符串的空格和换行，都是被保留的</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">`&lt;ul&gt;</span></span><br><span class="line"><span class="string">&lt;li&gt;a&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;li&gt;b&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;/ul&gt;`</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br></pre></td></tr></table></figure><blockquote><p>其中的变量会用变量的值替换掉</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">replace</span>(<span class="params">desc</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> desc.replace(<span class="regexp">/\$\&#123;([^&#125;]+)\&#125;/g</span>,<span class="function"><span class="keyword">function</span>(<span class="params">matched,key</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">eval</span>(key);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="带标签的模板字符串"><a href="#带标签的模板字符串" class="headerlink" title="带标签的模板字符串"></a>带标签的模板字符串</h2><p>可以在模板字符串的前面添加一个标签，这个标签可以去处理模板字符串 标签其实就是一个函数,函数可以接收两个参数,一个是 strings 就是模板字符串里的每个部分的字符 还有一个参数可以使用rest的形式values,这个参数里面是模板字符串里的值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">'wjh'</span>,age = <span class="number">8</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">desc</span>(<span class="params">strings,...values</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(strings,values);</span><br><span class="line">&#125;</span><br><span class="line">desc<span class="string">`<span class="subst">$&#123;name&#125;</span> is <span class="subst">$&#123;age&#125;</span> old!`</span>;</span><br></pre></td></tr></table></figure><blockquote><p>字符串新方法</p></blockquote><ul><li>includes()：返回布尔值，表示是否找到了参数字符串。</li><li>startsWith()：返回布尔值，表示参数字符串是否在源字符串的头部。</li><li>endsWith()：返回布尔值，表示参数字符串是否在源字符串的尾部。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">'wjh'</span>;</span><br><span class="line">s.startsWith(<span class="string">'w'</span>) <span class="comment">// true</span></span><br><span class="line">s.endsWith(<span class="string">'h'</span>) <span class="comment">// true</span></span><br><span class="line">s.includes(<span class="string">'j'</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>第二个参数，表示开始搜索的位置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var s = &apos;wjh&apos;;</span><br><span class="line">console.log(s.startsWith(&apos;j&apos;,2)); // true</span><br><span class="line">console.log(s.endsWith(&apos;j&apos;,2)); // true</span><br><span class="line">console.log(s.includes(&apos;j&apos;,2)); // false</span><br></pre></td></tr></table></figure><blockquote><p>endsWith的行为与其他其他方法有所不同。它针对前n个字符，而其他方法是从第几位开始到字符串结束</p></blockquote><h2 id="repeat"><a href="#repeat" class="headerlink" title="repeat"></a>repeat</h2><p>repeat 方法返回一个新字符串，表示将原字符串重复n次。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&apos;x&apos;.repeat(3);</span><br><span class="line">&apos;x&apos;.repeat(0);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ECMAScript 6入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ECMAScript 6入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3. 解构</title>
      <link href="/2019/03/02/es6/3.%E8%A7%A3%E6%9E%84/"/>
      <url>/2019/03/02/es6/3.%E8%A7%A3%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<p>解构意思就是分解一个东西的结构,可以用一种类似数组的方式定义N个变量，可以将一个数组中的值按照规则赋值过去。</p><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> [name,age]=[<span class="string">'wjh'</span>,<span class="number">8</span>];</span><br><span class="line"><span class="built_in">console</span>.log(name,age);</span><br></pre></td></tr></table></figure><h2 id="嵌套赋值"><a href="#嵌套赋值" class="headerlink" title="嵌套赋值"></a>嵌套赋值</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [x,[y],z]=[<span class="number">1</span>,[<span class="number">2.1</span>]];</span><br><span class="line"><span class="built_in">console</span>.log(x,y,z);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [x,[y,z]] = [<span class="number">1</span>,[<span class="number">2.1</span>,<span class="number">2.2</span>]];</span><br><span class="line"><span class="built_in">console</span>.log(x,y,z);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [json,arr,num] = [&#123;<span class="attr">name</span>:<span class="string">'wjw'</span>&#125;,[<span class="number">1</span>,<span class="number">2</span>],<span class="number">3</span>];</span><br><span class="line"><span class="built_in">console</span>.log(json,arr,num);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1 2.1 undefined 1 2.1 2.2 &#123; name: 'wjw' &#125; [ 1, 2 ] 3</span></span><br></pre></td></tr></table></figure><h2 id="省略赋值"><a href="#省略赋值" class="headerlink" title="省略赋值"></a>省略赋值</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [,,x]=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="built_in">console</span>.log(x);</span><br></pre></td></tr></table></figure><h2 id="解构对象"><a href="#解构对象" class="headerlink" title="解构对象"></a>解构对象</h2><p>对象也可以被解构</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">name</span>:<span class="string">'zfpx'</span>,<span class="attr">age</span>:<span class="number">8</span>&#125;;</span><br><span class="line"><span class="comment">//对象里的name属性的值会交给name这个变量，age的值会交给age这个变量</span></span><br><span class="line"><span class="keyword">var</span> &#123;name,age&#125; = obj</span><br><span class="line"><span class="comment">//对象里的name属性的值会交给myname这个变量，age的值会交给myage这个变量</span></span><br><span class="line"><span class="keyword">let</span> &#123;<span class="attr">name</span>: myname, <span class="attr">age</span>: myage&#125; = obj;</span><br><span class="line"><span class="built_in">console</span>.log(name,age,myname,myage);</span><br></pre></td></tr></table></figure><h2 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h2><p>在赋值和传参的时候可以使用默认值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a=<span class="string">'a'</span>,b=<span class="string">'b'</span>,c=<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'C必须指定'</span>)] = [<span class="number">1</span>, , <span class="number">3</span>];</span><br><span class="line"><span class="built_in">console</span>.log(a,b,c);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params">options</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> method = options.method || <span class="string">"get"</span>;</span><br><span class="line">  <span class="keyword">var</span> data = options.data || &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params">method=<span class="string">'get'</span>,data</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ajax(&#123;</span><br><span class="line">method:<span class="string">'post'</span>,</span><br><span class="line">  data:&#123;<span class="string">'name'</span>:<span class="string">'wjh'</span>&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ECMAScript 6入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ECMAScript 6入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2. 常量</title>
      <link href="/2019/03/02/es6/2.%E5%B8%B8%E9%87%8F/"/>
      <url>/2019/03/02/es6/2.%E5%B8%B8%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<p>使用 const 我们可以声明一个常量，一旦声明之后，就不可以更改。</p><a id="more"></a><blockquote><p>使用 const 我们可以声明一个常量，一旦声明之后，就不可以更改。</p></blockquote><h2 id="常量不能重新赋值"><a href="#常量不能重新赋值" class="headerlink" title="常量不能重新赋值"></a>常量不能重新赋值</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> MY_NAME = <span class="string">'zfpx'</span>;</span><br><span class="line">MY_NAME = <span class="string">'zfpx2'</span>;<span class="comment">//Assignment to constant variable</span></span><br></pre></td></tr></table></figure><h2 id="变量可以改变"><a href="#变量可以改变" class="headerlink" title="变量可以改变"></a>变量可以改变</h2><blockquote><p>注意const限制的是不能给变量重新赋值，而变量的值本身是可以改变的,下面的操作是可以的</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> names = [<span class="string">'zfpx1'</span>];</span><br><span class="line">names.push(<span class="string">'zfpx2'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(names);</span><br></pre></td></tr></table></figure><h2 id="不同的块级作用域可以多次定义"><a href="#不同的块级作用域可以多次定义" class="headerlink" title="不同的块级作用域可以多次定义"></a>不同的块级作用域可以多次定义</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> A = <span class="string">"0"</span>;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">const</span> A = <span class="string">"A"</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(A)</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">const</span> A = <span class="string">"B"</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(A)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(A)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果 A B 0</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ECMAScript 6入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ECMAScript 6入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1. 作用域变量</title>
      <link href="/2019/03/01/es6/1.%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%8F%98%E9%87%8F/"/>
      <url>/2019/03/01/es6/1.%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%8F%98%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<p>作用域就是变量的作用范围。也就是你声明一个变量以后，这个变量可以在什么场合下使用。以前的JavaScript只有全局作用域，和函数作用域。</p><a id="more"></a><blockquote><p>作用域就是变量的作用范围。也就是你声明一个变量以后，这个变量可以在什么场合下使用。以前的JavaScript只有全局作用域，和函数作用域。</p></blockquote><h2 id="var的问题"><a href="#var的问题" class="headerlink" title="var的问题"></a>var的问题</h2><p>1.var 没有块级作用域，定义后在当前包中都都可以访问，如果变量名重复，就会覆盖前面定义的变量，并且很可以被他人修改。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if(true)&#123;</span><br><span class="line">var a = &quot;a&quot;; //期望a是某一个值</span><br><span class="line">&#125;</span><br><span class="line">console.log(a);</span><br></pre></td></tr></table></figure><p><br>2.var 在for循环标记变量共享，一般在循环中会使用的i会被共享，其本质也是由于没有块级作用域造成的<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">for (var i = 0; i &lt; 3; i++) &#123;</span><br><span class="line">     setTimeout(function () &#123;</span><br><span class="line">         alert(i);</span><br><span class="line">     &#125;, 0);</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> // 结果就是 弹窗三次 3</span><br><span class="line"> </span><br><span class="line"> for ( i = 0; i &lt; 3; i++) &#123;</span><br><span class="line">     setTimeout(function () &#123;</span><br><span class="line">         alert(i);</span><br><span class="line">     &#125;, 0);</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> // 结果就是 弹窗三次 0-2</span><br></pre></td></tr></table></figure><h2 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h2><p>在用var定义变量的时候，变量通过闭包进行隔离的，现在用了let，不仅仅可以通过闭包隔离，还可以增加了一些块级作用域隔离。块级作用用一组大括号定义一个快，使用let定义的变量字啊大括号的外面是访问不到的。</p><h3 id="实现会计作用域"><a href="#实现会计作用域" class="headerlink" title="实现会计作用域"></a>实现会计作用域</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if(ture)&#123;</span><br><span class="line">let name = &apos;wjh&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">consloe.log(&apos;name&apos;); // ReferenceError: name is not defined</span><br></pre></td></tr></table></figure><h3 id="不会污染全局对象"><a href="#不会污染全局对象" class="headerlink" title="不会污染全局对象"></a>不会污染全局对象</h3><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if(ture)&#123;</span><br><span class="line">let name = &apos;wjh&apos;</span><br><span class="line">&#125;</span><br><span class="line">console.log(window.name); // undefined</span><br></pre></td></tr></table></figure><h3 id="for-循环中也可以使用i"><a href="#for-循环中也可以使用i" class="headerlink" title="for 循环中也可以使用i"></a>for 循环中也可以使用i</h3><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 嵌套循环不会相互影响</span><br><span class="line">for (let i = 0; i &lt; 3; i++) &#123;</span><br><span class="line">   console.log(&quot;out&quot;, i);</span><br><span class="line">   for (let i = 0; i &lt; 2; i++) &#123;</span><br><span class="line">   console.log(&quot;in&quot;, i);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 结果 out 0 in 0 in 1 out 1 in 0 in 1 out 2 in 0 in 1</span><br></pre></td></tr></table></figure><h3 id="重复定义会报错"><a href="#重复定义会报错" class="headerlink" title="重复定义会报错"></a>重复定义会报错</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if(ture)&#123;</span><br><span class="line">let a = 1;</span><br><span class="line">  let a = 2; //Identifier &apos;a&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="不存在变量的预解释"><a href="#不存在变量的预解释" class="headerlink" title="不存在变量的预解释"></a>不存在变量的预解释</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">for(let i = 0;i&lt;2;i++)&#123;</span><br><span class="line">console.log(&apos;inner&apos;,i);</span><br><span class="line">  let i =100;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 结果 i is not defined</span><br></pre></td></tr></table></figure><h3 id="闭包的新写法"><a href="#闭包的新写法" class="headerlink" title="闭包的新写法"></a>闭包的新写法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">;(function()&#123;</span><br><span class="line"></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>现在</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ECMAScript 6入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ECMAScript 6入门 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
